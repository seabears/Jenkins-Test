<?xml version="1.0"?>
<dumps language="c">
  <platform name="win64" char_bit="8" short_bit="16" int_bit="32" long_bit="32" long_long_bit="64" pointer_bit="64"/>
  <rawtokens>
    <file index="0" name="C:/test_workspace/curl-master/tests/libtest/lib518.c"/>
    <file index="1" name="C:/test_workspace/curl-master/tests/libtest/test.h"/>
    <tok fileIndex="0" linenr="1" column="1" str="/***************************************************************************x *                                  _   _ ____  _x *  Project                     ___| | | |  _ \| |x *                             / __| | | | |_) | |x *                            | (__| |_| |  _ &lt;| |___x *                             \___|\___/|_| \_\_____|x *x * Copyright (C) Daniel Stenberg, &lt;daniel@haxx.se&gt;, et al.x *x * This software is licensed as described in the file COPYING, whichx * you should have received as part of this distribution. The termsx * are also available at https://curl.se/docs/copyright.html.x *x * You may opt to use, copy, modify, merge, publish, distribute and/or sellx * copies of the Software, and permit persons to whom the Software isx * furnished to do so, under the terms of the COPYING file.x *x * This software is distributed on an &quot;AS IS&quot; basis, WITHOUT WARRANTY OF ANYx * KIND, either express or implied.x *x * SPDX-License-Identifier: curlx *x ***************************************************************************/"/>
    <tok fileIndex="0" linenr="24" column="1" str="#"/>
    <tok fileIndex="0" linenr="24" column="2" str="include"/>
    <tok fileIndex="0" linenr="24" column="10" str="&quot;test.h&quot;"/>
    <tok fileIndex="0" linenr="26" column="1" str="#"/>
    <tok fileIndex="0" linenr="26" column="2" str="ifdef"/>
    <tok fileIndex="0" linenr="26" column="8" str="HAVE_SYS_RESOURCE_H"/>
    <tok fileIndex="0" linenr="27" column="1" str="#"/>
    <tok fileIndex="0" linenr="27" column="2" str="include"/>
    <tok fileIndex="0" linenr="27" column="10" str="&lt;sys/resource.h&gt;"/>
    <tok fileIndex="0" linenr="28" column="1" str="#"/>
    <tok fileIndex="0" linenr="28" column="2" str="endif"/>
    <tok fileIndex="0" linenr="29" column="1" str="#"/>
    <tok fileIndex="0" linenr="29" column="2" str="ifdef"/>
    <tok fileIndex="0" linenr="29" column="8" str="HAVE_FCNTL_H"/>
    <tok fileIndex="0" linenr="30" column="1" str="#"/>
    <tok fileIndex="0" linenr="30" column="2" str="include"/>
    <tok fileIndex="0" linenr="30" column="10" str="&lt;fcntl.h&gt;"/>
    <tok fileIndex="0" linenr="31" column="1" str="#"/>
    <tok fileIndex="0" linenr="31" column="2" str="endif"/>
    <tok fileIndex="0" linenr="32" column="1" str="#"/>
    <tok fileIndex="0" linenr="32" column="2" str="include"/>
    <tok fileIndex="0" linenr="32" column="10" str="&lt;limits.h&gt;"/>
    <tok fileIndex="0" linenr="34" column="1" str="#"/>
    <tok fileIndex="0" linenr="34" column="2" str="include"/>
    <tok fileIndex="0" linenr="34" column="10" str="&quot;warnless.h&quot;"/>
    <tok fileIndex="0" linenr="35" column="1" str="#"/>
    <tok fileIndex="0" linenr="35" column="2" str="include"/>
    <tok fileIndex="0" linenr="35" column="10" str="&quot;memdebug.h&quot;"/>
    <tok fileIndex="0" linenr="37" column="1" str="#"/>
    <tok fileIndex="0" linenr="37" column="2" str="ifndef"/>
    <tok fileIndex="0" linenr="37" column="9" str="FD_SETSIZE"/>
    <tok fileIndex="0" linenr="38" column="1" str="#"/>
    <tok fileIndex="0" linenr="38" column="2" str="error"/>
    <tok fileIndex="0" linenr="38" column="8" str="&quot;this test requires FD_SETSIZE&quot;"/>
    <tok fileIndex="0" linenr="39" column="1" str="#"/>
    <tok fileIndex="0" linenr="39" column="2" str="endif"/>
    <tok fileIndex="0" linenr="41" column="1" str="#"/>
    <tok fileIndex="0" linenr="41" column="2" str="define"/>
    <tok fileIndex="0" linenr="41" column="9" str="SAFETY_MARGIN"/>
    <tok fileIndex="0" linenr="41" column="23" str="("/>
    <tok fileIndex="0" linenr="41" column="24" str="16"/>
    <tok fileIndex="0" linenr="41" column="26" str=")"/>
    <tok fileIndex="0" linenr="42" column="1" str="#"/>
    <tok fileIndex="0" linenr="42" column="2" str="define"/>
    <tok fileIndex="0" linenr="42" column="9" str="NUM_OPEN"/>
    <tok fileIndex="0" linenr="42" column="23" str="("/>
    <tok fileIndex="0" linenr="42" column="24" str="FD_SETSIZE"/>
    <tok fileIndex="0" linenr="42" column="35" str="+"/>
    <tok fileIndex="0" linenr="42" column="37" str="10"/>
    <tok fileIndex="0" linenr="42" column="39" str=")"/>
    <tok fileIndex="0" linenr="43" column="1" str="#"/>
    <tok fileIndex="0" linenr="43" column="2" str="define"/>
    <tok fileIndex="0" linenr="43" column="9" str="NUM_NEEDED"/>
    <tok fileIndex="0" linenr="43" column="23" str="("/>
    <tok fileIndex="0" linenr="43" column="24" str="NUM_OPEN"/>
    <tok fileIndex="0" linenr="43" column="33" str="+"/>
    <tok fileIndex="0" linenr="43" column="35" str="SAFETY_MARGIN"/>
    <tok fileIndex="0" linenr="43" column="48" str=")"/>
    <tok fileIndex="0" linenr="45" column="1" str="#"/>
    <tok fileIndex="0" linenr="45" column="2" str="if"/>
    <tok fileIndex="0" linenr="45" column="5" str="defined"/>
    <tok fileIndex="0" linenr="45" column="12" str="("/>
    <tok fileIndex="0" linenr="45" column="13" str="_WIN32"/>
    <tok fileIndex="0" linenr="45" column="19" str=")"/>
    <tok fileIndex="0" linenr="45" column="21" str="||"/>
    <tok fileIndex="0" linenr="45" column="24" str="defined"/>
    <tok fileIndex="0" linenr="45" column="31" str="("/>
    <tok fileIndex="0" linenr="45" column="32" str="MSDOS"/>
    <tok fileIndex="0" linenr="45" column="37" str=")"/>
    <tok fileIndex="0" linenr="46" column="1" str="#"/>
    <tok fileIndex="0" linenr="46" column="2" str="define"/>
    <tok fileIndex="0" linenr="46" column="9" str="DEV_NULL"/>
    <tok fileIndex="0" linenr="46" column="18" str="&quot;NUL&quot;"/>
    <tok fileIndex="0" linenr="47" column="1" str="#"/>
    <tok fileIndex="0" linenr="47" column="2" str="else"/>
    <tok fileIndex="0" linenr="48" column="1" str="#"/>
    <tok fileIndex="0" linenr="48" column="2" str="define"/>
    <tok fileIndex="0" linenr="48" column="9" str="DEV_NULL"/>
    <tok fileIndex="0" linenr="48" column="18" str="&quot;/dev/null&quot;"/>
    <tok fileIndex="0" linenr="49" column="1" str="#"/>
    <tok fileIndex="0" linenr="49" column="2" str="endif"/>
    <tok fileIndex="0" linenr="51" column="1" str="#"/>
    <tok fileIndex="0" linenr="51" column="2" str="if"/>
    <tok fileIndex="0" linenr="51" column="5" str="defined"/>
    <tok fileIndex="0" linenr="51" column="12" str="("/>
    <tok fileIndex="0" linenr="51" column="13" str="HAVE_GETRLIMIT"/>
    <tok fileIndex="0" linenr="51" column="27" str=")"/>
    <tok fileIndex="0" linenr="51" column="29" str="&amp;&amp;"/>
    <tok fileIndex="0" linenr="51" column="32" str="defined"/>
    <tok fileIndex="0" linenr="51" column="39" str="("/>
    <tok fileIndex="0" linenr="51" column="40" str="HAVE_SETRLIMIT"/>
    <tok fileIndex="0" linenr="51" column="54" str=")"/>
    <tok fileIndex="0" linenr="53" column="1" str="static"/>
    <tok fileIndex="0" linenr="53" column="8" str="int"/>
    <tok fileIndex="0" linenr="53" column="12" str="*"/>
    <tok fileIndex="0" linenr="53" column="13" str="testfd"/>
    <tok fileIndex="0" linenr="53" column="20" str="="/>
    <tok fileIndex="0" linenr="53" column="22" str="NULL"/>
    <tok fileIndex="0" linenr="53" column="26" str=";"/>
    <tok fileIndex="0" linenr="54" column="1" str="static"/>
    <tok fileIndex="0" linenr="54" column="8" str="struct"/>
    <tok fileIndex="0" linenr="54" column="15" str="rlimit"/>
    <tok fileIndex="0" linenr="54" column="22" str="num_open"/>
    <tok fileIndex="0" linenr="54" column="30" str=";"/>
    <tok fileIndex="0" linenr="55" column="1" str="static"/>
    <tok fileIndex="0" linenr="55" column="8" str="char"/>
    <tok fileIndex="0" linenr="55" column="13" str="msgbuff"/>
    <tok fileIndex="0" linenr="55" column="20" str="["/>
    <tok fileIndex="0" linenr="55" column="21" str="256"/>
    <tok fileIndex="0" linenr="55" column="24" str="]"/>
    <tok fileIndex="0" linenr="55" column="25" str=";"/>
    <tok fileIndex="0" linenr="57" column="1" str="static"/>
    <tok fileIndex="0" linenr="57" column="8" str="void"/>
    <tok fileIndex="0" linenr="57" column="13" str="store_errmsg"/>
    <tok fileIndex="0" linenr="57" column="25" str="("/>
    <tok fileIndex="0" linenr="57" column="26" str="const"/>
    <tok fileIndex="0" linenr="57" column="32" str="char"/>
    <tok fileIndex="0" linenr="57" column="37" str="*"/>
    <tok fileIndex="0" linenr="57" column="38" str="msg"/>
    <tok fileIndex="0" linenr="57" column="41" str=","/>
    <tok fileIndex="0" linenr="57" column="43" str="int"/>
    <tok fileIndex="0" linenr="57" column="47" str="err"/>
    <tok fileIndex="0" linenr="57" column="50" str=")"/>
    <tok fileIndex="0" linenr="58" column="1" str="{"/>
    <tok fileIndex="0" linenr="59" column="3" str="if"/>
    <tok fileIndex="0" linenr="59" column="5" str="("/>
    <tok fileIndex="0" linenr="59" column="6" str="!"/>
    <tok fileIndex="0" linenr="59" column="7" str="err"/>
    <tok fileIndex="0" linenr="59" column="10" str=")"/>
    <tok fileIndex="0" linenr="60" column="5" str="msnprintf"/>
    <tok fileIndex="0" linenr="60" column="14" str="("/>
    <tok fileIndex="0" linenr="60" column="15" str="msgbuff"/>
    <tok fileIndex="0" linenr="60" column="22" str=","/>
    <tok fileIndex="0" linenr="60" column="24" str="sizeof"/>
    <tok fileIndex="0" linenr="60" column="30" str="("/>
    <tok fileIndex="0" linenr="60" column="31" str="msgbuff"/>
    <tok fileIndex="0" linenr="60" column="38" str=")"/>
    <tok fileIndex="0" linenr="60" column="39" str=","/>
    <tok fileIndex="0" linenr="60" column="41" str="&quot;%s&quot;"/>
    <tok fileIndex="0" linenr="60" column="45" str=","/>
    <tok fileIndex="0" linenr="60" column="47" str="msg"/>
    <tok fileIndex="0" linenr="60" column="50" str=")"/>
    <tok fileIndex="0" linenr="60" column="51" str=";"/>
    <tok fileIndex="0" linenr="61" column="3" str="else"/>
    <tok fileIndex="0" linenr="62" column="5" str="msnprintf"/>
    <tok fileIndex="0" linenr="62" column="14" str="("/>
    <tok fileIndex="0" linenr="62" column="15" str="msgbuff"/>
    <tok fileIndex="0" linenr="62" column="22" str=","/>
    <tok fileIndex="0" linenr="62" column="24" str="sizeof"/>
    <tok fileIndex="0" linenr="62" column="30" str="("/>
    <tok fileIndex="0" linenr="62" column="31" str="msgbuff"/>
    <tok fileIndex="0" linenr="62" column="38" str=")"/>
    <tok fileIndex="0" linenr="62" column="39" str=","/>
    <tok fileIndex="0" linenr="62" column="41" str="&quot;%s, errno %d, %s&quot;"/>
    <tok fileIndex="0" linenr="62" column="59" str=","/>
    <tok fileIndex="0" linenr="62" column="61" str="msg"/>
    <tok fileIndex="0" linenr="62" column="64" str=","/>
    <tok fileIndex="0" linenr="63" column="15" str="err"/>
    <tok fileIndex="0" linenr="63" column="18" str=","/>
    <tok fileIndex="0" linenr="63" column="20" str="strerror"/>
    <tok fileIndex="0" linenr="63" column="28" str="("/>
    <tok fileIndex="0" linenr="63" column="29" str="err"/>
    <tok fileIndex="0" linenr="63" column="32" str=")"/>
    <tok fileIndex="0" linenr="63" column="33" str=")"/>
    <tok fileIndex="0" linenr="63" column="34" str=";"/>
    <tok fileIndex="0" linenr="64" column="1" str="}"/>
    <tok fileIndex="0" linenr="66" column="1" str="static"/>
    <tok fileIndex="0" linenr="66" column="8" str="void"/>
    <tok fileIndex="0" linenr="66" column="13" str="close_file_descriptors"/>
    <tok fileIndex="0" linenr="66" column="35" str="("/>
    <tok fileIndex="0" linenr="66" column="36" str="void"/>
    <tok fileIndex="0" linenr="66" column="40" str=")"/>
    <tok fileIndex="0" linenr="67" column="1" str="{"/>
    <tok fileIndex="0" linenr="68" column="3" str="for"/>
    <tok fileIndex="0" linenr="68" column="6" str="("/>
    <tok fileIndex="0" linenr="68" column="7" str="num_open"/>
    <tok fileIndex="0" linenr="68" column="15" str="."/>
    <tok fileIndex="0" linenr="68" column="16" str="rlim_cur"/>
    <tok fileIndex="0" linenr="68" column="25" str="="/>
    <tok fileIndex="0" linenr="68" column="27" str="0"/>
    <tok fileIndex="0" linenr="68" column="28" str=";"/>
    <tok fileIndex="0" linenr="69" column="7" str="num_open"/>
    <tok fileIndex="0" linenr="69" column="15" str="."/>
    <tok fileIndex="0" linenr="69" column="16" str="rlim_cur"/>
    <tok fileIndex="0" linenr="69" column="25" str="&lt;"/>
    <tok fileIndex="0" linenr="69" column="27" str="num_open"/>
    <tok fileIndex="0" linenr="69" column="35" str="."/>
    <tok fileIndex="0" linenr="69" column="36" str="rlim_max"/>
    <tok fileIndex="0" linenr="69" column="44" str=";"/>
    <tok fileIndex="0" linenr="70" column="7" str="num_open"/>
    <tok fileIndex="0" linenr="70" column="15" str="."/>
    <tok fileIndex="0" linenr="70" column="16" str="rlim_cur"/>
    <tok fileIndex="0" linenr="70" column="24" str="++"/>
    <tok fileIndex="0" linenr="70" column="26" str=")"/>
    <tok fileIndex="0" linenr="71" column="5" str="if"/>
    <tok fileIndex="0" linenr="71" column="7" str="("/>
    <tok fileIndex="0" linenr="71" column="8" str="testfd"/>
    <tok fileIndex="0" linenr="71" column="14" str="["/>
    <tok fileIndex="0" linenr="71" column="15" str="num_open"/>
    <tok fileIndex="0" linenr="71" column="23" str="."/>
    <tok fileIndex="0" linenr="71" column="24" str="rlim_cur"/>
    <tok fileIndex="0" linenr="71" column="32" str="]"/>
    <tok fileIndex="0" linenr="71" column="34" str="&gt;"/>
    <tok fileIndex="0" linenr="71" column="36" str="0"/>
    <tok fileIndex="0" linenr="71" column="37" str=")"/>
    <tok fileIndex="0" linenr="72" column="7" str="close"/>
    <tok fileIndex="0" linenr="72" column="12" str="("/>
    <tok fileIndex="0" linenr="72" column="13" str="testfd"/>
    <tok fileIndex="0" linenr="72" column="19" str="["/>
    <tok fileIndex="0" linenr="72" column="20" str="num_open"/>
    <tok fileIndex="0" linenr="72" column="28" str="."/>
    <tok fileIndex="0" linenr="72" column="29" str="rlim_cur"/>
    <tok fileIndex="0" linenr="72" column="37" str="]"/>
    <tok fileIndex="0" linenr="72" column="38" str=")"/>
    <tok fileIndex="0" linenr="72" column="39" str=";"/>
    <tok fileIndex="0" linenr="73" column="3" str="free"/>
    <tok fileIndex="0" linenr="73" column="7" str="("/>
    <tok fileIndex="0" linenr="73" column="8" str="testfd"/>
    <tok fileIndex="0" linenr="73" column="14" str=")"/>
    <tok fileIndex="0" linenr="73" column="15" str=";"/>
    <tok fileIndex="0" linenr="74" column="3" str="testfd"/>
    <tok fileIndex="0" linenr="74" column="10" str="="/>
    <tok fileIndex="0" linenr="74" column="12" str="NULL"/>
    <tok fileIndex="0" linenr="74" column="16" str=";"/>
    <tok fileIndex="0" linenr="75" column="1" str="}"/>
    <tok fileIndex="0" linenr="77" column="1" str="static"/>
    <tok fileIndex="0" linenr="77" column="8" str="int"/>
    <tok fileIndex="0" linenr="77" column="12" str="fopen_works"/>
    <tok fileIndex="0" linenr="77" column="23" str="("/>
    <tok fileIndex="0" linenr="77" column="24" str="void"/>
    <tok fileIndex="0" linenr="77" column="28" str=")"/>
    <tok fileIndex="0" linenr="78" column="1" str="{"/>
    <tok fileIndex="0" linenr="79" column="3" str="FILE"/>
    <tok fileIndex="0" linenr="79" column="8" str="*"/>
    <tok fileIndex="0" linenr="79" column="9" str="fpa"/>
    <tok fileIndex="0" linenr="79" column="12" str="["/>
    <tok fileIndex="0" linenr="79" column="13" str="3"/>
    <tok fileIndex="0" linenr="79" column="14" str="]"/>
    <tok fileIndex="0" linenr="79" column="15" str=";"/>
    <tok fileIndex="0" linenr="80" column="3" str="int"/>
    <tok fileIndex="0" linenr="80" column="7" str="i"/>
    <tok fileIndex="0" linenr="80" column="8" str=";"/>
    <tok fileIndex="0" linenr="81" column="3" str="int"/>
    <tok fileIndex="0" linenr="81" column="7" str="ret"/>
    <tok fileIndex="0" linenr="81" column="11" str="="/>
    <tok fileIndex="0" linenr="81" column="13" str="1"/>
    <tok fileIndex="0" linenr="81" column="14" str=";"/>
    <tok fileIndex="0" linenr="83" column="3" str="for"/>
    <tok fileIndex="0" linenr="83" column="6" str="("/>
    <tok fileIndex="0" linenr="83" column="7" str="i"/>
    <tok fileIndex="0" linenr="83" column="9" str="="/>
    <tok fileIndex="0" linenr="83" column="11" str="0"/>
    <tok fileIndex="0" linenr="83" column="12" str=";"/>
    <tok fileIndex="0" linenr="83" column="14" str="i"/>
    <tok fileIndex="0" linenr="83" column="16" str="&lt;"/>
    <tok fileIndex="0" linenr="83" column="18" str="3"/>
    <tok fileIndex="0" linenr="83" column="19" str=";"/>
    <tok fileIndex="0" linenr="83" column="21" str="i"/>
    <tok fileIndex="0" linenr="83" column="22" str="++"/>
    <tok fileIndex="0" linenr="83" column="24" str=")"/>
    <tok fileIndex="0" linenr="83" column="26" str="{"/>
    <tok fileIndex="0" linenr="84" column="5" str="fpa"/>
    <tok fileIndex="0" linenr="84" column="8" str="["/>
    <tok fileIndex="0" linenr="84" column="9" str="i"/>
    <tok fileIndex="0" linenr="84" column="10" str="]"/>
    <tok fileIndex="0" linenr="84" column="12" str="="/>
    <tok fileIndex="0" linenr="84" column="14" str="NULL"/>
    <tok fileIndex="0" linenr="84" column="18" str=";"/>
    <tok fileIndex="0" linenr="85" column="3" str="}"/>
    <tok fileIndex="0" linenr="86" column="3" str="for"/>
    <tok fileIndex="0" linenr="86" column="6" str="("/>
    <tok fileIndex="0" linenr="86" column="7" str="i"/>
    <tok fileIndex="0" linenr="86" column="9" str="="/>
    <tok fileIndex="0" linenr="86" column="11" str="0"/>
    <tok fileIndex="0" linenr="86" column="12" str=";"/>
    <tok fileIndex="0" linenr="86" column="14" str="i"/>
    <tok fileIndex="0" linenr="86" column="16" str="&lt;"/>
    <tok fileIndex="0" linenr="86" column="18" str="3"/>
    <tok fileIndex="0" linenr="86" column="19" str=";"/>
    <tok fileIndex="0" linenr="86" column="21" str="i"/>
    <tok fileIndex="0" linenr="86" column="22" str="++"/>
    <tok fileIndex="0" linenr="86" column="24" str=")"/>
    <tok fileIndex="0" linenr="86" column="26" str="{"/>
    <tok fileIndex="0" linenr="87" column="5" str="fpa"/>
    <tok fileIndex="0" linenr="87" column="8" str="["/>
    <tok fileIndex="0" linenr="87" column="9" str="i"/>
    <tok fileIndex="0" linenr="87" column="10" str="]"/>
    <tok fileIndex="0" linenr="87" column="12" str="="/>
    <tok fileIndex="0" linenr="87" column="14" str="fopen"/>
    <tok fileIndex="0" linenr="87" column="19" str="("/>
    <tok fileIndex="0" linenr="87" column="20" str="DEV_NULL"/>
    <tok fileIndex="0" linenr="87" column="28" str=","/>
    <tok fileIndex="0" linenr="87" column="30" str="FOPEN_READTEXT"/>
    <tok fileIndex="0" linenr="87" column="44" str=")"/>
    <tok fileIndex="0" linenr="87" column="45" str=";"/>
    <tok fileIndex="0" linenr="88" column="5" str="if"/>
    <tok fileIndex="0" linenr="88" column="7" str="("/>
    <tok fileIndex="0" linenr="88" column="8" str="!"/>
    <tok fileIndex="0" linenr="88" column="9" str="fpa"/>
    <tok fileIndex="0" linenr="88" column="12" str="["/>
    <tok fileIndex="0" linenr="88" column="13" str="i"/>
    <tok fileIndex="0" linenr="88" column="14" str="]"/>
    <tok fileIndex="0" linenr="88" column="15" str=")"/>
    <tok fileIndex="0" linenr="88" column="17" str="{"/>
    <tok fileIndex="0" linenr="89" column="7" str="store_errmsg"/>
    <tok fileIndex="0" linenr="89" column="19" str="("/>
    <tok fileIndex="0" linenr="89" column="20" str="&quot;fopen failed&quot;"/>
    <tok fileIndex="0" linenr="89" column="34" str=","/>
    <tok fileIndex="0" linenr="89" column="36" str="errno"/>
    <tok fileIndex="0" linenr="89" column="41" str=")"/>
    <tok fileIndex="0" linenr="89" column="42" str=";"/>
    <tok fileIndex="0" linenr="90" column="7" str="fprintf"/>
    <tok fileIndex="0" linenr="90" column="14" str="("/>
    <tok fileIndex="0" linenr="90" column="15" str="stderr"/>
    <tok fileIndex="0" linenr="90" column="21" str=","/>
    <tok fileIndex="0" linenr="90" column="23" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="90" column="29" str=","/>
    <tok fileIndex="0" linenr="90" column="31" str="msgbuff"/>
    <tok fileIndex="0" linenr="90" column="38" str=")"/>
    <tok fileIndex="0" linenr="90" column="39" str=";"/>
    <tok fileIndex="0" linenr="91" column="7" str="ret"/>
    <tok fileIndex="0" linenr="91" column="11" str="="/>
    <tok fileIndex="0" linenr="91" column="13" str="0"/>
    <tok fileIndex="0" linenr="91" column="14" str=";"/>
    <tok fileIndex="0" linenr="92" column="7" str="break"/>
    <tok fileIndex="0" linenr="92" column="12" str=";"/>
    <tok fileIndex="0" linenr="93" column="5" str="}"/>
    <tok fileIndex="0" linenr="94" column="3" str="}"/>
    <tok fileIndex="0" linenr="95" column="3" str="for"/>
    <tok fileIndex="0" linenr="95" column="6" str="("/>
    <tok fileIndex="0" linenr="95" column="7" str="i"/>
    <tok fileIndex="0" linenr="95" column="9" str="="/>
    <tok fileIndex="0" linenr="95" column="11" str="0"/>
    <tok fileIndex="0" linenr="95" column="12" str=";"/>
    <tok fileIndex="0" linenr="95" column="14" str="i"/>
    <tok fileIndex="0" linenr="95" column="16" str="&lt;"/>
    <tok fileIndex="0" linenr="95" column="18" str="3"/>
    <tok fileIndex="0" linenr="95" column="19" str=";"/>
    <tok fileIndex="0" linenr="95" column="21" str="i"/>
    <tok fileIndex="0" linenr="95" column="22" str="++"/>
    <tok fileIndex="0" linenr="95" column="24" str=")"/>
    <tok fileIndex="0" linenr="95" column="26" str="{"/>
    <tok fileIndex="0" linenr="96" column="5" str="if"/>
    <tok fileIndex="0" linenr="96" column="7" str="("/>
    <tok fileIndex="0" linenr="96" column="8" str="fpa"/>
    <tok fileIndex="0" linenr="96" column="11" str="["/>
    <tok fileIndex="0" linenr="96" column="12" str="i"/>
    <tok fileIndex="0" linenr="96" column="13" str="]"/>
    <tok fileIndex="0" linenr="96" column="14" str=")"/>
    <tok fileIndex="0" linenr="97" column="7" str="fclose"/>
    <tok fileIndex="0" linenr="97" column="13" str="("/>
    <tok fileIndex="0" linenr="97" column="14" str="fpa"/>
    <tok fileIndex="0" linenr="97" column="17" str="["/>
    <tok fileIndex="0" linenr="97" column="18" str="i"/>
    <tok fileIndex="0" linenr="97" column="19" str="]"/>
    <tok fileIndex="0" linenr="97" column="20" str=")"/>
    <tok fileIndex="0" linenr="97" column="21" str=";"/>
    <tok fileIndex="0" linenr="98" column="3" str="}"/>
    <tok fileIndex="0" linenr="99" column="3" str="return"/>
    <tok fileIndex="0" linenr="99" column="10" str="ret"/>
    <tok fileIndex="0" linenr="99" column="13" str=";"/>
    <tok fileIndex="0" linenr="100" column="1" str="}"/>
    <tok fileIndex="0" linenr="102" column="1" str="static"/>
    <tok fileIndex="0" linenr="102" column="8" str="void"/>
    <tok fileIndex="0" linenr="102" column="13" str="rlim2str"/>
    <tok fileIndex="0" linenr="102" column="21" str="("/>
    <tok fileIndex="0" linenr="102" column="22" str="char"/>
    <tok fileIndex="0" linenr="102" column="27" str="*"/>
    <tok fileIndex="0" linenr="102" column="28" str="buf"/>
    <tok fileIndex="0" linenr="102" column="31" str=","/>
    <tok fileIndex="0" linenr="102" column="33" str="size_t"/>
    <tok fileIndex="0" linenr="102" column="40" str="len"/>
    <tok fileIndex="0" linenr="102" column="43" str=","/>
    <tok fileIndex="0" linenr="102" column="45" str="rlim_t"/>
    <tok fileIndex="0" linenr="102" column="52" str="val"/>
    <tok fileIndex="0" linenr="102" column="55" str=")"/>
    <tok fileIndex="0" linenr="103" column="1" str="{"/>
    <tok fileIndex="0" linenr="104" column="1" str="#"/>
    <tok fileIndex="0" linenr="104" column="2" str="ifdef"/>
    <tok fileIndex="0" linenr="104" column="8" str="RLIM_INFINITY"/>
    <tok fileIndex="0" linenr="105" column="3" str="if"/>
    <tok fileIndex="0" linenr="105" column="5" str="("/>
    <tok fileIndex="0" linenr="105" column="6" str="val"/>
    <tok fileIndex="0" linenr="105" column="10" str="=="/>
    <tok fileIndex="0" linenr="105" column="13" str="RLIM_INFINITY"/>
    <tok fileIndex="0" linenr="105" column="26" str=")"/>
    <tok fileIndex="0" linenr="105" column="28" str="{"/>
    <tok fileIndex="0" linenr="106" column="5" str="msnprintf"/>
    <tok fileIndex="0" linenr="106" column="14" str="("/>
    <tok fileIndex="0" linenr="106" column="15" str="buf"/>
    <tok fileIndex="0" linenr="106" column="18" str=","/>
    <tok fileIndex="0" linenr="106" column="20" str="len"/>
    <tok fileIndex="0" linenr="106" column="23" str=","/>
    <tok fileIndex="0" linenr="106" column="25" str="&quot;INFINITY&quot;"/>
    <tok fileIndex="0" linenr="106" column="35" str=")"/>
    <tok fileIndex="0" linenr="106" column="36" str=";"/>
    <tok fileIndex="0" linenr="107" column="5" str="return"/>
    <tok fileIndex="0" linenr="107" column="11" str=";"/>
    <tok fileIndex="0" linenr="108" column="3" str="}"/>
    <tok fileIndex="0" linenr="109" column="1" str="#"/>
    <tok fileIndex="0" linenr="109" column="2" str="endif"/>
    <tok fileIndex="0" linenr="110" column="1" str="#"/>
    <tok fileIndex="0" linenr="110" column="2" str="ifdef"/>
    <tok fileIndex="0" linenr="110" column="8" str="HAVE_LONGLONG"/>
    <tok fileIndex="0" linenr="111" column="3" str="if"/>
    <tok fileIndex="0" linenr="111" column="5" str="("/>
    <tok fileIndex="0" linenr="111" column="6" str="sizeof"/>
    <tok fileIndex="0" linenr="111" column="12" str="("/>
    <tok fileIndex="0" linenr="111" column="13" str="rlim_t"/>
    <tok fileIndex="0" linenr="111" column="19" str=")"/>
    <tok fileIndex="0" linenr="111" column="21" str="&gt;"/>
    <tok fileIndex="0" linenr="111" column="23" str="sizeof"/>
    <tok fileIndex="0" linenr="111" column="29" str="("/>
    <tok fileIndex="0" linenr="111" column="30" str="long"/>
    <tok fileIndex="0" linenr="111" column="34" str=")"/>
    <tok fileIndex="0" linenr="111" column="35" str=")"/>
    <tok fileIndex="0" linenr="112" column="5" str="msnprintf"/>
    <tok fileIndex="0" linenr="112" column="14" str="("/>
    <tok fileIndex="0" linenr="112" column="15" str="buf"/>
    <tok fileIndex="0" linenr="112" column="18" str=","/>
    <tok fileIndex="0" linenr="112" column="20" str="len"/>
    <tok fileIndex="0" linenr="112" column="23" str=","/>
    <tok fileIndex="0" linenr="112" column="25" str="&quot;%llu&quot;"/>
    <tok fileIndex="0" linenr="112" column="31" str=","/>
    <tok fileIndex="0" linenr="112" column="33" str="("/>
    <tok fileIndex="0" linenr="112" column="34" str="unsigned"/>
    <tok fileIndex="0" linenr="112" column="43" str="long"/>
    <tok fileIndex="0" linenr="112" column="48" str="long"/>
    <tok fileIndex="0" linenr="112" column="52" str=")"/>
    <tok fileIndex="0" linenr="112" column="53" str="val"/>
    <tok fileIndex="0" linenr="112" column="56" str=")"/>
    <tok fileIndex="0" linenr="112" column="57" str=";"/>
    <tok fileIndex="0" linenr="113" column="3" str="else"/>
    <tok fileIndex="0" linenr="114" column="1" str="#"/>
    <tok fileIndex="0" linenr="114" column="2" str="endif"/>
    <tok fileIndex="0" linenr="115" column="3" str="{"/>
    <tok fileIndex="0" linenr="116" column="5" str="if"/>
    <tok fileIndex="0" linenr="116" column="7" str="("/>
    <tok fileIndex="0" linenr="116" column="8" str="sizeof"/>
    <tok fileIndex="0" linenr="116" column="14" str="("/>
    <tok fileIndex="0" linenr="116" column="15" str="rlim_t"/>
    <tok fileIndex="0" linenr="116" column="21" str=")"/>
    <tok fileIndex="0" linenr="116" column="23" str="&lt;"/>
    <tok fileIndex="0" linenr="116" column="25" str="sizeof"/>
    <tok fileIndex="0" linenr="116" column="31" str="("/>
    <tok fileIndex="0" linenr="116" column="32" str="long"/>
    <tok fileIndex="0" linenr="116" column="36" str=")"/>
    <tok fileIndex="0" linenr="116" column="37" str=")"/>
    <tok fileIndex="0" linenr="117" column="7" str="msnprintf"/>
    <tok fileIndex="0" linenr="117" column="16" str="("/>
    <tok fileIndex="0" linenr="117" column="17" str="buf"/>
    <tok fileIndex="0" linenr="117" column="20" str=","/>
    <tok fileIndex="0" linenr="117" column="22" str="len"/>
    <tok fileIndex="0" linenr="117" column="25" str=","/>
    <tok fileIndex="0" linenr="117" column="27" str="&quot;%u&quot;"/>
    <tok fileIndex="0" linenr="117" column="31" str=","/>
    <tok fileIndex="0" linenr="117" column="33" str="("/>
    <tok fileIndex="0" linenr="117" column="34" str="unsigned"/>
    <tok fileIndex="0" linenr="117" column="43" str="int"/>
    <tok fileIndex="0" linenr="117" column="46" str=")"/>
    <tok fileIndex="0" linenr="117" column="47" str="val"/>
    <tok fileIndex="0" linenr="117" column="50" str=")"/>
    <tok fileIndex="0" linenr="117" column="51" str=";"/>
    <tok fileIndex="0" linenr="118" column="5" str="else"/>
    <tok fileIndex="0" linenr="119" column="7" str="msnprintf"/>
    <tok fileIndex="0" linenr="119" column="16" str="("/>
    <tok fileIndex="0" linenr="119" column="17" str="buf"/>
    <tok fileIndex="0" linenr="119" column="20" str=","/>
    <tok fileIndex="0" linenr="119" column="22" str="len"/>
    <tok fileIndex="0" linenr="119" column="25" str=","/>
    <tok fileIndex="0" linenr="119" column="27" str="&quot;%lu&quot;"/>
    <tok fileIndex="0" linenr="119" column="32" str=","/>
    <tok fileIndex="0" linenr="119" column="34" str="("/>
    <tok fileIndex="0" linenr="119" column="35" str="unsigned"/>
    <tok fileIndex="0" linenr="119" column="44" str="long"/>
    <tok fileIndex="0" linenr="119" column="48" str=")"/>
    <tok fileIndex="0" linenr="119" column="49" str="val"/>
    <tok fileIndex="0" linenr="119" column="52" str=")"/>
    <tok fileIndex="0" linenr="119" column="53" str=";"/>
    <tok fileIndex="0" linenr="120" column="3" str="}"/>
    <tok fileIndex="0" linenr="121" column="1" str="}"/>
    <tok fileIndex="0" linenr="123" column="1" str="static"/>
    <tok fileIndex="0" linenr="123" column="8" str="int"/>
    <tok fileIndex="0" linenr="123" column="12" str="test_rlimit"/>
    <tok fileIndex="0" linenr="123" column="23" str="("/>
    <tok fileIndex="0" linenr="123" column="24" str="int"/>
    <tok fileIndex="0" linenr="123" column="28" str="keep_open"/>
    <tok fileIndex="0" linenr="123" column="37" str=")"/>
    <tok fileIndex="0" linenr="124" column="1" str="{"/>
    <tok fileIndex="0" linenr="125" column="3" str="rlim_t"/>
    <tok fileIndex="0" linenr="125" column="10" str="nitems"/>
    <tok fileIndex="0" linenr="125" column="16" str=","/>
    <tok fileIndex="0" linenr="125" column="18" str="i"/>
    <tok fileIndex="0" linenr="125" column="19" str=";"/>
    <tok fileIndex="0" linenr="126" column="3" str="int"/>
    <tok fileIndex="0" linenr="126" column="7" str="*"/>
    <tok fileIndex="0" linenr="126" column="8" str="memchunk"/>
    <tok fileIndex="0" linenr="126" column="17" str="="/>
    <tok fileIndex="0" linenr="126" column="19" str="NULL"/>
    <tok fileIndex="0" linenr="126" column="23" str=";"/>
    <tok fileIndex="0" linenr="127" column="3" str="struct"/>
    <tok fileIndex="0" linenr="127" column="10" str="rlimit"/>
    <tok fileIndex="0" linenr="127" column="17" str="rl"/>
    <tok fileIndex="0" linenr="127" column="19" str=";"/>
    <tok fileIndex="0" linenr="128" column="3" str="char"/>
    <tok fileIndex="0" linenr="128" column="8" str="strbuff"/>
    <tok fileIndex="0" linenr="128" column="15" str="["/>
    <tok fileIndex="0" linenr="128" column="16" str="256"/>
    <tok fileIndex="0" linenr="128" column="19" str="]"/>
    <tok fileIndex="0" linenr="128" column="20" str=";"/>
    <tok fileIndex="0" linenr="129" column="3" str="char"/>
    <tok fileIndex="0" linenr="129" column="8" str="strbuff1"/>
    <tok fileIndex="0" linenr="129" column="16" str="["/>
    <tok fileIndex="0" linenr="129" column="17" str="81"/>
    <tok fileIndex="0" linenr="129" column="19" str="]"/>
    <tok fileIndex="0" linenr="129" column="20" str=";"/>
    <tok fileIndex="0" linenr="130" column="3" str="char"/>
    <tok fileIndex="0" linenr="130" column="8" str="strbuff2"/>
    <tok fileIndex="0" linenr="130" column="16" str="["/>
    <tok fileIndex="0" linenr="130" column="17" str="81"/>
    <tok fileIndex="0" linenr="130" column="19" str="]"/>
    <tok fileIndex="0" linenr="130" column="20" str=";"/>
    <tok fileIndex="0" linenr="132" column="3" str="/* get initial open file limits */"/>
    <tok fileIndex="0" linenr="134" column="3" str="if"/>
    <tok fileIndex="0" linenr="134" column="5" str="("/>
    <tok fileIndex="0" linenr="134" column="6" str="getrlimit"/>
    <tok fileIndex="0" linenr="134" column="15" str="("/>
    <tok fileIndex="0" linenr="134" column="16" str="RLIMIT_NOFILE"/>
    <tok fileIndex="0" linenr="134" column="29" str=","/>
    <tok fileIndex="0" linenr="134" column="31" str="&amp;"/>
    <tok fileIndex="0" linenr="134" column="32" str="rl"/>
    <tok fileIndex="0" linenr="134" column="34" str=")"/>
    <tok fileIndex="0" linenr="134" column="36" str="!="/>
    <tok fileIndex="0" linenr="134" column="39" str="0"/>
    <tok fileIndex="0" linenr="134" column="40" str=")"/>
    <tok fileIndex="0" linenr="134" column="42" str="{"/>
    <tok fileIndex="0" linenr="135" column="5" str="store_errmsg"/>
    <tok fileIndex="0" linenr="135" column="17" str="("/>
    <tok fileIndex="0" linenr="135" column="18" str="&quot;getrlimit() failed&quot;"/>
    <tok fileIndex="0" linenr="135" column="38" str=","/>
    <tok fileIndex="0" linenr="135" column="40" str="errno"/>
    <tok fileIndex="0" linenr="135" column="45" str=")"/>
    <tok fileIndex="0" linenr="135" column="46" str=";"/>
    <tok fileIndex="0" linenr="136" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="136" column="12" str="("/>
    <tok fileIndex="0" linenr="136" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="136" column="19" str=","/>
    <tok fileIndex="0" linenr="136" column="21" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="136" column="27" str=","/>
    <tok fileIndex="0" linenr="136" column="29" str="msgbuff"/>
    <tok fileIndex="0" linenr="136" column="36" str=")"/>
    <tok fileIndex="0" linenr="136" column="37" str=";"/>
    <tok fileIndex="0" linenr="137" column="5" str="return"/>
    <tok fileIndex="0" linenr="137" column="12" str="-"/>
    <tok fileIndex="0" linenr="137" column="13" str="1"/>
    <tok fileIndex="0" linenr="137" column="14" str=";"/>
    <tok fileIndex="0" linenr="138" column="3" str="}"/>
    <tok fileIndex="0" linenr="140" column="3" str="/* show initial open file limits */"/>
    <tok fileIndex="0" linenr="142" column="3" str="rlim2str"/>
    <tok fileIndex="0" linenr="142" column="11" str="("/>
    <tok fileIndex="0" linenr="142" column="12" str="strbuff"/>
    <tok fileIndex="0" linenr="142" column="19" str=","/>
    <tok fileIndex="0" linenr="142" column="21" str="sizeof"/>
    <tok fileIndex="0" linenr="142" column="27" str="("/>
    <tok fileIndex="0" linenr="142" column="28" str="strbuff"/>
    <tok fileIndex="0" linenr="142" column="35" str=")"/>
    <tok fileIndex="0" linenr="142" column="36" str=","/>
    <tok fileIndex="0" linenr="142" column="38" str="rl"/>
    <tok fileIndex="0" linenr="142" column="40" str="."/>
    <tok fileIndex="0" linenr="142" column="41" str="rlim_cur"/>
    <tok fileIndex="0" linenr="142" column="49" str=")"/>
    <tok fileIndex="0" linenr="142" column="50" str=";"/>
    <tok fileIndex="0" linenr="143" column="3" str="fprintf"/>
    <tok fileIndex="0" linenr="143" column="10" str="("/>
    <tok fileIndex="0" linenr="143" column="11" str="stderr"/>
    <tok fileIndex="0" linenr="143" column="17" str=","/>
    <tok fileIndex="0" linenr="143" column="19" str="&quot;initial soft limit: %s\n&quot;"/>
    <tok fileIndex="0" linenr="143" column="45" str=","/>
    <tok fileIndex="0" linenr="143" column="47" str="strbuff"/>
    <tok fileIndex="0" linenr="143" column="54" str=")"/>
    <tok fileIndex="0" linenr="143" column="55" str=";"/>
    <tok fileIndex="0" linenr="145" column="3" str="rlim2str"/>
    <tok fileIndex="0" linenr="145" column="11" str="("/>
    <tok fileIndex="0" linenr="145" column="12" str="strbuff"/>
    <tok fileIndex="0" linenr="145" column="19" str=","/>
    <tok fileIndex="0" linenr="145" column="21" str="sizeof"/>
    <tok fileIndex="0" linenr="145" column="27" str="("/>
    <tok fileIndex="0" linenr="145" column="28" str="strbuff"/>
    <tok fileIndex="0" linenr="145" column="35" str=")"/>
    <tok fileIndex="0" linenr="145" column="36" str=","/>
    <tok fileIndex="0" linenr="145" column="38" str="rl"/>
    <tok fileIndex="0" linenr="145" column="40" str="."/>
    <tok fileIndex="0" linenr="145" column="41" str="rlim_max"/>
    <tok fileIndex="0" linenr="145" column="49" str=")"/>
    <tok fileIndex="0" linenr="145" column="50" str=";"/>
    <tok fileIndex="0" linenr="146" column="3" str="fprintf"/>
    <tok fileIndex="0" linenr="146" column="10" str="("/>
    <tok fileIndex="0" linenr="146" column="11" str="stderr"/>
    <tok fileIndex="0" linenr="146" column="17" str=","/>
    <tok fileIndex="0" linenr="146" column="19" str="&quot;initial hard limit: %s\n&quot;"/>
    <tok fileIndex="0" linenr="146" column="45" str=","/>
    <tok fileIndex="0" linenr="146" column="47" str="strbuff"/>
    <tok fileIndex="0" linenr="146" column="54" str=")"/>
    <tok fileIndex="0" linenr="146" column="55" str=";"/>
    <tok fileIndex="0" linenr="148" column="3" str="/* show our constants */"/>
    <tok fileIndex="0" linenr="150" column="3" str="fprintf"/>
    <tok fileIndex="0" linenr="150" column="10" str="("/>
    <tok fileIndex="0" linenr="150" column="11" str="stderr"/>
    <tok fileIndex="0" linenr="150" column="17" str=","/>
    <tok fileIndex="0" linenr="150" column="19" str="&quot;test518 FD_SETSIZE: %d\n&quot;"/>
    <tok fileIndex="0" linenr="150" column="45" str=","/>
    <tok fileIndex="0" linenr="150" column="47" str="FD_SETSIZE"/>
    <tok fileIndex="0" linenr="150" column="57" str=")"/>
    <tok fileIndex="0" linenr="150" column="58" str=";"/>
    <tok fileIndex="0" linenr="151" column="3" str="fprintf"/>
    <tok fileIndex="0" linenr="151" column="10" str="("/>
    <tok fileIndex="0" linenr="151" column="11" str="stderr"/>
    <tok fileIndex="0" linenr="151" column="17" str=","/>
    <tok fileIndex="0" linenr="151" column="19" str="&quot;test518 NUM_OPEN  : %d\n&quot;"/>
    <tok fileIndex="0" linenr="151" column="45" str=","/>
    <tok fileIndex="0" linenr="151" column="47" str="NUM_OPEN"/>
    <tok fileIndex="0" linenr="151" column="55" str=")"/>
    <tok fileIndex="0" linenr="151" column="56" str=";"/>
    <tok fileIndex="0" linenr="152" column="3" str="fprintf"/>
    <tok fileIndex="0" linenr="152" column="10" str="("/>
    <tok fileIndex="0" linenr="152" column="11" str="stderr"/>
    <tok fileIndex="0" linenr="152" column="17" str=","/>
    <tok fileIndex="0" linenr="152" column="19" str="&quot;test518 NUM_NEEDED: %d\n&quot;"/>
    <tok fileIndex="0" linenr="152" column="45" str=","/>
    <tok fileIndex="0" linenr="152" column="47" str="NUM_NEEDED"/>
    <tok fileIndex="0" linenr="152" column="57" str=")"/>
    <tok fileIndex="0" linenr="152" column="58" str=";"/>
    <tok fileIndex="0" linenr="154" column="3" str="/*x   * if soft limit and hard limit are different we ask thex   * system to raise soft limit all the way up to the hardx   * limit. Due to some other system limit the soft limitx   * might not be raised up to the hard limit. So from thisx   * point the resulting soft limit is our limit. Trying tox   * open more than soft limit file descriptors will fail.x   */"/>
    <tok fileIndex="0" linenr="163" column="3" str="if"/>
    <tok fileIndex="0" linenr="163" column="5" str="("/>
    <tok fileIndex="0" linenr="163" column="6" str="rl"/>
    <tok fileIndex="0" linenr="163" column="8" str="."/>
    <tok fileIndex="0" linenr="163" column="9" str="rlim_cur"/>
    <tok fileIndex="0" linenr="163" column="18" str="!="/>
    <tok fileIndex="0" linenr="163" column="21" str="rl"/>
    <tok fileIndex="0" linenr="163" column="23" str="."/>
    <tok fileIndex="0" linenr="163" column="24" str="rlim_max"/>
    <tok fileIndex="0" linenr="163" column="32" str=")"/>
    <tok fileIndex="0" linenr="163" column="34" str="{"/>
    <tok fileIndex="0" linenr="165" column="1" str="#"/>
    <tok fileIndex="0" linenr="165" column="2" str="ifdef"/>
    <tok fileIndex="0" linenr="165" column="8" str="OPEN_MAX"/>
    <tok fileIndex="0" linenr="166" column="5" str="if"/>
    <tok fileIndex="0" linenr="166" column="7" str="("/>
    <tok fileIndex="0" linenr="166" column="8" str="("/>
    <tok fileIndex="0" linenr="166" column="9" str="rl"/>
    <tok fileIndex="0" linenr="166" column="11" str="."/>
    <tok fileIndex="0" linenr="166" column="12" str="rlim_cur"/>
    <tok fileIndex="0" linenr="166" column="21" str="&gt;"/>
    <tok fileIndex="0" linenr="166" column="23" str="0"/>
    <tok fileIndex="0" linenr="166" column="24" str=")"/>
    <tok fileIndex="0" linenr="166" column="26" str="&amp;&amp;"/>
    <tok fileIndex="0" linenr="167" column="8" str="("/>
    <tok fileIndex="0" linenr="167" column="9" str="rl"/>
    <tok fileIndex="0" linenr="167" column="11" str="."/>
    <tok fileIndex="0" linenr="167" column="12" str="rlim_cur"/>
    <tok fileIndex="0" linenr="167" column="21" str="&lt;"/>
    <tok fileIndex="0" linenr="167" column="23" str="OPEN_MAX"/>
    <tok fileIndex="0" linenr="167" column="31" str=")"/>
    <tok fileIndex="0" linenr="167" column="32" str=")"/>
    <tok fileIndex="0" linenr="167" column="34" str="{"/>
    <tok fileIndex="0" linenr="168" column="7" str="fprintf"/>
    <tok fileIndex="0" linenr="168" column="14" str="("/>
    <tok fileIndex="0" linenr="168" column="15" str="stderr"/>
    <tok fileIndex="0" linenr="168" column="21" str=","/>
    <tok fileIndex="0" linenr="168" column="23" str="&quot;raising soft limit up to OPEN_MAX\n&quot;"/>
    <tok fileIndex="0" linenr="168" column="60" str=")"/>
    <tok fileIndex="0" linenr="168" column="61" str=";"/>
    <tok fileIndex="0" linenr="169" column="7" str="rl"/>
    <tok fileIndex="0" linenr="169" column="9" str="."/>
    <tok fileIndex="0" linenr="169" column="10" str="rlim_cur"/>
    <tok fileIndex="0" linenr="169" column="19" str="="/>
    <tok fileIndex="0" linenr="169" column="21" str="OPEN_MAX"/>
    <tok fileIndex="0" linenr="169" column="29" str=";"/>
    <tok fileIndex="0" linenr="170" column="7" str="if"/>
    <tok fileIndex="0" linenr="170" column="9" str="("/>
    <tok fileIndex="0" linenr="170" column="10" str="setrlimit"/>
    <tok fileIndex="0" linenr="170" column="19" str="("/>
    <tok fileIndex="0" linenr="170" column="20" str="RLIMIT_NOFILE"/>
    <tok fileIndex="0" linenr="170" column="33" str=","/>
    <tok fileIndex="0" linenr="170" column="35" str="&amp;"/>
    <tok fileIndex="0" linenr="170" column="36" str="rl"/>
    <tok fileIndex="0" linenr="170" column="38" str=")"/>
    <tok fileIndex="0" linenr="170" column="40" str="!="/>
    <tok fileIndex="0" linenr="170" column="43" str="0"/>
    <tok fileIndex="0" linenr="170" column="44" str=")"/>
    <tok fileIndex="0" linenr="170" column="46" str="{"/>
    <tok fileIndex="0" linenr="171" column="9" str="/* on failure don&apos;t abort just issue a warning */"/>
    <tok fileIndex="0" linenr="172" column="9" str="store_errmsg"/>
    <tok fileIndex="0" linenr="172" column="21" str="("/>
    <tok fileIndex="0" linenr="172" column="22" str="&quot;setrlimit() failed&quot;"/>
    <tok fileIndex="0" linenr="172" column="42" str=","/>
    <tok fileIndex="0" linenr="172" column="44" str="errno"/>
    <tok fileIndex="0" linenr="172" column="49" str=")"/>
    <tok fileIndex="0" linenr="172" column="50" str=";"/>
    <tok fileIndex="0" linenr="173" column="9" str="fprintf"/>
    <tok fileIndex="0" linenr="173" column="16" str="("/>
    <tok fileIndex="0" linenr="173" column="17" str="stderr"/>
    <tok fileIndex="0" linenr="173" column="23" str=","/>
    <tok fileIndex="0" linenr="173" column="25" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="173" column="31" str=","/>
    <tok fileIndex="0" linenr="173" column="33" str="msgbuff"/>
    <tok fileIndex="0" linenr="173" column="40" str=")"/>
    <tok fileIndex="0" linenr="173" column="41" str=";"/>
    <tok fileIndex="0" linenr="174" column="9" str="msgbuff"/>
    <tok fileIndex="0" linenr="174" column="16" str="["/>
    <tok fileIndex="0" linenr="174" column="17" str="0"/>
    <tok fileIndex="0" linenr="174" column="18" str="]"/>
    <tok fileIndex="0" linenr="174" column="20" str="="/>
    <tok fileIndex="0" linenr="174" column="22" str="&apos;\0&apos;"/>
    <tok fileIndex="0" linenr="174" column="26" str=";"/>
    <tok fileIndex="0" linenr="175" column="7" str="}"/>
    <tok fileIndex="0" linenr="176" column="5" str="}"/>
    <tok fileIndex="0" linenr="177" column="1" str="#"/>
    <tok fileIndex="0" linenr="177" column="2" str="endif"/>
    <tok fileIndex="0" linenr="179" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="179" column="12" str="("/>
    <tok fileIndex="0" linenr="179" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="179" column="19" str=","/>
    <tok fileIndex="0" linenr="179" column="21" str="&quot;raising soft limit up to hard limit\n&quot;"/>
    <tok fileIndex="0" linenr="179" column="60" str=")"/>
    <tok fileIndex="0" linenr="179" column="61" str=";"/>
    <tok fileIndex="0" linenr="180" column="5" str="rl"/>
    <tok fileIndex="0" linenr="180" column="7" str="."/>
    <tok fileIndex="0" linenr="180" column="8" str="rlim_cur"/>
    <tok fileIndex="0" linenr="180" column="17" str="="/>
    <tok fileIndex="0" linenr="180" column="19" str="rl"/>
    <tok fileIndex="0" linenr="180" column="21" str="."/>
    <tok fileIndex="0" linenr="180" column="22" str="rlim_max"/>
    <tok fileIndex="0" linenr="180" column="30" str=";"/>
    <tok fileIndex="0" linenr="181" column="5" str="if"/>
    <tok fileIndex="0" linenr="181" column="7" str="("/>
    <tok fileIndex="0" linenr="181" column="8" str="setrlimit"/>
    <tok fileIndex="0" linenr="181" column="17" str="("/>
    <tok fileIndex="0" linenr="181" column="18" str="RLIMIT_NOFILE"/>
    <tok fileIndex="0" linenr="181" column="31" str=","/>
    <tok fileIndex="0" linenr="181" column="33" str="&amp;"/>
    <tok fileIndex="0" linenr="181" column="34" str="rl"/>
    <tok fileIndex="0" linenr="181" column="36" str=")"/>
    <tok fileIndex="0" linenr="181" column="38" str="!="/>
    <tok fileIndex="0" linenr="181" column="41" str="0"/>
    <tok fileIndex="0" linenr="181" column="42" str=")"/>
    <tok fileIndex="0" linenr="181" column="44" str="{"/>
    <tok fileIndex="0" linenr="182" column="7" str="/* on failure don&apos;t abort just issue a warning */"/>
    <tok fileIndex="0" linenr="183" column="7" str="store_errmsg"/>
    <tok fileIndex="0" linenr="183" column="19" str="("/>
    <tok fileIndex="0" linenr="183" column="20" str="&quot;setrlimit() failed&quot;"/>
    <tok fileIndex="0" linenr="183" column="40" str=","/>
    <tok fileIndex="0" linenr="183" column="42" str="errno"/>
    <tok fileIndex="0" linenr="183" column="47" str=")"/>
    <tok fileIndex="0" linenr="183" column="48" str=";"/>
    <tok fileIndex="0" linenr="184" column="7" str="fprintf"/>
    <tok fileIndex="0" linenr="184" column="14" str="("/>
    <tok fileIndex="0" linenr="184" column="15" str="stderr"/>
    <tok fileIndex="0" linenr="184" column="21" str=","/>
    <tok fileIndex="0" linenr="184" column="23" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="184" column="29" str=","/>
    <tok fileIndex="0" linenr="184" column="31" str="msgbuff"/>
    <tok fileIndex="0" linenr="184" column="38" str=")"/>
    <tok fileIndex="0" linenr="184" column="39" str=";"/>
    <tok fileIndex="0" linenr="185" column="7" str="msgbuff"/>
    <tok fileIndex="0" linenr="185" column="14" str="["/>
    <tok fileIndex="0" linenr="185" column="15" str="0"/>
    <tok fileIndex="0" linenr="185" column="16" str="]"/>
    <tok fileIndex="0" linenr="185" column="18" str="="/>
    <tok fileIndex="0" linenr="185" column="20" str="&apos;\0&apos;"/>
    <tok fileIndex="0" linenr="185" column="24" str=";"/>
    <tok fileIndex="0" linenr="186" column="5" str="}"/>
    <tok fileIndex="0" linenr="188" column="5" str="/* get current open file limits */"/>
    <tok fileIndex="0" linenr="190" column="5" str="if"/>
    <tok fileIndex="0" linenr="190" column="7" str="("/>
    <tok fileIndex="0" linenr="190" column="8" str="getrlimit"/>
    <tok fileIndex="0" linenr="190" column="17" str="("/>
    <tok fileIndex="0" linenr="190" column="18" str="RLIMIT_NOFILE"/>
    <tok fileIndex="0" linenr="190" column="31" str=","/>
    <tok fileIndex="0" linenr="190" column="33" str="&amp;"/>
    <tok fileIndex="0" linenr="190" column="34" str="rl"/>
    <tok fileIndex="0" linenr="190" column="36" str=")"/>
    <tok fileIndex="0" linenr="190" column="38" str="!="/>
    <tok fileIndex="0" linenr="190" column="41" str="0"/>
    <tok fileIndex="0" linenr="190" column="42" str=")"/>
    <tok fileIndex="0" linenr="190" column="44" str="{"/>
    <tok fileIndex="0" linenr="191" column="7" str="store_errmsg"/>
    <tok fileIndex="0" linenr="191" column="19" str="("/>
    <tok fileIndex="0" linenr="191" column="20" str="&quot;getrlimit() failed&quot;"/>
    <tok fileIndex="0" linenr="191" column="40" str=","/>
    <tok fileIndex="0" linenr="191" column="42" str="errno"/>
    <tok fileIndex="0" linenr="191" column="47" str=")"/>
    <tok fileIndex="0" linenr="191" column="48" str=";"/>
    <tok fileIndex="0" linenr="192" column="7" str="fprintf"/>
    <tok fileIndex="0" linenr="192" column="14" str="("/>
    <tok fileIndex="0" linenr="192" column="15" str="stderr"/>
    <tok fileIndex="0" linenr="192" column="21" str=","/>
    <tok fileIndex="0" linenr="192" column="23" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="192" column="29" str=","/>
    <tok fileIndex="0" linenr="192" column="31" str="msgbuff"/>
    <tok fileIndex="0" linenr="192" column="38" str=")"/>
    <tok fileIndex="0" linenr="192" column="39" str=";"/>
    <tok fileIndex="0" linenr="193" column="7" str="return"/>
    <tok fileIndex="0" linenr="193" column="14" str="-"/>
    <tok fileIndex="0" linenr="193" column="15" str="3"/>
    <tok fileIndex="0" linenr="193" column="16" str=";"/>
    <tok fileIndex="0" linenr="194" column="5" str="}"/>
    <tok fileIndex="0" linenr="196" column="5" str="/* show current open file limits */"/>
    <tok fileIndex="0" linenr="198" column="5" str="rlim2str"/>
    <tok fileIndex="0" linenr="198" column="13" str="("/>
    <tok fileIndex="0" linenr="198" column="14" str="strbuff"/>
    <tok fileIndex="0" linenr="198" column="21" str=","/>
    <tok fileIndex="0" linenr="198" column="23" str="sizeof"/>
    <tok fileIndex="0" linenr="198" column="29" str="("/>
    <tok fileIndex="0" linenr="198" column="30" str="strbuff"/>
    <tok fileIndex="0" linenr="198" column="37" str=")"/>
    <tok fileIndex="0" linenr="198" column="38" str=","/>
    <tok fileIndex="0" linenr="198" column="40" str="rl"/>
    <tok fileIndex="0" linenr="198" column="42" str="."/>
    <tok fileIndex="0" linenr="198" column="43" str="rlim_cur"/>
    <tok fileIndex="0" linenr="198" column="51" str=")"/>
    <tok fileIndex="0" linenr="198" column="52" str=";"/>
    <tok fileIndex="0" linenr="199" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="199" column="12" str="("/>
    <tok fileIndex="0" linenr="199" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="199" column="19" str=","/>
    <tok fileIndex="0" linenr="199" column="21" str="&quot;current soft limit: %s\n&quot;"/>
    <tok fileIndex="0" linenr="199" column="47" str=","/>
    <tok fileIndex="0" linenr="199" column="49" str="strbuff"/>
    <tok fileIndex="0" linenr="199" column="56" str=")"/>
    <tok fileIndex="0" linenr="199" column="57" str=";"/>
    <tok fileIndex="0" linenr="201" column="5" str="rlim2str"/>
    <tok fileIndex="0" linenr="201" column="13" str="("/>
    <tok fileIndex="0" linenr="201" column="14" str="strbuff"/>
    <tok fileIndex="0" linenr="201" column="21" str=","/>
    <tok fileIndex="0" linenr="201" column="23" str="sizeof"/>
    <tok fileIndex="0" linenr="201" column="29" str="("/>
    <tok fileIndex="0" linenr="201" column="30" str="strbuff"/>
    <tok fileIndex="0" linenr="201" column="37" str=")"/>
    <tok fileIndex="0" linenr="201" column="38" str=","/>
    <tok fileIndex="0" linenr="201" column="40" str="rl"/>
    <tok fileIndex="0" linenr="201" column="42" str="."/>
    <tok fileIndex="0" linenr="201" column="43" str="rlim_max"/>
    <tok fileIndex="0" linenr="201" column="51" str=")"/>
    <tok fileIndex="0" linenr="201" column="52" str=";"/>
    <tok fileIndex="0" linenr="202" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="202" column="12" str="("/>
    <tok fileIndex="0" linenr="202" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="202" column="19" str=","/>
    <tok fileIndex="0" linenr="202" column="21" str="&quot;current hard limit: %s\n&quot;"/>
    <tok fileIndex="0" linenr="202" column="47" str=","/>
    <tok fileIndex="0" linenr="202" column="49" str="strbuff"/>
    <tok fileIndex="0" linenr="202" column="56" str=")"/>
    <tok fileIndex="0" linenr="202" column="57" str=";"/>
    <tok fileIndex="0" linenr="204" column="3" str="}"/>
    <tok fileIndex="0" linenr="204" column="5" str="/* (rl.rlim_cur != rl.rlim_max) */"/>
    <tok fileIndex="0" linenr="206" column="3" str="/*x   * test 518 is all about testing libcurl functionalityx   * when more than FD_SETSIZE file descriptors are open.x   * This means that if for any reason we are not able tox   * open more than FD_SETSIZE file descriptors then testx   * 518 should not be run.x   */"/>
    <tok fileIndex="0" linenr="214" column="3" str="/*x   * verify that soft limit is higher than NUM_NEEDED,x   * which is the number of file descriptors we wouldx   * try to open plus SAFETY_MARGIN to not exhaust thex   * file descriptor poolx   */"/>
    <tok fileIndex="0" linenr="221" column="3" str="num_open"/>
    <tok fileIndex="0" linenr="221" column="11" str="."/>
    <tok fileIndex="0" linenr="221" column="12" str="rlim_cur"/>
    <tok fileIndex="0" linenr="221" column="21" str="="/>
    <tok fileIndex="0" linenr="221" column="23" str="NUM_NEEDED"/>
    <tok fileIndex="0" linenr="221" column="33" str=";"/>
    <tok fileIndex="0" linenr="223" column="3" str="if"/>
    <tok fileIndex="0" linenr="223" column="5" str="("/>
    <tok fileIndex="0" linenr="223" column="6" str="("/>
    <tok fileIndex="0" linenr="223" column="7" str="rl"/>
    <tok fileIndex="0" linenr="223" column="9" str="."/>
    <tok fileIndex="0" linenr="223" column="10" str="rlim_cur"/>
    <tok fileIndex="0" linenr="223" column="19" str="&gt;"/>
    <tok fileIndex="0" linenr="223" column="21" str="0"/>
    <tok fileIndex="0" linenr="223" column="22" str=")"/>
    <tok fileIndex="0" linenr="223" column="24" str="&amp;&amp;"/>
    <tok fileIndex="0" linenr="224" column="1" str="#"/>
    <tok fileIndex="0" linenr="224" column="2" str="ifdef"/>
    <tok fileIndex="0" linenr="224" column="8" str="RLIM_INFINITY"/>
    <tok fileIndex="0" linenr="225" column="6" str="("/>
    <tok fileIndex="0" linenr="225" column="7" str="rl"/>
    <tok fileIndex="0" linenr="225" column="9" str="."/>
    <tok fileIndex="0" linenr="225" column="10" str="rlim_cur"/>
    <tok fileIndex="0" linenr="225" column="19" str="!="/>
    <tok fileIndex="0" linenr="225" column="22" str="RLIM_INFINITY"/>
    <tok fileIndex="0" linenr="225" column="35" str=")"/>
    <tok fileIndex="0" linenr="225" column="37" str="&amp;&amp;"/>
    <tok fileIndex="0" linenr="226" column="1" str="#"/>
    <tok fileIndex="0" linenr="226" column="2" str="endif"/>
    <tok fileIndex="0" linenr="227" column="6" str="("/>
    <tok fileIndex="0" linenr="227" column="7" str="rl"/>
    <tok fileIndex="0" linenr="227" column="9" str="."/>
    <tok fileIndex="0" linenr="227" column="10" str="rlim_cur"/>
    <tok fileIndex="0" linenr="227" column="19" str="&lt;="/>
    <tok fileIndex="0" linenr="227" column="22" str="num_open"/>
    <tok fileIndex="0" linenr="227" column="30" str="."/>
    <tok fileIndex="0" linenr="227" column="31" str="rlim_cur"/>
    <tok fileIndex="0" linenr="227" column="39" str=")"/>
    <tok fileIndex="0" linenr="227" column="40" str=")"/>
    <tok fileIndex="0" linenr="227" column="42" str="{"/>
    <tok fileIndex="0" linenr="228" column="5" str="rlim2str"/>
    <tok fileIndex="0" linenr="228" column="13" str="("/>
    <tok fileIndex="0" linenr="228" column="14" str="strbuff2"/>
    <tok fileIndex="0" linenr="228" column="22" str=","/>
    <tok fileIndex="0" linenr="228" column="24" str="sizeof"/>
    <tok fileIndex="0" linenr="228" column="30" str="("/>
    <tok fileIndex="0" linenr="228" column="31" str="strbuff2"/>
    <tok fileIndex="0" linenr="228" column="39" str=")"/>
    <tok fileIndex="0" linenr="228" column="40" str=","/>
    <tok fileIndex="0" linenr="228" column="42" str="rl"/>
    <tok fileIndex="0" linenr="228" column="44" str="."/>
    <tok fileIndex="0" linenr="228" column="45" str="rlim_cur"/>
    <tok fileIndex="0" linenr="228" column="53" str=")"/>
    <tok fileIndex="0" linenr="228" column="54" str=";"/>
    <tok fileIndex="0" linenr="229" column="5" str="rlim2str"/>
    <tok fileIndex="0" linenr="229" column="13" str="("/>
    <tok fileIndex="0" linenr="229" column="14" str="strbuff1"/>
    <tok fileIndex="0" linenr="229" column="22" str=","/>
    <tok fileIndex="0" linenr="229" column="24" str="sizeof"/>
    <tok fileIndex="0" linenr="229" column="30" str="("/>
    <tok fileIndex="0" linenr="229" column="31" str="strbuff1"/>
    <tok fileIndex="0" linenr="229" column="39" str=")"/>
    <tok fileIndex="0" linenr="229" column="40" str=","/>
    <tok fileIndex="0" linenr="229" column="42" str="num_open"/>
    <tok fileIndex="0" linenr="229" column="50" str="."/>
    <tok fileIndex="0" linenr="229" column="51" str="rlim_cur"/>
    <tok fileIndex="0" linenr="229" column="59" str=")"/>
    <tok fileIndex="0" linenr="229" column="60" str=";"/>
    <tok fileIndex="0" linenr="230" column="5" str="msnprintf"/>
    <tok fileIndex="0" linenr="230" column="14" str="("/>
    <tok fileIndex="0" linenr="230" column="15" str="strbuff"/>
    <tok fileIndex="0" linenr="230" column="22" str=","/>
    <tok fileIndex="0" linenr="230" column="24" str="sizeof"/>
    <tok fileIndex="0" linenr="230" column="30" str="("/>
    <tok fileIndex="0" linenr="230" column="31" str="strbuff"/>
    <tok fileIndex="0" linenr="230" column="38" str=")"/>
    <tok fileIndex="0" linenr="230" column="39" str=","/>
    <tok fileIndex="0" linenr="230" column="41" str="&quot;fds needed %s &gt; system limit %s&quot;"/>
    <tok fileIndex="0" linenr="230" column="74" str=","/>
    <tok fileIndex="0" linenr="231" column="15" str="strbuff1"/>
    <tok fileIndex="0" linenr="231" column="23" str=","/>
    <tok fileIndex="0" linenr="231" column="25" str="strbuff2"/>
    <tok fileIndex="0" linenr="231" column="33" str=")"/>
    <tok fileIndex="0" linenr="231" column="34" str=";"/>
    <tok fileIndex="0" linenr="232" column="5" str="store_errmsg"/>
    <tok fileIndex="0" linenr="232" column="17" str="("/>
    <tok fileIndex="0" linenr="232" column="18" str="strbuff"/>
    <tok fileIndex="0" linenr="232" column="25" str=","/>
    <tok fileIndex="0" linenr="232" column="27" str="0"/>
    <tok fileIndex="0" linenr="232" column="28" str=")"/>
    <tok fileIndex="0" linenr="232" column="29" str=";"/>
    <tok fileIndex="0" linenr="233" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="233" column="12" str="("/>
    <tok fileIndex="0" linenr="233" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="233" column="19" str=","/>
    <tok fileIndex="0" linenr="233" column="21" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="233" column="27" str=","/>
    <tok fileIndex="0" linenr="233" column="29" str="msgbuff"/>
    <tok fileIndex="0" linenr="233" column="36" str=")"/>
    <tok fileIndex="0" linenr="233" column="37" str=";"/>
    <tok fileIndex="0" linenr="234" column="5" str="return"/>
    <tok fileIndex="0" linenr="234" column="12" str="-"/>
    <tok fileIndex="0" linenr="234" column="13" str="4"/>
    <tok fileIndex="0" linenr="234" column="14" str=";"/>
    <tok fileIndex="0" linenr="235" column="3" str="}"/>
    <tok fileIndex="0" linenr="237" column="3" str="/*x   * reserve a chunk of memory before opening file descriptors tox   * avoid a low memory condition once the file descriptors arex   * open. System conditions that could make the test fail shouldx   * be addressed in the precheck phase. This chunk of memory shallx   * be always free()ed before exiting the test_rlimit() function sox   * that it becomes available to the test.x   */"/>
    <tok fileIndex="0" linenr="246" column="3" str="for"/>
    <tok fileIndex="0" linenr="246" column="6" str="("/>
    <tok fileIndex="0" linenr="246" column="7" str="nitems"/>
    <tok fileIndex="0" linenr="246" column="14" str="="/>
    <tok fileIndex="0" linenr="246" column="16" str="i"/>
    <tok fileIndex="0" linenr="246" column="18" str="="/>
    <tok fileIndex="0" linenr="246" column="20" str="1"/>
    <tok fileIndex="0" linenr="246" column="21" str=";"/>
    <tok fileIndex="0" linenr="246" column="23" str="nitems"/>
    <tok fileIndex="0" linenr="246" column="30" str="&lt;="/>
    <tok fileIndex="0" linenr="246" column="33" str="i"/>
    <tok fileIndex="0" linenr="246" column="34" str=";"/>
    <tok fileIndex="0" linenr="246" column="36" str="i"/>
    <tok fileIndex="0" linenr="246" column="38" str="*="/>
    <tok fileIndex="0" linenr="246" column="41" str="2"/>
    <tok fileIndex="0" linenr="246" column="42" str=")"/>
    <tok fileIndex="0" linenr="247" column="5" str="nitems"/>
    <tok fileIndex="0" linenr="247" column="12" str="="/>
    <tok fileIndex="0" linenr="247" column="14" str="i"/>
    <tok fileIndex="0" linenr="247" column="15" str=";"/>
    <tok fileIndex="0" linenr="248" column="3" str="if"/>
    <tok fileIndex="0" linenr="248" column="5" str="("/>
    <tok fileIndex="0" linenr="248" column="6" str="nitems"/>
    <tok fileIndex="0" linenr="248" column="13" str="&gt;"/>
    <tok fileIndex="0" linenr="248" column="15" str="0x7fff"/>
    <tok fileIndex="0" linenr="248" column="21" str=")"/>
    <tok fileIndex="0" linenr="249" column="5" str="nitems"/>
    <tok fileIndex="0" linenr="249" column="12" str="="/>
    <tok fileIndex="0" linenr="249" column="14" str="0x40000"/>
    <tok fileIndex="0" linenr="249" column="21" str=";"/>
    <tok fileIndex="0" linenr="250" column="3" str="do"/>
    <tok fileIndex="0" linenr="250" column="6" str="{"/>
    <tok fileIndex="0" linenr="251" column="5" str="num_open"/>
    <tok fileIndex="0" linenr="251" column="13" str="."/>
    <tok fileIndex="0" linenr="251" column="14" str="rlim_max"/>
    <tok fileIndex="0" linenr="251" column="23" str="="/>
    <tok fileIndex="0" linenr="251" column="25" str="sizeof"/>
    <tok fileIndex="0" linenr="251" column="31" str="("/>
    <tok fileIndex="0" linenr="251" column="32" str="*"/>
    <tok fileIndex="0" linenr="251" column="33" str="memchunk"/>
    <tok fileIndex="0" linenr="251" column="41" str=")"/>
    <tok fileIndex="0" linenr="251" column="43" str="*"/>
    <tok fileIndex="0" linenr="251" column="45" str="nitems"/>
    <tok fileIndex="0" linenr="251" column="51" str=";"/>
    <tok fileIndex="0" linenr="252" column="5" str="rlim2str"/>
    <tok fileIndex="0" linenr="252" column="13" str="("/>
    <tok fileIndex="0" linenr="252" column="14" str="strbuff"/>
    <tok fileIndex="0" linenr="252" column="21" str=","/>
    <tok fileIndex="0" linenr="252" column="23" str="sizeof"/>
    <tok fileIndex="0" linenr="252" column="29" str="("/>
    <tok fileIndex="0" linenr="252" column="30" str="strbuff"/>
    <tok fileIndex="0" linenr="252" column="37" str=")"/>
    <tok fileIndex="0" linenr="252" column="38" str=","/>
    <tok fileIndex="0" linenr="252" column="40" str="num_open"/>
    <tok fileIndex="0" linenr="252" column="48" str="."/>
    <tok fileIndex="0" linenr="252" column="49" str="rlim_max"/>
    <tok fileIndex="0" linenr="252" column="57" str=")"/>
    <tok fileIndex="0" linenr="252" column="58" str=";"/>
    <tok fileIndex="0" linenr="253" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="253" column="12" str="("/>
    <tok fileIndex="0" linenr="253" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="253" column="19" str=","/>
    <tok fileIndex="0" linenr="253" column="21" str="&quot;allocating memchunk %s byte array\n&quot;"/>
    <tok fileIndex="0" linenr="253" column="58" str=","/>
    <tok fileIndex="0" linenr="253" column="60" str="strbuff"/>
    <tok fileIndex="0" linenr="253" column="67" str=")"/>
    <tok fileIndex="0" linenr="253" column="68" str=";"/>
    <tok fileIndex="0" linenr="254" column="5" str="memchunk"/>
    <tok fileIndex="0" linenr="254" column="14" str="="/>
    <tok fileIndex="0" linenr="254" column="16" str="malloc"/>
    <tok fileIndex="0" linenr="254" column="22" str="("/>
    <tok fileIndex="0" linenr="254" column="23" str="sizeof"/>
    <tok fileIndex="0" linenr="254" column="29" str="("/>
    <tok fileIndex="0" linenr="254" column="30" str="*"/>
    <tok fileIndex="0" linenr="254" column="31" str="memchunk"/>
    <tok fileIndex="0" linenr="254" column="39" str=")"/>
    <tok fileIndex="0" linenr="254" column="41" str="*"/>
    <tok fileIndex="0" linenr="254" column="43" str="("/>
    <tok fileIndex="0" linenr="254" column="44" str="size_t"/>
    <tok fileIndex="0" linenr="254" column="50" str=")"/>
    <tok fileIndex="0" linenr="254" column="51" str="nitems"/>
    <tok fileIndex="0" linenr="254" column="57" str=")"/>
    <tok fileIndex="0" linenr="254" column="58" str=";"/>
    <tok fileIndex="0" linenr="255" column="5" str="if"/>
    <tok fileIndex="0" linenr="255" column="7" str="("/>
    <tok fileIndex="0" linenr="255" column="8" str="!"/>
    <tok fileIndex="0" linenr="255" column="9" str="memchunk"/>
    <tok fileIndex="0" linenr="255" column="17" str=")"/>
    <tok fileIndex="0" linenr="255" column="19" str="{"/>
    <tok fileIndex="0" linenr="256" column="7" str="fprintf"/>
    <tok fileIndex="0" linenr="256" column="14" str="("/>
    <tok fileIndex="0" linenr="256" column="15" str="stderr"/>
    <tok fileIndex="0" linenr="256" column="21" str=","/>
    <tok fileIndex="0" linenr="256" column="23" str="&quot;memchunk, malloc() failed\n&quot;"/>
    <tok fileIndex="0" linenr="256" column="52" str=")"/>
    <tok fileIndex="0" linenr="256" column="53" str=";"/>
    <tok fileIndex="0" linenr="257" column="7" str="nitems"/>
    <tok fileIndex="0" linenr="257" column="14" str="/="/>
    <tok fileIndex="0" linenr="257" column="17" str="2"/>
    <tok fileIndex="0" linenr="257" column="18" str=";"/>
    <tok fileIndex="0" linenr="258" column="5" str="}"/>
    <tok fileIndex="0" linenr="259" column="3" str="}"/>
    <tok fileIndex="0" linenr="259" column="5" str="while"/>
    <tok fileIndex="0" linenr="259" column="10" str="("/>
    <tok fileIndex="0" linenr="259" column="11" str="nitems"/>
    <tok fileIndex="0" linenr="259" column="18" str="&amp;&amp;"/>
    <tok fileIndex="0" linenr="259" column="21" str="!"/>
    <tok fileIndex="0" linenr="259" column="22" str="memchunk"/>
    <tok fileIndex="0" linenr="259" column="30" str=")"/>
    <tok fileIndex="0" linenr="259" column="31" str=";"/>
    <tok fileIndex="0" linenr="260" column="3" str="if"/>
    <tok fileIndex="0" linenr="260" column="5" str="("/>
    <tok fileIndex="0" linenr="260" column="6" str="!"/>
    <tok fileIndex="0" linenr="260" column="7" str="memchunk"/>
    <tok fileIndex="0" linenr="260" column="15" str=")"/>
    <tok fileIndex="0" linenr="260" column="17" str="{"/>
    <tok fileIndex="0" linenr="261" column="5" str="store_errmsg"/>
    <tok fileIndex="0" linenr="261" column="17" str="("/>
    <tok fileIndex="0" linenr="261" column="18" str="&quot;memchunk, malloc() failed&quot;"/>
    <tok fileIndex="0" linenr="261" column="45" str=","/>
    <tok fileIndex="0" linenr="261" column="47" str="errno"/>
    <tok fileIndex="0" linenr="261" column="52" str=")"/>
    <tok fileIndex="0" linenr="261" column="53" str=";"/>
    <tok fileIndex="0" linenr="262" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="262" column="12" str="("/>
    <tok fileIndex="0" linenr="262" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="262" column="19" str=","/>
    <tok fileIndex="0" linenr="262" column="21" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="262" column="27" str=","/>
    <tok fileIndex="0" linenr="262" column="29" str="msgbuff"/>
    <tok fileIndex="0" linenr="262" column="36" str=")"/>
    <tok fileIndex="0" linenr="262" column="37" str=";"/>
    <tok fileIndex="0" linenr="263" column="5" str="return"/>
    <tok fileIndex="0" linenr="263" column="12" str="-"/>
    <tok fileIndex="0" linenr="263" column="13" str="5"/>
    <tok fileIndex="0" linenr="263" column="14" str=";"/>
    <tok fileIndex="0" linenr="264" column="3" str="}"/>
    <tok fileIndex="0" linenr="266" column="3" str="/* initialize it to fight lazy allocation */"/>
    <tok fileIndex="0" linenr="268" column="3" str="fprintf"/>
    <tok fileIndex="0" linenr="268" column="10" str="("/>
    <tok fileIndex="0" linenr="268" column="11" str="stderr"/>
    <tok fileIndex="0" linenr="268" column="17" str=","/>
    <tok fileIndex="0" linenr="268" column="19" str="&quot;initializing memchunk array\n&quot;"/>
    <tok fileIndex="0" linenr="268" column="50" str=")"/>
    <tok fileIndex="0" linenr="268" column="51" str=";"/>
    <tok fileIndex="0" linenr="270" column="3" str="for"/>
    <tok fileIndex="0" linenr="270" column="6" str="("/>
    <tok fileIndex="0" linenr="270" column="7" str="i"/>
    <tok fileIndex="0" linenr="270" column="9" str="="/>
    <tok fileIndex="0" linenr="270" column="11" str="0"/>
    <tok fileIndex="0" linenr="270" column="12" str=";"/>
    <tok fileIndex="0" linenr="270" column="14" str="i"/>
    <tok fileIndex="0" linenr="270" column="16" str="&lt;"/>
    <tok fileIndex="0" linenr="270" column="18" str="nitems"/>
    <tok fileIndex="0" linenr="270" column="24" str=";"/>
    <tok fileIndex="0" linenr="270" column="26" str="i"/>
    <tok fileIndex="0" linenr="270" column="27" str="++"/>
    <tok fileIndex="0" linenr="270" column="29" str=")"/>
    <tok fileIndex="0" linenr="271" column="5" str="memchunk"/>
    <tok fileIndex="0" linenr="271" column="13" str="["/>
    <tok fileIndex="0" linenr="271" column="14" str="i"/>
    <tok fileIndex="0" linenr="271" column="15" str="]"/>
    <tok fileIndex="0" linenr="271" column="17" str="="/>
    <tok fileIndex="0" linenr="271" column="19" str="-"/>
    <tok fileIndex="0" linenr="271" column="20" str="1"/>
    <tok fileIndex="0" linenr="271" column="21" str=";"/>
    <tok fileIndex="0" linenr="273" column="3" str="/* set the number of file descriptors we will try to open */"/>
    <tok fileIndex="0" linenr="275" column="3" str="num_open"/>
    <tok fileIndex="0" linenr="275" column="11" str="."/>
    <tok fileIndex="0" linenr="275" column="12" str="rlim_max"/>
    <tok fileIndex="0" linenr="275" column="21" str="="/>
    <tok fileIndex="0" linenr="275" column="23" str="NUM_OPEN"/>
    <tok fileIndex="0" linenr="275" column="31" str=";"/>
    <tok fileIndex="0" linenr="277" column="3" str="/* verify that we won&apos;t overflow size_t in malloc() */"/>
    <tok fileIndex="0" linenr="279" column="3" str="if"/>
    <tok fileIndex="0" linenr="279" column="5" str="("/>
    <tok fileIndex="0" linenr="279" column="6" str="("/>
    <tok fileIndex="0" linenr="279" column="7" str="size_t"/>
    <tok fileIndex="0" linenr="279" column="13" str=")"/>
    <tok fileIndex="0" linenr="279" column="14" str="("/>
    <tok fileIndex="0" linenr="279" column="15" str="num_open"/>
    <tok fileIndex="0" linenr="279" column="23" str="."/>
    <tok fileIndex="0" linenr="279" column="24" str="rlim_max"/>
    <tok fileIndex="0" linenr="279" column="32" str=")"/>
    <tok fileIndex="0" linenr="279" column="34" str="&gt;"/>
    <tok fileIndex="0" linenr="279" column="36" str="("/>
    <tok fileIndex="0" linenr="279" column="37" str="("/>
    <tok fileIndex="0" linenr="279" column="38" str="size_t"/>
    <tok fileIndex="0" linenr="279" column="44" str=")"/>
    <tok fileIndex="0" linenr="279" column="45" str="-"/>
    <tok fileIndex="0" linenr="279" column="46" str="1"/>
    <tok fileIndex="0" linenr="279" column="47" str=")"/>
    <tok fileIndex="0" linenr="279" column="49" str="/"/>
    <tok fileIndex="0" linenr="279" column="51" str="sizeof"/>
    <tok fileIndex="0" linenr="279" column="57" str="("/>
    <tok fileIndex="0" linenr="279" column="58" str="*"/>
    <tok fileIndex="0" linenr="279" column="59" str="testfd"/>
    <tok fileIndex="0" linenr="279" column="65" str=")"/>
    <tok fileIndex="0" linenr="279" column="66" str=")"/>
    <tok fileIndex="0" linenr="279" column="68" str="{"/>
    <tok fileIndex="0" linenr="280" column="5" str="rlim2str"/>
    <tok fileIndex="0" linenr="280" column="13" str="("/>
    <tok fileIndex="0" linenr="280" column="14" str="strbuff1"/>
    <tok fileIndex="0" linenr="280" column="22" str=","/>
    <tok fileIndex="0" linenr="280" column="24" str="sizeof"/>
    <tok fileIndex="0" linenr="280" column="30" str="("/>
    <tok fileIndex="0" linenr="280" column="31" str="strbuff1"/>
    <tok fileIndex="0" linenr="280" column="39" str=")"/>
    <tok fileIndex="0" linenr="280" column="40" str=","/>
    <tok fileIndex="0" linenr="280" column="42" str="num_open"/>
    <tok fileIndex="0" linenr="280" column="50" str="."/>
    <tok fileIndex="0" linenr="280" column="51" str="rlim_max"/>
    <tok fileIndex="0" linenr="280" column="59" str=")"/>
    <tok fileIndex="0" linenr="280" column="60" str=";"/>
    <tok fileIndex="0" linenr="281" column="5" str="msnprintf"/>
    <tok fileIndex="0" linenr="281" column="14" str="("/>
    <tok fileIndex="0" linenr="281" column="15" str="strbuff"/>
    <tok fileIndex="0" linenr="281" column="22" str=","/>
    <tok fileIndex="0" linenr="281" column="24" str="sizeof"/>
    <tok fileIndex="0" linenr="281" column="30" str="("/>
    <tok fileIndex="0" linenr="281" column="31" str="strbuff"/>
    <tok fileIndex="0" linenr="281" column="38" str=")"/>
    <tok fileIndex="0" linenr="281" column="39" str=","/>
    <tok fileIndex="0" linenr="281" column="41" str="&quot;unable to allocate an array for %s &quot;"/>
    <tok fileIndex="0" linenr="282" column="15" str="&quot;file descriptors, would overflow size_t&quot;"/>
    <tok fileIndex="0" linenr="282" column="56" str=","/>
    <tok fileIndex="0" linenr="282" column="58" str="strbuff1"/>
    <tok fileIndex="0" linenr="282" column="66" str=")"/>
    <tok fileIndex="0" linenr="282" column="67" str=";"/>
    <tok fileIndex="0" linenr="283" column="5" str="store_errmsg"/>
    <tok fileIndex="0" linenr="283" column="17" str="("/>
    <tok fileIndex="0" linenr="283" column="18" str="strbuff"/>
    <tok fileIndex="0" linenr="283" column="25" str=","/>
    <tok fileIndex="0" linenr="283" column="27" str="0"/>
    <tok fileIndex="0" linenr="283" column="28" str=")"/>
    <tok fileIndex="0" linenr="283" column="29" str=";"/>
    <tok fileIndex="0" linenr="284" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="284" column="12" str="("/>
    <tok fileIndex="0" linenr="284" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="284" column="19" str=","/>
    <tok fileIndex="0" linenr="284" column="21" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="284" column="27" str=","/>
    <tok fileIndex="0" linenr="284" column="29" str="msgbuff"/>
    <tok fileIndex="0" linenr="284" column="36" str=")"/>
    <tok fileIndex="0" linenr="284" column="37" str=";"/>
    <tok fileIndex="0" linenr="285" column="5" str="free"/>
    <tok fileIndex="0" linenr="285" column="9" str="("/>
    <tok fileIndex="0" linenr="285" column="10" str="memchunk"/>
    <tok fileIndex="0" linenr="285" column="18" str=")"/>
    <tok fileIndex="0" linenr="285" column="19" str=";"/>
    <tok fileIndex="0" linenr="286" column="5" str="return"/>
    <tok fileIndex="0" linenr="286" column="12" str="-"/>
    <tok fileIndex="0" linenr="286" column="13" str="6"/>
    <tok fileIndex="0" linenr="286" column="14" str=";"/>
    <tok fileIndex="0" linenr="287" column="3" str="}"/>
    <tok fileIndex="0" linenr="289" column="3" str="/* allocate array for file descriptors */"/>
    <tok fileIndex="0" linenr="291" column="3" str="rlim2str"/>
    <tok fileIndex="0" linenr="291" column="11" str="("/>
    <tok fileIndex="0" linenr="291" column="12" str="strbuff"/>
    <tok fileIndex="0" linenr="291" column="19" str=","/>
    <tok fileIndex="0" linenr="291" column="21" str="sizeof"/>
    <tok fileIndex="0" linenr="291" column="27" str="("/>
    <tok fileIndex="0" linenr="291" column="28" str="strbuff"/>
    <tok fileIndex="0" linenr="291" column="35" str=")"/>
    <tok fileIndex="0" linenr="291" column="36" str=","/>
    <tok fileIndex="0" linenr="291" column="38" str="num_open"/>
    <tok fileIndex="0" linenr="291" column="46" str="."/>
    <tok fileIndex="0" linenr="291" column="47" str="rlim_max"/>
    <tok fileIndex="0" linenr="291" column="55" str=")"/>
    <tok fileIndex="0" linenr="291" column="56" str=";"/>
    <tok fileIndex="0" linenr="292" column="3" str="fprintf"/>
    <tok fileIndex="0" linenr="292" column="10" str="("/>
    <tok fileIndex="0" linenr="292" column="11" str="stderr"/>
    <tok fileIndex="0" linenr="292" column="17" str=","/>
    <tok fileIndex="0" linenr="292" column="19" str="&quot;allocating array for %s file descriptors\n&quot;"/>
    <tok fileIndex="0" linenr="292" column="63" str=","/>
    <tok fileIndex="0" linenr="292" column="65" str="strbuff"/>
    <tok fileIndex="0" linenr="292" column="72" str=")"/>
    <tok fileIndex="0" linenr="292" column="73" str=";"/>
    <tok fileIndex="0" linenr="294" column="3" str="testfd"/>
    <tok fileIndex="0" linenr="294" column="10" str="="/>
    <tok fileIndex="0" linenr="294" column="12" str="malloc"/>
    <tok fileIndex="0" linenr="294" column="18" str="("/>
    <tok fileIndex="0" linenr="294" column="19" str="sizeof"/>
    <tok fileIndex="0" linenr="294" column="25" str="("/>
    <tok fileIndex="0" linenr="294" column="26" str="*"/>
    <tok fileIndex="0" linenr="294" column="27" str="testfd"/>
    <tok fileIndex="0" linenr="294" column="33" str=")"/>
    <tok fileIndex="0" linenr="294" column="35" str="*"/>
    <tok fileIndex="0" linenr="294" column="37" str="("/>
    <tok fileIndex="0" linenr="294" column="38" str="size_t"/>
    <tok fileIndex="0" linenr="294" column="44" str=")"/>
    <tok fileIndex="0" linenr="294" column="45" str="("/>
    <tok fileIndex="0" linenr="294" column="46" str="num_open"/>
    <tok fileIndex="0" linenr="294" column="54" str="."/>
    <tok fileIndex="0" linenr="294" column="55" str="rlim_max"/>
    <tok fileIndex="0" linenr="294" column="63" str=")"/>
    <tok fileIndex="0" linenr="294" column="64" str=")"/>
    <tok fileIndex="0" linenr="294" column="65" str=";"/>
    <tok fileIndex="0" linenr="295" column="3" str="if"/>
    <tok fileIndex="0" linenr="295" column="5" str="("/>
    <tok fileIndex="0" linenr="295" column="6" str="!"/>
    <tok fileIndex="0" linenr="295" column="7" str="testfd"/>
    <tok fileIndex="0" linenr="295" column="13" str=")"/>
    <tok fileIndex="0" linenr="295" column="15" str="{"/>
    <tok fileIndex="0" linenr="296" column="5" str="store_errmsg"/>
    <tok fileIndex="0" linenr="296" column="17" str="("/>
    <tok fileIndex="0" linenr="296" column="18" str="&quot;testfd, malloc() failed&quot;"/>
    <tok fileIndex="0" linenr="296" column="43" str=","/>
    <tok fileIndex="0" linenr="296" column="45" str="errno"/>
    <tok fileIndex="0" linenr="296" column="50" str=")"/>
    <tok fileIndex="0" linenr="296" column="51" str=";"/>
    <tok fileIndex="0" linenr="297" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="297" column="12" str="("/>
    <tok fileIndex="0" linenr="297" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="297" column="19" str=","/>
    <tok fileIndex="0" linenr="297" column="21" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="297" column="27" str=","/>
    <tok fileIndex="0" linenr="297" column="29" str="msgbuff"/>
    <tok fileIndex="0" linenr="297" column="36" str=")"/>
    <tok fileIndex="0" linenr="297" column="37" str=";"/>
    <tok fileIndex="0" linenr="298" column="5" str="free"/>
    <tok fileIndex="0" linenr="298" column="9" str="("/>
    <tok fileIndex="0" linenr="298" column="10" str="memchunk"/>
    <tok fileIndex="0" linenr="298" column="18" str=")"/>
    <tok fileIndex="0" linenr="298" column="19" str=";"/>
    <tok fileIndex="0" linenr="299" column="5" str="return"/>
    <tok fileIndex="0" linenr="299" column="12" str="-"/>
    <tok fileIndex="0" linenr="299" column="13" str="7"/>
    <tok fileIndex="0" linenr="299" column="14" str=";"/>
    <tok fileIndex="0" linenr="300" column="3" str="}"/>
    <tok fileIndex="0" linenr="302" column="3" str="/* initialize it to fight lazy allocation */"/>
    <tok fileIndex="0" linenr="304" column="3" str="fprintf"/>
    <tok fileIndex="0" linenr="304" column="10" str="("/>
    <tok fileIndex="0" linenr="304" column="11" str="stderr"/>
    <tok fileIndex="0" linenr="304" column="17" str=","/>
    <tok fileIndex="0" linenr="304" column="19" str="&quot;initializing testfd array\n&quot;"/>
    <tok fileIndex="0" linenr="304" column="48" str=")"/>
    <tok fileIndex="0" linenr="304" column="49" str=";"/>
    <tok fileIndex="0" linenr="306" column="3" str="for"/>
    <tok fileIndex="0" linenr="306" column="6" str="("/>
    <tok fileIndex="0" linenr="306" column="7" str="num_open"/>
    <tok fileIndex="0" linenr="306" column="15" str="."/>
    <tok fileIndex="0" linenr="306" column="16" str="rlim_cur"/>
    <tok fileIndex="0" linenr="306" column="25" str="="/>
    <tok fileIndex="0" linenr="306" column="27" str="0"/>
    <tok fileIndex="0" linenr="306" column="28" str=";"/>
    <tok fileIndex="0" linenr="307" column="7" str="num_open"/>
    <tok fileIndex="0" linenr="307" column="15" str="."/>
    <tok fileIndex="0" linenr="307" column="16" str="rlim_cur"/>
    <tok fileIndex="0" linenr="307" column="25" str="&lt;"/>
    <tok fileIndex="0" linenr="307" column="27" str="num_open"/>
    <tok fileIndex="0" linenr="307" column="35" str="."/>
    <tok fileIndex="0" linenr="307" column="36" str="rlim_max"/>
    <tok fileIndex="0" linenr="307" column="44" str=";"/>
    <tok fileIndex="0" linenr="308" column="7" str="num_open"/>
    <tok fileIndex="0" linenr="308" column="15" str="."/>
    <tok fileIndex="0" linenr="308" column="16" str="rlim_cur"/>
    <tok fileIndex="0" linenr="308" column="24" str="++"/>
    <tok fileIndex="0" linenr="308" column="26" str=")"/>
    <tok fileIndex="0" linenr="309" column="5" str="testfd"/>
    <tok fileIndex="0" linenr="309" column="11" str="["/>
    <tok fileIndex="0" linenr="309" column="12" str="num_open"/>
    <tok fileIndex="0" linenr="309" column="20" str="."/>
    <tok fileIndex="0" linenr="309" column="21" str="rlim_cur"/>
    <tok fileIndex="0" linenr="309" column="29" str="]"/>
    <tok fileIndex="0" linenr="309" column="31" str="="/>
    <tok fileIndex="0" linenr="309" column="33" str="-"/>
    <tok fileIndex="0" linenr="309" column="34" str="1"/>
    <tok fileIndex="0" linenr="309" column="35" str=";"/>
    <tok fileIndex="0" linenr="311" column="3" str="rlim2str"/>
    <tok fileIndex="0" linenr="311" column="11" str="("/>
    <tok fileIndex="0" linenr="311" column="12" str="strbuff"/>
    <tok fileIndex="0" linenr="311" column="19" str=","/>
    <tok fileIndex="0" linenr="311" column="21" str="sizeof"/>
    <tok fileIndex="0" linenr="311" column="27" str="("/>
    <tok fileIndex="0" linenr="311" column="28" str="strbuff"/>
    <tok fileIndex="0" linenr="311" column="35" str=")"/>
    <tok fileIndex="0" linenr="311" column="36" str=","/>
    <tok fileIndex="0" linenr="311" column="38" str="num_open"/>
    <tok fileIndex="0" linenr="311" column="46" str="."/>
    <tok fileIndex="0" linenr="311" column="47" str="rlim_max"/>
    <tok fileIndex="0" linenr="311" column="55" str=")"/>
    <tok fileIndex="0" linenr="311" column="56" str=";"/>
    <tok fileIndex="0" linenr="312" column="3" str="fprintf"/>
    <tok fileIndex="0" linenr="312" column="10" str="("/>
    <tok fileIndex="0" linenr="312" column="11" str="stderr"/>
    <tok fileIndex="0" linenr="312" column="17" str=","/>
    <tok fileIndex="0" linenr="312" column="19" str="&quot;trying to open %s file descriptors\n&quot;"/>
    <tok fileIndex="0" linenr="312" column="57" str=","/>
    <tok fileIndex="0" linenr="312" column="59" str="strbuff"/>
    <tok fileIndex="0" linenr="312" column="66" str=")"/>
    <tok fileIndex="0" linenr="312" column="67" str=";"/>
    <tok fileIndex="0" linenr="314" column="3" str="/* open a dummy descriptor */"/>
    <tok fileIndex="0" linenr="316" column="3" str="testfd"/>
    <tok fileIndex="0" linenr="316" column="9" str="["/>
    <tok fileIndex="0" linenr="316" column="10" str="0"/>
    <tok fileIndex="0" linenr="316" column="11" str="]"/>
    <tok fileIndex="0" linenr="316" column="13" str="="/>
    <tok fileIndex="0" linenr="316" column="15" str="open"/>
    <tok fileIndex="0" linenr="316" column="19" str="("/>
    <tok fileIndex="0" linenr="316" column="20" str="DEV_NULL"/>
    <tok fileIndex="0" linenr="316" column="28" str=","/>
    <tok fileIndex="0" linenr="316" column="30" str="O_RDONLY"/>
    <tok fileIndex="0" linenr="316" column="38" str=")"/>
    <tok fileIndex="0" linenr="316" column="39" str=";"/>
    <tok fileIndex="0" linenr="317" column="3" str="if"/>
    <tok fileIndex="0" linenr="317" column="5" str="("/>
    <tok fileIndex="0" linenr="317" column="6" str="testfd"/>
    <tok fileIndex="0" linenr="317" column="12" str="["/>
    <tok fileIndex="0" linenr="317" column="13" str="0"/>
    <tok fileIndex="0" linenr="317" column="14" str="]"/>
    <tok fileIndex="0" linenr="317" column="16" str="&lt;"/>
    <tok fileIndex="0" linenr="317" column="18" str="0"/>
    <tok fileIndex="0" linenr="317" column="19" str=")"/>
    <tok fileIndex="0" linenr="317" column="21" str="{"/>
    <tok fileIndex="0" linenr="318" column="5" str="msnprintf"/>
    <tok fileIndex="0" linenr="318" column="14" str="("/>
    <tok fileIndex="0" linenr="318" column="15" str="strbuff"/>
    <tok fileIndex="0" linenr="318" column="22" str=","/>
    <tok fileIndex="0" linenr="318" column="24" str="sizeof"/>
    <tok fileIndex="0" linenr="318" column="30" str="("/>
    <tok fileIndex="0" linenr="318" column="31" str="strbuff"/>
    <tok fileIndex="0" linenr="318" column="38" str=")"/>
    <tok fileIndex="0" linenr="318" column="39" str=","/>
    <tok fileIndex="0" linenr="318" column="41" str="&quot;opening of %s failed&quot;"/>
    <tok fileIndex="0" linenr="318" column="63" str=","/>
    <tok fileIndex="0" linenr="318" column="65" str="DEV_NULL"/>
    <tok fileIndex="0" linenr="318" column="73" str=")"/>
    <tok fileIndex="0" linenr="318" column="74" str=";"/>
    <tok fileIndex="0" linenr="319" column="5" str="store_errmsg"/>
    <tok fileIndex="0" linenr="319" column="17" str="("/>
    <tok fileIndex="0" linenr="319" column="18" str="strbuff"/>
    <tok fileIndex="0" linenr="319" column="25" str=","/>
    <tok fileIndex="0" linenr="319" column="27" str="errno"/>
    <tok fileIndex="0" linenr="319" column="32" str=")"/>
    <tok fileIndex="0" linenr="319" column="33" str=";"/>
    <tok fileIndex="0" linenr="320" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="320" column="12" str="("/>
    <tok fileIndex="0" linenr="320" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="320" column="19" str=","/>
    <tok fileIndex="0" linenr="320" column="21" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="320" column="27" str=","/>
    <tok fileIndex="0" linenr="320" column="29" str="msgbuff"/>
    <tok fileIndex="0" linenr="320" column="36" str=")"/>
    <tok fileIndex="0" linenr="320" column="37" str=";"/>
    <tok fileIndex="0" linenr="321" column="5" str="free"/>
    <tok fileIndex="0" linenr="321" column="9" str="("/>
    <tok fileIndex="0" linenr="321" column="10" str="testfd"/>
    <tok fileIndex="0" linenr="321" column="16" str=")"/>
    <tok fileIndex="0" linenr="321" column="17" str=";"/>
    <tok fileIndex="0" linenr="322" column="5" str="testfd"/>
    <tok fileIndex="0" linenr="322" column="12" str="="/>
    <tok fileIndex="0" linenr="322" column="14" str="NULL"/>
    <tok fileIndex="0" linenr="322" column="18" str=";"/>
    <tok fileIndex="0" linenr="323" column="5" str="free"/>
    <tok fileIndex="0" linenr="323" column="9" str="("/>
    <tok fileIndex="0" linenr="323" column="10" str="memchunk"/>
    <tok fileIndex="0" linenr="323" column="18" str=")"/>
    <tok fileIndex="0" linenr="323" column="19" str=";"/>
    <tok fileIndex="0" linenr="324" column="5" str="return"/>
    <tok fileIndex="0" linenr="324" column="12" str="-"/>
    <tok fileIndex="0" linenr="324" column="13" str="8"/>
    <tok fileIndex="0" linenr="324" column="14" str=";"/>
    <tok fileIndex="0" linenr="325" column="3" str="}"/>
    <tok fileIndex="0" linenr="327" column="3" str="/* create a bunch of file descriptors */"/>
    <tok fileIndex="0" linenr="329" column="3" str="for"/>
    <tok fileIndex="0" linenr="329" column="6" str="("/>
    <tok fileIndex="0" linenr="329" column="7" str="num_open"/>
    <tok fileIndex="0" linenr="329" column="15" str="."/>
    <tok fileIndex="0" linenr="329" column="16" str="rlim_cur"/>
    <tok fileIndex="0" linenr="329" column="25" str="="/>
    <tok fileIndex="0" linenr="329" column="27" str="1"/>
    <tok fileIndex="0" linenr="329" column="28" str=";"/>
    <tok fileIndex="0" linenr="330" column="7" str="num_open"/>
    <tok fileIndex="0" linenr="330" column="15" str="."/>
    <tok fileIndex="0" linenr="330" column="16" str="rlim_cur"/>
    <tok fileIndex="0" linenr="330" column="25" str="&lt;"/>
    <tok fileIndex="0" linenr="330" column="27" str="num_open"/>
    <tok fileIndex="0" linenr="330" column="35" str="."/>
    <tok fileIndex="0" linenr="330" column="36" str="rlim_max"/>
    <tok fileIndex="0" linenr="330" column="44" str=";"/>
    <tok fileIndex="0" linenr="331" column="7" str="num_open"/>
    <tok fileIndex="0" linenr="331" column="15" str="."/>
    <tok fileIndex="0" linenr="331" column="16" str="rlim_cur"/>
    <tok fileIndex="0" linenr="331" column="24" str="++"/>
    <tok fileIndex="0" linenr="331" column="26" str=")"/>
    <tok fileIndex="0" linenr="331" column="28" str="{"/>
    <tok fileIndex="0" linenr="333" column="5" str="testfd"/>
    <tok fileIndex="0" linenr="333" column="11" str="["/>
    <tok fileIndex="0" linenr="333" column="12" str="num_open"/>
    <tok fileIndex="0" linenr="333" column="20" str="."/>
    <tok fileIndex="0" linenr="333" column="21" str="rlim_cur"/>
    <tok fileIndex="0" linenr="333" column="29" str="]"/>
    <tok fileIndex="0" linenr="333" column="31" str="="/>
    <tok fileIndex="0" linenr="333" column="33" str="dup"/>
    <tok fileIndex="0" linenr="333" column="36" str="("/>
    <tok fileIndex="0" linenr="333" column="37" str="testfd"/>
    <tok fileIndex="0" linenr="333" column="43" str="["/>
    <tok fileIndex="0" linenr="333" column="44" str="0"/>
    <tok fileIndex="0" linenr="333" column="45" str="]"/>
    <tok fileIndex="0" linenr="333" column="46" str=")"/>
    <tok fileIndex="0" linenr="333" column="47" str=";"/>
    <tok fileIndex="0" linenr="335" column="5" str="if"/>
    <tok fileIndex="0" linenr="335" column="7" str="("/>
    <tok fileIndex="0" linenr="335" column="8" str="testfd"/>
    <tok fileIndex="0" linenr="335" column="14" str="["/>
    <tok fileIndex="0" linenr="335" column="15" str="num_open"/>
    <tok fileIndex="0" linenr="335" column="23" str="."/>
    <tok fileIndex="0" linenr="335" column="24" str="rlim_cur"/>
    <tok fileIndex="0" linenr="335" column="32" str="]"/>
    <tok fileIndex="0" linenr="335" column="34" str="&lt;"/>
    <tok fileIndex="0" linenr="335" column="36" str="0"/>
    <tok fileIndex="0" linenr="335" column="37" str=")"/>
    <tok fileIndex="0" linenr="335" column="39" str="{"/>
    <tok fileIndex="0" linenr="337" column="7" str="testfd"/>
    <tok fileIndex="0" linenr="337" column="13" str="["/>
    <tok fileIndex="0" linenr="337" column="14" str="num_open"/>
    <tok fileIndex="0" linenr="337" column="22" str="."/>
    <tok fileIndex="0" linenr="337" column="23" str="rlim_cur"/>
    <tok fileIndex="0" linenr="337" column="31" str="]"/>
    <tok fileIndex="0" linenr="337" column="33" str="="/>
    <tok fileIndex="0" linenr="337" column="35" str="-"/>
    <tok fileIndex="0" linenr="337" column="36" str="1"/>
    <tok fileIndex="0" linenr="337" column="37" str=";"/>
    <tok fileIndex="0" linenr="339" column="7" str="rlim2str"/>
    <tok fileIndex="0" linenr="339" column="15" str="("/>
    <tok fileIndex="0" linenr="339" column="16" str="strbuff1"/>
    <tok fileIndex="0" linenr="339" column="24" str=","/>
    <tok fileIndex="0" linenr="339" column="26" str="sizeof"/>
    <tok fileIndex="0" linenr="339" column="32" str="("/>
    <tok fileIndex="0" linenr="339" column="33" str="strbuff1"/>
    <tok fileIndex="0" linenr="339" column="41" str=")"/>
    <tok fileIndex="0" linenr="339" column="42" str=","/>
    <tok fileIndex="0" linenr="339" column="44" str="num_open"/>
    <tok fileIndex="0" linenr="339" column="52" str="."/>
    <tok fileIndex="0" linenr="339" column="53" str="rlim_cur"/>
    <tok fileIndex="0" linenr="339" column="61" str=")"/>
    <tok fileIndex="0" linenr="339" column="62" str=";"/>
    <tok fileIndex="0" linenr="340" column="7" str="msnprintf"/>
    <tok fileIndex="0" linenr="340" column="16" str="("/>
    <tok fileIndex="0" linenr="340" column="17" str="strbuff"/>
    <tok fileIndex="0" linenr="340" column="24" str=","/>
    <tok fileIndex="0" linenr="340" column="26" str="sizeof"/>
    <tok fileIndex="0" linenr="340" column="32" str="("/>
    <tok fileIndex="0" linenr="340" column="33" str="strbuff"/>
    <tok fileIndex="0" linenr="340" column="40" str=")"/>
    <tok fileIndex="0" linenr="340" column="41" str=","/>
    <tok fileIndex="0" linenr="340" column="43" str="&quot;dup() attempt %s failed&quot;"/>
    <tok fileIndex="0" linenr="340" column="68" str=","/>
    <tok fileIndex="0" linenr="340" column="70" str="strbuff1"/>
    <tok fileIndex="0" linenr="340" column="78" str=")"/>
    <tok fileIndex="0" linenr="340" column="79" str=";"/>
    <tok fileIndex="0" linenr="341" column="7" str="fprintf"/>
    <tok fileIndex="0" linenr="341" column="14" str="("/>
    <tok fileIndex="0" linenr="341" column="15" str="stderr"/>
    <tok fileIndex="0" linenr="341" column="21" str=","/>
    <tok fileIndex="0" linenr="341" column="23" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="341" column="29" str=","/>
    <tok fileIndex="0" linenr="341" column="31" str="strbuff"/>
    <tok fileIndex="0" linenr="341" column="38" str=")"/>
    <tok fileIndex="0" linenr="341" column="39" str=";"/>
    <tok fileIndex="0" linenr="343" column="7" str="rlim2str"/>
    <tok fileIndex="0" linenr="343" column="15" str="("/>
    <tok fileIndex="0" linenr="343" column="16" str="strbuff1"/>
    <tok fileIndex="0" linenr="343" column="24" str=","/>
    <tok fileIndex="0" linenr="343" column="26" str="sizeof"/>
    <tok fileIndex="0" linenr="343" column="32" str="("/>
    <tok fileIndex="0" linenr="343" column="33" str="strbuff1"/>
    <tok fileIndex="0" linenr="343" column="41" str=")"/>
    <tok fileIndex="0" linenr="343" column="42" str=","/>
    <tok fileIndex="0" linenr="343" column="44" str="num_open"/>
    <tok fileIndex="0" linenr="343" column="52" str="."/>
    <tok fileIndex="0" linenr="343" column="53" str="rlim_cur"/>
    <tok fileIndex="0" linenr="343" column="61" str=")"/>
    <tok fileIndex="0" linenr="343" column="62" str=";"/>
    <tok fileIndex="0" linenr="344" column="7" str="msnprintf"/>
    <tok fileIndex="0" linenr="344" column="16" str="("/>
    <tok fileIndex="0" linenr="344" column="17" str="strbuff"/>
    <tok fileIndex="0" linenr="344" column="24" str=","/>
    <tok fileIndex="0" linenr="344" column="26" str="sizeof"/>
    <tok fileIndex="0" linenr="344" column="32" str="("/>
    <tok fileIndex="0" linenr="344" column="33" str="strbuff"/>
    <tok fileIndex="0" linenr="344" column="40" str=")"/>
    <tok fileIndex="0" linenr="344" column="41" str=","/>
    <tok fileIndex="0" linenr="344" column="43" str="&quot;fds system limit seems close to %s&quot;"/>
    <tok fileIndex="0" linenr="344" column="79" str=","/>
    <tok fileIndex="0" linenr="345" column="17" str="strbuff1"/>
    <tok fileIndex="0" linenr="345" column="25" str=")"/>
    <tok fileIndex="0" linenr="345" column="26" str=";"/>
    <tok fileIndex="0" linenr="346" column="7" str="fprintf"/>
    <tok fileIndex="0" linenr="346" column="14" str="("/>
    <tok fileIndex="0" linenr="346" column="15" str="stderr"/>
    <tok fileIndex="0" linenr="346" column="21" str=","/>
    <tok fileIndex="0" linenr="346" column="23" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="346" column="29" str=","/>
    <tok fileIndex="0" linenr="346" column="31" str="strbuff"/>
    <tok fileIndex="0" linenr="346" column="38" str=")"/>
    <tok fileIndex="0" linenr="346" column="39" str=";"/>
    <tok fileIndex="0" linenr="348" column="7" str="num_open"/>
    <tok fileIndex="0" linenr="348" column="15" str="."/>
    <tok fileIndex="0" linenr="348" column="16" str="rlim_max"/>
    <tok fileIndex="0" linenr="348" column="25" str="="/>
    <tok fileIndex="0" linenr="348" column="27" str="NUM_NEEDED"/>
    <tok fileIndex="0" linenr="348" column="37" str=";"/>
    <tok fileIndex="0" linenr="350" column="7" str="rlim2str"/>
    <tok fileIndex="0" linenr="350" column="15" str="("/>
    <tok fileIndex="0" linenr="350" column="16" str="strbuff2"/>
    <tok fileIndex="0" linenr="350" column="24" str=","/>
    <tok fileIndex="0" linenr="350" column="26" str="sizeof"/>
    <tok fileIndex="0" linenr="350" column="32" str="("/>
    <tok fileIndex="0" linenr="350" column="33" str="strbuff2"/>
    <tok fileIndex="0" linenr="350" column="41" str=")"/>
    <tok fileIndex="0" linenr="350" column="42" str=","/>
    <tok fileIndex="0" linenr="350" column="44" str="num_open"/>
    <tok fileIndex="0" linenr="350" column="52" str="."/>
    <tok fileIndex="0" linenr="350" column="53" str="rlim_max"/>
    <tok fileIndex="0" linenr="350" column="61" str=")"/>
    <tok fileIndex="0" linenr="350" column="62" str=";"/>
    <tok fileIndex="0" linenr="351" column="7" str="rlim2str"/>
    <tok fileIndex="0" linenr="351" column="15" str="("/>
    <tok fileIndex="0" linenr="351" column="16" str="strbuff1"/>
    <tok fileIndex="0" linenr="351" column="24" str=","/>
    <tok fileIndex="0" linenr="351" column="26" str="sizeof"/>
    <tok fileIndex="0" linenr="351" column="32" str="("/>
    <tok fileIndex="0" linenr="351" column="33" str="strbuff1"/>
    <tok fileIndex="0" linenr="351" column="41" str=")"/>
    <tok fileIndex="0" linenr="351" column="42" str=","/>
    <tok fileIndex="0" linenr="351" column="44" str="num_open"/>
    <tok fileIndex="0" linenr="351" column="52" str="."/>
    <tok fileIndex="0" linenr="351" column="53" str="rlim_cur"/>
    <tok fileIndex="0" linenr="351" column="61" str=")"/>
    <tok fileIndex="0" linenr="351" column="62" str=";"/>
    <tok fileIndex="0" linenr="352" column="7" str="msnprintf"/>
    <tok fileIndex="0" linenr="352" column="16" str="("/>
    <tok fileIndex="0" linenr="352" column="17" str="strbuff"/>
    <tok fileIndex="0" linenr="352" column="24" str=","/>
    <tok fileIndex="0" linenr="352" column="26" str="sizeof"/>
    <tok fileIndex="0" linenr="352" column="32" str="("/>
    <tok fileIndex="0" linenr="352" column="33" str="strbuff"/>
    <tok fileIndex="0" linenr="352" column="40" str=")"/>
    <tok fileIndex="0" linenr="352" column="41" str=","/>
    <tok fileIndex="0" linenr="352" column="43" str="&quot;fds needed %s &gt; system limit %s&quot;"/>
    <tok fileIndex="0" linenr="352" column="76" str=","/>
    <tok fileIndex="0" linenr="353" column="17" str="strbuff2"/>
    <tok fileIndex="0" linenr="353" column="25" str=","/>
    <tok fileIndex="0" linenr="353" column="27" str="strbuff1"/>
    <tok fileIndex="0" linenr="353" column="35" str=")"/>
    <tok fileIndex="0" linenr="353" column="36" str=";"/>
    <tok fileIndex="0" linenr="354" column="7" str="store_errmsg"/>
    <tok fileIndex="0" linenr="354" column="19" str="("/>
    <tok fileIndex="0" linenr="354" column="20" str="strbuff"/>
    <tok fileIndex="0" linenr="354" column="27" str=","/>
    <tok fileIndex="0" linenr="354" column="29" str="0"/>
    <tok fileIndex="0" linenr="354" column="30" str=")"/>
    <tok fileIndex="0" linenr="354" column="31" str=";"/>
    <tok fileIndex="0" linenr="355" column="7" str="fprintf"/>
    <tok fileIndex="0" linenr="355" column="14" str="("/>
    <tok fileIndex="0" linenr="355" column="15" str="stderr"/>
    <tok fileIndex="0" linenr="355" column="21" str=","/>
    <tok fileIndex="0" linenr="355" column="23" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="355" column="29" str=","/>
    <tok fileIndex="0" linenr="355" column="31" str="msgbuff"/>
    <tok fileIndex="0" linenr="355" column="38" str=")"/>
    <tok fileIndex="0" linenr="355" column="39" str=";"/>
    <tok fileIndex="0" linenr="357" column="7" str="for"/>
    <tok fileIndex="0" linenr="357" column="10" str="("/>
    <tok fileIndex="0" linenr="357" column="11" str="num_open"/>
    <tok fileIndex="0" linenr="357" column="19" str="."/>
    <tok fileIndex="0" linenr="357" column="20" str="rlim_cur"/>
    <tok fileIndex="0" linenr="357" column="29" str="="/>
    <tok fileIndex="0" linenr="357" column="31" str="0"/>
    <tok fileIndex="0" linenr="357" column="32" str=";"/>
    <tok fileIndex="0" linenr="358" column="11" str="testfd"/>
    <tok fileIndex="0" linenr="358" column="17" str="["/>
    <tok fileIndex="0" linenr="358" column="18" str="num_open"/>
    <tok fileIndex="0" linenr="358" column="26" str="."/>
    <tok fileIndex="0" linenr="358" column="27" str="rlim_cur"/>
    <tok fileIndex="0" linenr="358" column="35" str="]"/>
    <tok fileIndex="0" linenr="358" column="37" str="&gt;="/>
    <tok fileIndex="0" linenr="358" column="40" str="0"/>
    <tok fileIndex="0" linenr="358" column="41" str=";"/>
    <tok fileIndex="0" linenr="359" column="11" str="num_open"/>
    <tok fileIndex="0" linenr="359" column="19" str="."/>
    <tok fileIndex="0" linenr="359" column="20" str="rlim_cur"/>
    <tok fileIndex="0" linenr="359" column="28" str="++"/>
    <tok fileIndex="0" linenr="359" column="30" str=")"/>
    <tok fileIndex="0" linenr="360" column="9" str="close"/>
    <tok fileIndex="0" linenr="360" column="14" str="("/>
    <tok fileIndex="0" linenr="360" column="15" str="testfd"/>
    <tok fileIndex="0" linenr="360" column="21" str="["/>
    <tok fileIndex="0" linenr="360" column="22" str="num_open"/>
    <tok fileIndex="0" linenr="360" column="30" str="."/>
    <tok fileIndex="0" linenr="360" column="31" str="rlim_cur"/>
    <tok fileIndex="0" linenr="360" column="39" str="]"/>
    <tok fileIndex="0" linenr="360" column="40" str=")"/>
    <tok fileIndex="0" linenr="360" column="41" str=";"/>
    <tok fileIndex="0" linenr="361" column="7" str="free"/>
    <tok fileIndex="0" linenr="361" column="11" str="("/>
    <tok fileIndex="0" linenr="361" column="12" str="testfd"/>
    <tok fileIndex="0" linenr="361" column="18" str=")"/>
    <tok fileIndex="0" linenr="361" column="19" str=";"/>
    <tok fileIndex="0" linenr="362" column="7" str="testfd"/>
    <tok fileIndex="0" linenr="362" column="14" str="="/>
    <tok fileIndex="0" linenr="362" column="16" str="NULL"/>
    <tok fileIndex="0" linenr="362" column="20" str=";"/>
    <tok fileIndex="0" linenr="363" column="7" str="free"/>
    <tok fileIndex="0" linenr="363" column="11" str="("/>
    <tok fileIndex="0" linenr="363" column="12" str="memchunk"/>
    <tok fileIndex="0" linenr="363" column="20" str=")"/>
    <tok fileIndex="0" linenr="363" column="21" str=";"/>
    <tok fileIndex="0" linenr="364" column="7" str="return"/>
    <tok fileIndex="0" linenr="364" column="14" str="-"/>
    <tok fileIndex="0" linenr="364" column="15" str="9"/>
    <tok fileIndex="0" linenr="364" column="16" str=";"/>
    <tok fileIndex="0" linenr="365" column="5" str="}"/>
    <tok fileIndex="0" linenr="366" column="3" str="}"/>
    <tok fileIndex="0" linenr="368" column="3" str="rlim2str"/>
    <tok fileIndex="0" linenr="368" column="11" str="("/>
    <tok fileIndex="0" linenr="368" column="12" str="strbuff"/>
    <tok fileIndex="0" linenr="368" column="19" str=","/>
    <tok fileIndex="0" linenr="368" column="21" str="sizeof"/>
    <tok fileIndex="0" linenr="368" column="27" str="("/>
    <tok fileIndex="0" linenr="368" column="28" str="strbuff"/>
    <tok fileIndex="0" linenr="368" column="35" str=")"/>
    <tok fileIndex="0" linenr="368" column="36" str=","/>
    <tok fileIndex="0" linenr="368" column="38" str="num_open"/>
    <tok fileIndex="0" linenr="368" column="46" str="."/>
    <tok fileIndex="0" linenr="368" column="47" str="rlim_max"/>
    <tok fileIndex="0" linenr="368" column="55" str=")"/>
    <tok fileIndex="0" linenr="368" column="56" str=";"/>
    <tok fileIndex="0" linenr="369" column="3" str="fprintf"/>
    <tok fileIndex="0" linenr="369" column="10" str="("/>
    <tok fileIndex="0" linenr="369" column="11" str="stderr"/>
    <tok fileIndex="0" linenr="369" column="17" str=","/>
    <tok fileIndex="0" linenr="369" column="19" str="&quot;%s file descriptors open\n&quot;"/>
    <tok fileIndex="0" linenr="369" column="47" str=","/>
    <tok fileIndex="0" linenr="369" column="49" str="strbuff"/>
    <tok fileIndex="0" linenr="369" column="56" str=")"/>
    <tok fileIndex="0" linenr="369" column="57" str=";"/>
    <tok fileIndex="0" linenr="371" column="1" str="#"/>
    <tok fileIndex="0" linenr="371" column="2" str="if"/>
    <tok fileIndex="0" linenr="371" column="5" str="!"/>
    <tok fileIndex="0" linenr="371" column="6" str="defined"/>
    <tok fileIndex="0" linenr="371" column="13" str="("/>
    <tok fileIndex="0" linenr="371" column="14" str="HAVE_POLL"/>
    <tok fileIndex="0" linenr="371" column="23" str=")"/>
    <tok fileIndex="0" linenr="371" column="25" str="&amp;&amp;"/>
    <tok fileIndex="0" linenr="371" column="28" str="!"/>
    <tok fileIndex="0" linenr="371" column="29" str="defined"/>
    <tok fileIndex="0" linenr="371" column="36" str="("/>
    <tok fileIndex="0" linenr="371" column="37" str="USE_WINSOCK"/>
    <tok fileIndex="0" linenr="371" column="48" str=")"/>
    <tok fileIndex="0" linenr="373" column="3" str="/*   * when using select() instead of poll() we cannot test   * libcurl functionality with a socket number equal or   * greater than FD_SETSIZE. In any case, macro VERIFY_SOCK   * in lib/select.c enforces this check and protects libcurl   * from a possible crash. The effect of this protection   * is that test 518 will always fail, since the actual   * call to select() never takes place. We skip test 518   * with an indication that select limit would be exceeded.   */"/>
    <tok fileIndex="0" linenr="384" column="3" str="num_open"/>
    <tok fileIndex="0" linenr="384" column="11" str="."/>
    <tok fileIndex="0" linenr="384" column="12" str="rlim_cur"/>
    <tok fileIndex="0" linenr="384" column="21" str="="/>
    <tok fileIndex="0" linenr="384" column="23" str="FD_SETSIZE"/>
    <tok fileIndex="0" linenr="384" column="34" str="-"/>
    <tok fileIndex="0" linenr="384" column="36" str="SAFETY_MARGIN"/>
    <tok fileIndex="0" linenr="384" column="49" str=";"/>
    <tok fileIndex="0" linenr="385" column="3" str="if"/>
    <tok fileIndex="0" linenr="385" column="5" str="("/>
    <tok fileIndex="0" linenr="385" column="6" str="num_open"/>
    <tok fileIndex="0" linenr="385" column="14" str="."/>
    <tok fileIndex="0" linenr="385" column="15" str="rlim_max"/>
    <tok fileIndex="0" linenr="385" column="24" str="&gt;"/>
    <tok fileIndex="0" linenr="385" column="26" str="num_open"/>
    <tok fileIndex="0" linenr="385" column="34" str="."/>
    <tok fileIndex="0" linenr="385" column="35" str="rlim_cur"/>
    <tok fileIndex="0" linenr="385" column="43" str=")"/>
    <tok fileIndex="0" linenr="385" column="45" str="{"/>
    <tok fileIndex="0" linenr="386" column="5" str="msnprintf"/>
    <tok fileIndex="0" linenr="386" column="14" str="("/>
    <tok fileIndex="0" linenr="386" column="15" str="strbuff"/>
    <tok fileIndex="0" linenr="386" column="22" str=","/>
    <tok fileIndex="0" linenr="386" column="24" str="sizeof"/>
    <tok fileIndex="0" linenr="386" column="30" str="("/>
    <tok fileIndex="0" linenr="386" column="31" str="strbuff"/>
    <tok fileIndex="0" linenr="386" column="38" str=")"/>
    <tok fileIndex="0" linenr="386" column="39" str=","/>
    <tok fileIndex="0" linenr="386" column="41" str="&quot;select limit is FD_SETSIZE %d&quot;"/>
    <tok fileIndex="0" linenr="386" column="72" str=","/>
    <tok fileIndex="0" linenr="387" column="15" str="FD_SETSIZE"/>
    <tok fileIndex="0" linenr="387" column="25" str=")"/>
    <tok fileIndex="0" linenr="387" column="26" str=";"/>
    <tok fileIndex="0" linenr="388" column="5" str="store_errmsg"/>
    <tok fileIndex="0" linenr="388" column="17" str="("/>
    <tok fileIndex="0" linenr="388" column="18" str="strbuff"/>
    <tok fileIndex="0" linenr="388" column="25" str=","/>
    <tok fileIndex="0" linenr="388" column="27" str="0"/>
    <tok fileIndex="0" linenr="388" column="28" str=")"/>
    <tok fileIndex="0" linenr="388" column="29" str=";"/>
    <tok fileIndex="0" linenr="389" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="389" column="12" str="("/>
    <tok fileIndex="0" linenr="389" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="389" column="19" str=","/>
    <tok fileIndex="0" linenr="389" column="21" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="389" column="27" str=","/>
    <tok fileIndex="0" linenr="389" column="29" str="msgbuff"/>
    <tok fileIndex="0" linenr="389" column="36" str=")"/>
    <tok fileIndex="0" linenr="389" column="37" str=";"/>
    <tok fileIndex="0" linenr="390" column="5" str="close_file_descriptors"/>
    <tok fileIndex="0" linenr="390" column="27" str="("/>
    <tok fileIndex="0" linenr="390" column="28" str=")"/>
    <tok fileIndex="0" linenr="390" column="29" str=";"/>
    <tok fileIndex="0" linenr="391" column="5" str="free"/>
    <tok fileIndex="0" linenr="391" column="9" str="("/>
    <tok fileIndex="0" linenr="391" column="10" str="memchunk"/>
    <tok fileIndex="0" linenr="391" column="18" str=")"/>
    <tok fileIndex="0" linenr="391" column="19" str=";"/>
    <tok fileIndex="0" linenr="392" column="5" str="return"/>
    <tok fileIndex="0" linenr="392" column="12" str="-"/>
    <tok fileIndex="0" linenr="392" column="13" str="10"/>
    <tok fileIndex="0" linenr="392" column="15" str=";"/>
    <tok fileIndex="0" linenr="393" column="3" str="}"/>
    <tok fileIndex="0" linenr="395" column="3" str="num_open"/>
    <tok fileIndex="0" linenr="395" column="11" str="."/>
    <tok fileIndex="0" linenr="395" column="12" str="rlim_cur"/>
    <tok fileIndex="0" linenr="395" column="21" str="="/>
    <tok fileIndex="0" linenr="395" column="23" str="FD_SETSIZE"/>
    <tok fileIndex="0" linenr="395" column="34" str="-"/>
    <tok fileIndex="0" linenr="395" column="36" str="SAFETY_MARGIN"/>
    <tok fileIndex="0" linenr="395" column="49" str=";"/>
    <tok fileIndex="0" linenr="396" column="3" str="for"/>
    <tok fileIndex="0" linenr="396" column="6" str="("/>
    <tok fileIndex="0" linenr="396" column="7" str="rl"/>
    <tok fileIndex="0" linenr="396" column="9" str="."/>
    <tok fileIndex="0" linenr="396" column="10" str="rlim_cur"/>
    <tok fileIndex="0" linenr="396" column="19" str="="/>
    <tok fileIndex="0" linenr="396" column="21" str="0"/>
    <tok fileIndex="0" linenr="396" column="22" str=";"/>
    <tok fileIndex="0" linenr="397" column="7" str="rl"/>
    <tok fileIndex="0" linenr="397" column="9" str="."/>
    <tok fileIndex="0" linenr="397" column="10" str="rlim_cur"/>
    <tok fileIndex="0" linenr="397" column="19" str="&lt;"/>
    <tok fileIndex="0" linenr="397" column="21" str="num_open"/>
    <tok fileIndex="0" linenr="397" column="29" str="."/>
    <tok fileIndex="0" linenr="397" column="30" str="rlim_max"/>
    <tok fileIndex="0" linenr="397" column="38" str=";"/>
    <tok fileIndex="0" linenr="398" column="7" str="rl"/>
    <tok fileIndex="0" linenr="398" column="9" str="."/>
    <tok fileIndex="0" linenr="398" column="10" str="rlim_cur"/>
    <tok fileIndex="0" linenr="398" column="18" str="++"/>
    <tok fileIndex="0" linenr="398" column="20" str=")"/>
    <tok fileIndex="0" linenr="398" column="22" str="{"/>
    <tok fileIndex="0" linenr="399" column="5" str="if"/>
    <tok fileIndex="0" linenr="399" column="7" str="("/>
    <tok fileIndex="0" linenr="399" column="8" str="("/>
    <tok fileIndex="0" linenr="399" column="9" str="testfd"/>
    <tok fileIndex="0" linenr="399" column="15" str="["/>
    <tok fileIndex="0" linenr="399" column="16" str="rl"/>
    <tok fileIndex="0" linenr="399" column="18" str="."/>
    <tok fileIndex="0" linenr="399" column="19" str="rlim_cur"/>
    <tok fileIndex="0" linenr="399" column="27" str="]"/>
    <tok fileIndex="0" linenr="399" column="29" str="&gt;"/>
    <tok fileIndex="0" linenr="399" column="31" str="0"/>
    <tok fileIndex="0" linenr="399" column="32" str=")"/>
    <tok fileIndex="0" linenr="399" column="34" str="&amp;&amp;"/>
    <tok fileIndex="0" linenr="400" column="8" str="("/>
    <tok fileIndex="0" linenr="400" column="9" str="("/>
    <tok fileIndex="0" linenr="400" column="10" str="unsigned"/>
    <tok fileIndex="0" linenr="400" column="19" str="int"/>
    <tok fileIndex="0" linenr="400" column="22" str=")"/>
    <tok fileIndex="0" linenr="400" column="23" str="testfd"/>
    <tok fileIndex="0" linenr="400" column="29" str="["/>
    <tok fileIndex="0" linenr="400" column="30" str="rl"/>
    <tok fileIndex="0" linenr="400" column="32" str="."/>
    <tok fileIndex="0" linenr="400" column="33" str="rlim_cur"/>
    <tok fileIndex="0" linenr="400" column="41" str="]"/>
    <tok fileIndex="0" linenr="400" column="43" str="&gt;"/>
    <tok fileIndex="0" linenr="400" column="45" str="num_open"/>
    <tok fileIndex="0" linenr="400" column="53" str="."/>
    <tok fileIndex="0" linenr="400" column="54" str="rlim_cur"/>
    <tok fileIndex="0" linenr="400" column="62" str=")"/>
    <tok fileIndex="0" linenr="400" column="63" str=")"/>
    <tok fileIndex="0" linenr="400" column="65" str="{"/>
    <tok fileIndex="0" linenr="401" column="7" str="msnprintf"/>
    <tok fileIndex="0" linenr="401" column="16" str="("/>
    <tok fileIndex="0" linenr="401" column="17" str="strbuff"/>
    <tok fileIndex="0" linenr="401" column="24" str=","/>
    <tok fileIndex="0" linenr="401" column="26" str="sizeof"/>
    <tok fileIndex="0" linenr="401" column="32" str="("/>
    <tok fileIndex="0" linenr="401" column="33" str="strbuff"/>
    <tok fileIndex="0" linenr="401" column="40" str=")"/>
    <tok fileIndex="0" linenr="401" column="41" str=","/>
    <tok fileIndex="0" linenr="401" column="43" str="&quot;select limit is FD_SETSIZE %d&quot;"/>
    <tok fileIndex="0" linenr="401" column="74" str=","/>
    <tok fileIndex="0" linenr="402" column="17" str="FD_SETSIZE"/>
    <tok fileIndex="0" linenr="402" column="27" str=")"/>
    <tok fileIndex="0" linenr="402" column="28" str=";"/>
    <tok fileIndex="0" linenr="403" column="7" str="store_errmsg"/>
    <tok fileIndex="0" linenr="403" column="19" str="("/>
    <tok fileIndex="0" linenr="403" column="20" str="strbuff"/>
    <tok fileIndex="0" linenr="403" column="27" str=","/>
    <tok fileIndex="0" linenr="403" column="29" str="0"/>
    <tok fileIndex="0" linenr="403" column="30" str=")"/>
    <tok fileIndex="0" linenr="403" column="31" str=";"/>
    <tok fileIndex="0" linenr="404" column="7" str="fprintf"/>
    <tok fileIndex="0" linenr="404" column="14" str="("/>
    <tok fileIndex="0" linenr="404" column="15" str="stderr"/>
    <tok fileIndex="0" linenr="404" column="21" str=","/>
    <tok fileIndex="0" linenr="404" column="23" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="404" column="29" str=","/>
    <tok fileIndex="0" linenr="404" column="31" str="msgbuff"/>
    <tok fileIndex="0" linenr="404" column="38" str=")"/>
    <tok fileIndex="0" linenr="404" column="39" str=";"/>
    <tok fileIndex="0" linenr="405" column="7" str="close_file_descriptors"/>
    <tok fileIndex="0" linenr="405" column="29" str="("/>
    <tok fileIndex="0" linenr="405" column="30" str=")"/>
    <tok fileIndex="0" linenr="405" column="31" str=";"/>
    <tok fileIndex="0" linenr="406" column="7" str="free"/>
    <tok fileIndex="0" linenr="406" column="11" str="("/>
    <tok fileIndex="0" linenr="406" column="12" str="memchunk"/>
    <tok fileIndex="0" linenr="406" column="20" str=")"/>
    <tok fileIndex="0" linenr="406" column="21" str=";"/>
    <tok fileIndex="0" linenr="407" column="7" str="return"/>
    <tok fileIndex="0" linenr="407" column="14" str="-"/>
    <tok fileIndex="0" linenr="407" column="15" str="11"/>
    <tok fileIndex="0" linenr="407" column="17" str=";"/>
    <tok fileIndex="0" linenr="408" column="5" str="}"/>
    <tok fileIndex="0" linenr="409" column="3" str="}"/>
    <tok fileIndex="0" linenr="411" column="1" str="#"/>
    <tok fileIndex="0" linenr="411" column="2" str="endif"/>
    <tok fileIndex="0" linenr="411" column="8" str="/* using a FD_SETSIZE bound select() */"/>
    <tok fileIndex="0" linenr="413" column="3" str="/*   * Old or &apos;backwards compatible&apos; implementations of stdio do not allow   * handling of streams with an underlying file descriptor number greater   * than 255, even when allowing high numbered file descriptors for sockets.   * At this point we have a big number of file descriptors which have been   * opened using dup(), so lets test the stdio implementation and discover   * if it is capable of fopen()ing some additional files.   */"/>
    <tok fileIndex="0" linenr="422" column="3" str="if"/>
    <tok fileIndex="0" linenr="422" column="5" str="("/>
    <tok fileIndex="0" linenr="422" column="6" str="!"/>
    <tok fileIndex="0" linenr="422" column="7" str="fopen_works"/>
    <tok fileIndex="0" linenr="422" column="18" str="("/>
    <tok fileIndex="0" linenr="422" column="19" str=")"/>
    <tok fileIndex="0" linenr="422" column="20" str=")"/>
    <tok fileIndex="0" linenr="422" column="22" str="{"/>
    <tok fileIndex="0" linenr="423" column="5" str="rlim2str"/>
    <tok fileIndex="0" linenr="423" column="13" str="("/>
    <tok fileIndex="0" linenr="423" column="14" str="strbuff1"/>
    <tok fileIndex="0" linenr="423" column="22" str=","/>
    <tok fileIndex="0" linenr="423" column="24" str="sizeof"/>
    <tok fileIndex="0" linenr="423" column="30" str="("/>
    <tok fileIndex="0" linenr="423" column="31" str="strbuff1"/>
    <tok fileIndex="0" linenr="423" column="39" str=")"/>
    <tok fileIndex="0" linenr="423" column="40" str=","/>
    <tok fileIndex="0" linenr="423" column="42" str="num_open"/>
    <tok fileIndex="0" linenr="423" column="50" str="."/>
    <tok fileIndex="0" linenr="423" column="51" str="rlim_max"/>
    <tok fileIndex="0" linenr="423" column="59" str=")"/>
    <tok fileIndex="0" linenr="423" column="60" str=";"/>
    <tok fileIndex="0" linenr="424" column="5" str="msnprintf"/>
    <tok fileIndex="0" linenr="424" column="14" str="("/>
    <tok fileIndex="0" linenr="424" column="15" str="strbuff"/>
    <tok fileIndex="0" linenr="424" column="22" str=","/>
    <tok fileIndex="0" linenr="424" column="24" str="sizeof"/>
    <tok fileIndex="0" linenr="424" column="30" str="("/>
    <tok fileIndex="0" linenr="424" column="31" str="strbuff"/>
    <tok fileIndex="0" linenr="424" column="38" str=")"/>
    <tok fileIndex="0" linenr="424" column="39" str=","/>
    <tok fileIndex="0" linenr="424" column="41" str="&quot;fopen fails with %s fds open&quot;"/>
    <tok fileIndex="0" linenr="424" column="71" str=","/>
    <tok fileIndex="0" linenr="425" column="15" str="strbuff1"/>
    <tok fileIndex="0" linenr="425" column="23" str=")"/>
    <tok fileIndex="0" linenr="425" column="24" str=";"/>
    <tok fileIndex="0" linenr="426" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="426" column="12" str="("/>
    <tok fileIndex="0" linenr="426" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="426" column="19" str=","/>
    <tok fileIndex="0" linenr="426" column="21" str="&quot;%s\n&quot;"/>
    <tok fileIndex="0" linenr="426" column="27" str=","/>
    <tok fileIndex="0" linenr="426" column="29" str="msgbuff"/>
    <tok fileIndex="0" linenr="426" column="36" str=")"/>
    <tok fileIndex="0" linenr="426" column="37" str=";"/>
    <tok fileIndex="0" linenr="427" column="5" str="msnprintf"/>
    <tok fileIndex="0" linenr="427" column="14" str="("/>
    <tok fileIndex="0" linenr="427" column="15" str="strbuff"/>
    <tok fileIndex="0" linenr="427" column="22" str=","/>
    <tok fileIndex="0" linenr="427" column="24" str="sizeof"/>
    <tok fileIndex="0" linenr="427" column="30" str="("/>
    <tok fileIndex="0" linenr="427" column="31" str="strbuff"/>
    <tok fileIndex="0" linenr="427" column="38" str=")"/>
    <tok fileIndex="0" linenr="427" column="39" str=","/>
    <tok fileIndex="0" linenr="427" column="41" str="&quot;fopen fails with lots of fds open&quot;"/>
    <tok fileIndex="0" linenr="427" column="76" str=")"/>
    <tok fileIndex="0" linenr="427" column="77" str=";"/>
    <tok fileIndex="0" linenr="428" column="5" str="store_errmsg"/>
    <tok fileIndex="0" linenr="428" column="17" str="("/>
    <tok fileIndex="0" linenr="428" column="18" str="strbuff"/>
    <tok fileIndex="0" linenr="428" column="25" str=","/>
    <tok fileIndex="0" linenr="428" column="27" str="0"/>
    <tok fileIndex="0" linenr="428" column="28" str=")"/>
    <tok fileIndex="0" linenr="428" column="29" str=";"/>
    <tok fileIndex="0" linenr="429" column="5" str="close_file_descriptors"/>
    <tok fileIndex="0" linenr="429" column="27" str="("/>
    <tok fileIndex="0" linenr="429" column="28" str=")"/>
    <tok fileIndex="0" linenr="429" column="29" str=";"/>
    <tok fileIndex="0" linenr="430" column="5" str="free"/>
    <tok fileIndex="0" linenr="430" column="9" str="("/>
    <tok fileIndex="0" linenr="430" column="10" str="memchunk"/>
    <tok fileIndex="0" linenr="430" column="18" str=")"/>
    <tok fileIndex="0" linenr="430" column="19" str=";"/>
    <tok fileIndex="0" linenr="431" column="5" str="return"/>
    <tok fileIndex="0" linenr="431" column="12" str="-"/>
    <tok fileIndex="0" linenr="431" column="13" str="12"/>
    <tok fileIndex="0" linenr="431" column="15" str=";"/>
    <tok fileIndex="0" linenr="432" column="3" str="}"/>
    <tok fileIndex="0" linenr="434" column="3" str="/* free the chunk of memory we were reserving so that itx     becomes available to the test */"/>
    <tok fileIndex="0" linenr="437" column="3" str="free"/>
    <tok fileIndex="0" linenr="437" column="7" str="("/>
    <tok fileIndex="0" linenr="437" column="8" str="memchunk"/>
    <tok fileIndex="0" linenr="437" column="16" str=")"/>
    <tok fileIndex="0" linenr="437" column="17" str=";"/>
    <tok fileIndex="0" linenr="439" column="3" str="/* close file descriptors unless instructed to keep them */"/>
    <tok fileIndex="0" linenr="441" column="3" str="if"/>
    <tok fileIndex="0" linenr="441" column="5" str="("/>
    <tok fileIndex="0" linenr="441" column="6" str="!"/>
    <tok fileIndex="0" linenr="441" column="7" str="keep_open"/>
    <tok fileIndex="0" linenr="441" column="16" str=")"/>
    <tok fileIndex="0" linenr="441" column="18" str="{"/>
    <tok fileIndex="0" linenr="442" column="5" str="close_file_descriptors"/>
    <tok fileIndex="0" linenr="442" column="27" str="("/>
    <tok fileIndex="0" linenr="442" column="28" str=")"/>
    <tok fileIndex="0" linenr="442" column="29" str=";"/>
    <tok fileIndex="0" linenr="443" column="3" str="}"/>
    <tok fileIndex="0" linenr="445" column="3" str="return"/>
    <tok fileIndex="0" linenr="445" column="10" str="0"/>
    <tok fileIndex="0" linenr="445" column="11" str=";"/>
    <tok fileIndex="0" linenr="446" column="1" str="}"/>
    <tok fileIndex="0" linenr="448" column="1" str="CURLcode"/>
    <tok fileIndex="0" linenr="448" column="10" str="test"/>
    <tok fileIndex="0" linenr="448" column="14" str="("/>
    <tok fileIndex="0" linenr="448" column="15" str="char"/>
    <tok fileIndex="0" linenr="448" column="20" str="*"/>
    <tok fileIndex="0" linenr="448" column="21" str="URL"/>
    <tok fileIndex="0" linenr="448" column="24" str=")"/>
    <tok fileIndex="0" linenr="449" column="1" str="{"/>
    <tok fileIndex="0" linenr="450" column="3" str="CURLcode"/>
    <tok fileIndex="0" linenr="450" column="12" str="res"/>
    <tok fileIndex="0" linenr="450" column="15" str=";"/>
    <tok fileIndex="0" linenr="451" column="3" str="CURL"/>
    <tok fileIndex="0" linenr="451" column="8" str="*"/>
    <tok fileIndex="0" linenr="451" column="9" str="curl"/>
    <tok fileIndex="0" linenr="451" column="13" str=";"/>
    <tok fileIndex="0" linenr="453" column="3" str="if"/>
    <tok fileIndex="0" linenr="453" column="5" str="("/>
    <tok fileIndex="0" linenr="453" column="6" str="!"/>
    <tok fileIndex="0" linenr="453" column="7" str="strcmp"/>
    <tok fileIndex="0" linenr="453" column="13" str="("/>
    <tok fileIndex="0" linenr="453" column="14" str="URL"/>
    <tok fileIndex="0" linenr="453" column="17" str=","/>
    <tok fileIndex="0" linenr="453" column="19" str="&quot;check&quot;"/>
    <tok fileIndex="0" linenr="453" column="26" str=")"/>
    <tok fileIndex="0" linenr="453" column="27" str=")"/>
    <tok fileIndex="0" linenr="453" column="29" str="{"/>
    <tok fileIndex="0" linenr="454" column="5" str="/* used by the test script to ask if we can run this test or not */"/>
    <tok fileIndex="0" linenr="455" column="5" str="if"/>
    <tok fileIndex="0" linenr="455" column="7" str="("/>
    <tok fileIndex="0" linenr="455" column="8" str="test_rlimit"/>
    <tok fileIndex="0" linenr="455" column="19" str="("/>
    <tok fileIndex="0" linenr="455" column="20" str="FALSE"/>
    <tok fileIndex="0" linenr="455" column="25" str=")"/>
    <tok fileIndex="0" linenr="455" column="26" str=")"/>
    <tok fileIndex="0" linenr="455" column="28" str="{"/>
    <tok fileIndex="0" linenr="456" column="7" str="fprintf"/>
    <tok fileIndex="0" linenr="456" column="14" str="("/>
    <tok fileIndex="0" linenr="456" column="15" str="stdout"/>
    <tok fileIndex="0" linenr="456" column="21" str=","/>
    <tok fileIndex="0" linenr="456" column="23" str="&quot;test_rlimit problem: %s\n&quot;"/>
    <tok fileIndex="0" linenr="456" column="50" str=","/>
    <tok fileIndex="0" linenr="456" column="52" str="msgbuff"/>
    <tok fileIndex="0" linenr="456" column="59" str=")"/>
    <tok fileIndex="0" linenr="456" column="60" str=";"/>
    <tok fileIndex="0" linenr="457" column="7" str="return"/>
    <tok fileIndex="0" linenr="457" column="14" str="TEST_ERR_FAILURE"/>
    <tok fileIndex="0" linenr="457" column="30" str=";"/>
    <tok fileIndex="0" linenr="458" column="5" str="}"/>
    <tok fileIndex="0" linenr="459" column="5" str="return"/>
    <tok fileIndex="0" linenr="459" column="12" str="CURLE_OK"/>
    <tok fileIndex="0" linenr="459" column="20" str=";"/>
    <tok fileIndex="0" linenr="459" column="22" str="/* sure, run this! */"/>
    <tok fileIndex="0" linenr="460" column="3" str="}"/>
    <tok fileIndex="0" linenr="462" column="3" str="if"/>
    <tok fileIndex="0" linenr="462" column="5" str="("/>
    <tok fileIndex="0" linenr="462" column="6" str="test_rlimit"/>
    <tok fileIndex="0" linenr="462" column="17" str="("/>
    <tok fileIndex="0" linenr="462" column="18" str="TRUE"/>
    <tok fileIndex="0" linenr="462" column="22" str=")"/>
    <tok fileIndex="0" linenr="462" column="23" str=")"/>
    <tok fileIndex="0" linenr="462" column="25" str="{"/>
    <tok fileIndex="0" linenr="463" column="5" str="/* failure */"/>
    <tok fileIndex="0" linenr="464" column="5" str="return"/>
    <tok fileIndex="0" linenr="464" column="12" str="TEST_ERR_MAJOR_BAD"/>
    <tok fileIndex="0" linenr="464" column="30" str=";"/>
    <tok fileIndex="0" linenr="465" column="3" str="}"/>
    <tok fileIndex="0" linenr="467" column="3" str="/* run the test with the bunch of open file descriptorsx     and close them all once the test is over */"/>
    <tok fileIndex="0" linenr="470" column="3" str="if"/>
    <tok fileIndex="0" linenr="470" column="5" str="("/>
    <tok fileIndex="0" linenr="470" column="6" str="curl_global_init"/>
    <tok fileIndex="0" linenr="470" column="22" str="("/>
    <tok fileIndex="0" linenr="470" column="23" str="CURL_GLOBAL_ALL"/>
    <tok fileIndex="0" linenr="470" column="38" str=")"/>
    <tok fileIndex="0" linenr="470" column="40" str="!="/>
    <tok fileIndex="0" linenr="470" column="43" str="CURLE_OK"/>
    <tok fileIndex="0" linenr="470" column="51" str=")"/>
    <tok fileIndex="0" linenr="470" column="53" str="{"/>
    <tok fileIndex="0" linenr="471" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="471" column="12" str="("/>
    <tok fileIndex="0" linenr="471" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="471" column="19" str=","/>
    <tok fileIndex="0" linenr="471" column="21" str="&quot;curl_global_init() failed\n&quot;"/>
    <tok fileIndex="0" linenr="471" column="50" str=")"/>
    <tok fileIndex="0" linenr="471" column="51" str=";"/>
    <tok fileIndex="0" linenr="472" column="5" str="close_file_descriptors"/>
    <tok fileIndex="0" linenr="472" column="27" str="("/>
    <tok fileIndex="0" linenr="472" column="28" str=")"/>
    <tok fileIndex="0" linenr="472" column="29" str=";"/>
    <tok fileIndex="0" linenr="473" column="5" str="return"/>
    <tok fileIndex="0" linenr="473" column="12" str="TEST_ERR_MAJOR_BAD"/>
    <tok fileIndex="0" linenr="473" column="30" str=";"/>
    <tok fileIndex="0" linenr="474" column="3" str="}"/>
    <tok fileIndex="0" linenr="476" column="3" str="curl"/>
    <tok fileIndex="0" linenr="476" column="8" str="="/>
    <tok fileIndex="0" linenr="476" column="10" str="curl_easy_init"/>
    <tok fileIndex="0" linenr="476" column="24" str="("/>
    <tok fileIndex="0" linenr="476" column="25" str=")"/>
    <tok fileIndex="0" linenr="476" column="26" str=";"/>
    <tok fileIndex="0" linenr="477" column="3" str="if"/>
    <tok fileIndex="0" linenr="477" column="5" str="("/>
    <tok fileIndex="0" linenr="477" column="6" str="!"/>
    <tok fileIndex="0" linenr="477" column="7" str="curl"/>
    <tok fileIndex="0" linenr="477" column="11" str=")"/>
    <tok fileIndex="0" linenr="477" column="13" str="{"/>
    <tok fileIndex="0" linenr="478" column="5" str="fprintf"/>
    <tok fileIndex="0" linenr="478" column="12" str="("/>
    <tok fileIndex="0" linenr="478" column="13" str="stderr"/>
    <tok fileIndex="0" linenr="478" column="19" str=","/>
    <tok fileIndex="0" linenr="478" column="21" str="&quot;curl_easy_init() failed\n&quot;"/>
    <tok fileIndex="0" linenr="478" column="48" str=")"/>
    <tok fileIndex="0" linenr="478" column="49" str=";"/>
    <tok fileIndex="0" linenr="479" column="5" str="close_file_descriptors"/>
    <tok fileIndex="0" linenr="479" column="27" str="("/>
    <tok fileIndex="0" linenr="479" column="28" str=")"/>
    <tok fileIndex="0" linenr="479" column="29" str=";"/>
    <tok fileIndex="0" linenr="480" column="5" str="curl_global_cleanup"/>
    <tok fileIndex="0" linenr="480" column="24" str="("/>
    <tok fileIndex="0" linenr="480" column="25" str=")"/>
    <tok fileIndex="0" linenr="480" column="26" str=";"/>
    <tok fileIndex="0" linenr="481" column="5" str="return"/>
    <tok fileIndex="0" linenr="481" column="12" str="TEST_ERR_MAJOR_BAD"/>
    <tok fileIndex="0" linenr="481" column="30" str=";"/>
    <tok fileIndex="0" linenr="482" column="3" str="}"/>
    <tok fileIndex="0" linenr="484" column="3" str="test_setopt"/>
    <tok fileIndex="0" linenr="484" column="14" str="("/>
    <tok fileIndex="0" linenr="484" column="15" str="curl"/>
    <tok fileIndex="0" linenr="484" column="19" str=","/>
    <tok fileIndex="0" linenr="484" column="21" str="CURLOPT_URL"/>
    <tok fileIndex="0" linenr="484" column="32" str=","/>
    <tok fileIndex="0" linenr="484" column="34" str="URL"/>
    <tok fileIndex="0" linenr="484" column="37" str=")"/>
    <tok fileIndex="0" linenr="484" column="38" str=";"/>
    <tok fileIndex="0" linenr="485" column="3" str="test_setopt"/>
    <tok fileIndex="0" linenr="485" column="14" str="("/>
    <tok fileIndex="0" linenr="485" column="15" str="curl"/>
    <tok fileIndex="0" linenr="485" column="19" str=","/>
    <tok fileIndex="0" linenr="485" column="21" str="CURLOPT_HEADER"/>
    <tok fileIndex="0" linenr="485" column="35" str=","/>
    <tok fileIndex="0" linenr="485" column="37" str="1L"/>
    <tok fileIndex="0" linenr="485" column="39" str=")"/>
    <tok fileIndex="0" linenr="485" column="40" str=";"/>
    <tok fileIndex="0" linenr="487" column="3" str="res"/>
    <tok fileIndex="0" linenr="487" column="7" str="="/>
    <tok fileIndex="0" linenr="487" column="9" str="curl_easy_perform"/>
    <tok fileIndex="0" linenr="487" column="26" str="("/>
    <tok fileIndex="0" linenr="487" column="27" str="curl"/>
    <tok fileIndex="0" linenr="487" column="31" str=")"/>
    <tok fileIndex="0" linenr="487" column="32" str=";"/>
    <tok fileIndex="0" linenr="489" column="1" str="test_cleanup"/>
    <tok fileIndex="0" linenr="489" column="13" str=":"/>
    <tok fileIndex="0" linenr="491" column="3" str="close_file_descriptors"/>
    <tok fileIndex="0" linenr="491" column="25" str="("/>
    <tok fileIndex="0" linenr="491" column="26" str=")"/>
    <tok fileIndex="0" linenr="491" column="27" str=";"/>
    <tok fileIndex="0" linenr="492" column="3" str="curl_easy_cleanup"/>
    <tok fileIndex="0" linenr="492" column="20" str="("/>
    <tok fileIndex="0" linenr="492" column="21" str="curl"/>
    <tok fileIndex="0" linenr="492" column="25" str=")"/>
    <tok fileIndex="0" linenr="492" column="26" str=";"/>
    <tok fileIndex="0" linenr="493" column="3" str="curl_global_cleanup"/>
    <tok fileIndex="0" linenr="493" column="22" str="("/>
    <tok fileIndex="0" linenr="493" column="23" str=")"/>
    <tok fileIndex="0" linenr="493" column="24" str=";"/>
    <tok fileIndex="0" linenr="495" column="3" str="return"/>
    <tok fileIndex="0" linenr="495" column="10" str="res"/>
    <tok fileIndex="0" linenr="495" column="13" str=";"/>
    <tok fileIndex="0" linenr="496" column="1" str="}"/>
    <tok fileIndex="0" linenr="498" column="1" str="#"/>
    <tok fileIndex="0" linenr="498" column="2" str="else"/>
    <tok fileIndex="0" linenr="498" column="7" str="/* defined(HAVE_GETRLIMIT) &amp;&amp; defined(HAVE_SETRLIMIT) */"/>
    <tok fileIndex="0" linenr="500" column="1" str="CURLcode"/>
    <tok fileIndex="0" linenr="500" column="10" str="test"/>
    <tok fileIndex="0" linenr="500" column="14" str="("/>
    <tok fileIndex="0" linenr="500" column="15" str="char"/>
    <tok fileIndex="0" linenr="500" column="20" str="*"/>
    <tok fileIndex="0" linenr="500" column="21" str="URL"/>
    <tok fileIndex="0" linenr="500" column="24" str=")"/>
    <tok fileIndex="0" linenr="501" column="1" str="{"/>
    <tok fileIndex="0" linenr="502" column="3" str="("/>
    <tok fileIndex="0" linenr="502" column="4" str="void"/>
    <tok fileIndex="0" linenr="502" column="8" str=")"/>
    <tok fileIndex="0" linenr="502" column="9" str="URL"/>
    <tok fileIndex="0" linenr="502" column="12" str=";"/>
    <tok fileIndex="0" linenr="503" column="3" str="printf"/>
    <tok fileIndex="0" linenr="503" column="9" str="("/>
    <tok fileIndex="0" linenr="503" column="10" str="&quot;system lacks necessary system function(s)&quot;"/>
    <tok fileIndex="0" linenr="503" column="53" str=")"/>
    <tok fileIndex="0" linenr="503" column="54" str=";"/>
    <tok fileIndex="0" linenr="504" column="3" str="return"/>
    <tok fileIndex="0" linenr="504" column="10" str="1"/>
    <tok fileIndex="0" linenr="504" column="11" str=";"/>
    <tok fileIndex="0" linenr="504" column="13" str="/* skip test */"/>
    <tok fileIndex="0" linenr="505" column="1" str="}"/>
    <tok fileIndex="0" linenr="507" column="1" str="#"/>
    <tok fileIndex="0" linenr="507" column="2" str="endif"/>
    <tok fileIndex="0" linenr="507" column="8" str="/* defined(HAVE_GETRLIMIT) &amp;&amp; defined(HAVE_SETRLIMIT) */"/>
  </rawtokens>
  <suppressions>
  </suppressions>
<dump cfg="FD_SETSIZE">
  <standards>
    <c version="c11"/>
    <cpp version="c++23"/>
  </standards>
  <directivelist>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="24" str="#include &quot;test.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="26" str="#ifdef HAVE_SYS_RESOURCE_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="27" str="#include &lt;sys/resource.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="28" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="29" str="#ifdef HAVE_FCNTL_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="30" str="#include &lt;fcntl.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="31" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="32" str="#include &lt;limits.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="34" str="#include &quot;warnless.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="35" str="#include &quot;memdebug.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="37" str="#ifndef FD_SETSIZE"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="38" str="#error &quot;this test requires FD_SETSIZE&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="39" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="41" str="#define SAFETY_MARGIN (16)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="42" str="#define NUM_OPEN (FD_SETSIZE + 10)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="43" str="#define NUM_NEEDED (NUM_OPEN + SAFETY_MARGIN)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="45" str="#if defined(_WIN32) || defined(MSDOS)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="46" str="#define DEV_NULL &quot;NUL&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="47" str="#else"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="48" str="#define DEV_NULL &quot;/dev/null&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="49" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="51" str="#if defined(HAVE_GETRLIMIT) &amp;&amp; defined(HAVE_SETRLIMIT)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="104" str="#ifdef RLIM_INFINITY"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="109" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="110" str="#ifdef HAVE_LONGLONG"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="114" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="165" str="#ifdef OPEN_MAX"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="177" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="224" str="#ifdef RLIM_INFINITY"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="226" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="371" str="#if !defined(HAVE_POLL) &amp;&amp; !defined(USE_WINSOCK)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="411" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="498" str="#else"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="507" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="1" str="#ifndef HEADER_CURL_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="2" str="#define HEADER_CURL_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="32" str="#define CURL_NO_OLDIES"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="34" str="#include &quot;curl_setup.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="36" str="#include &lt;curl/curl.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="38" str="#ifdef HAVE_SYS_SELECT_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="40" str="#include &lt;sys/select.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="41" str="#elif defined(HAVE_UNISTD_H)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="42" str="#include &lt;unistd.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="43" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="45" str="#include &quot;curl_printf.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="49" str="#if (defined(__GNUC__) &amp;&amp; ((__GNUC__ &gt; 4) || ((__GNUC__ == 4) &amp;&amp; (__GNUC_MINOR__ &gt;= 6))))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="51" str="#define CURL_GNUC_DIAG"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="52" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="54" str="#ifdef _WIN32"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="55" str="#define sleep(sec) Sleep((sec)*1000)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="56" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="58" str="#define test_setopt(A,B,C) if((res = curl_easy_setopt((A), (B), (C))) != CURLE_OK) goto test_cleanup"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="62" str="#define test_multi_setopt(A,B,C) if((res = curl_multi_setopt((A), (B), (C))) != CURLE_OK) goto test_cleanup"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="81" str="#ifndef CURLTESTS_BUNDLED_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="84" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="99" str="#define TEST_ERR_MAJOR_BAD CURLE_RESERVED126"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="100" str="#define TEST_ERR_RUNS_FOREVER CURLE_RESERVED125"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="101" str="#define TEST_ERR_EASY_INIT CURLE_RESERVED124"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="102" str="#define TEST_ERR_MULTI CURLE_RESERVED123"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="103" str="#define TEST_ERR_NUM_HANDLES CURLE_RESERVED122"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="104" str="#define TEST_ERR_SELECT CURLE_RESERVED121"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="105" str="#define TEST_ERR_SUCCESS CURLE_RESERVED120"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="106" str="#define TEST_ERR_FAILURE CURLE_RESERVED119"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="107" str="#define TEST_ERR_USAGE CURLE_RESERVED118"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="108" str="#define TEST_ERR_FOPEN CURLE_RESERVED117"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="109" str="#define TEST_ERR_FSTAT CURLE_RESERVED116"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="110" str="#define TEST_ERR_BAD_TIMEOUT CURLE_RESERVED115"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="143" str="#define exe_easy_init(A,Y,Z) do { if(((A) = curl_easy_init()) == NULL) { fprintf(stderr, &quot;%s:%d curl_easy_init() failed\n&quot;, (Y), (Z)); res = TEST_ERR_EASY_INIT; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="150" str="#define res_easy_init(A) exe_easy_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="153" str="#define chk_easy_init(A,Y,Z) do { exe_easy_init((A), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="159" str="#define easy_init(A) chk_easy_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="164" str="#define exe_multi_init(A,Y,Z) do { if(((A) = curl_multi_init()) == NULL) { fprintf(stderr, &quot;%s:%d curl_multi_init() failed\n&quot;, (Y), (Z)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="171" str="#define res_multi_init(A) exe_multi_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="174" str="#define chk_multi_init(A,Y,Z) do { exe_multi_init((A), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="180" str="#define multi_init(A) chk_multi_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="185" str="#define exe_easy_setopt(A,B,C,Y,Z) do { CURLcode ec; if((ec = curl_easy_setopt((A), (B), (C))) != CURLE_OK) { fprintf(stderr, &quot;%s:%d curl_easy_setopt() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_easy_strerror(ec)); res = ec; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="195" str="#define res_easy_setopt(A, B, C) exe_easy_setopt((A), (B), (C), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="198" str="#define chk_easy_setopt(A, B, C, Y, Z) do { exe_easy_setopt((A), (B), (C), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="204" str="#define easy_setopt(A, B, C) chk_easy_setopt((A), (B), (C), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="209" str="#define exe_multi_setopt(A, B, C, Y, Z) do { CURLMcode ec; if((ec = curl_multi_setopt((A), (B), (C))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_setopt() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="219" str="#define res_multi_setopt(A,B,C) exe_multi_setopt((A), (B), (C), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="222" str="#define chk_multi_setopt(A,B,C,Y,Z) do { exe_multi_setopt((A), (B), (C), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="228" str="#define multi_setopt(A,B,C) chk_multi_setopt((A), (B), (C), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="233" str="#define exe_multi_add_handle(A,B,Y,Z) do { CURLMcode ec; if((ec = curl_multi_add_handle((A), (B))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_add_handle() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="243" str="#define res_multi_add_handle(A, B) exe_multi_add_handle((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="246" str="#define chk_multi_add_handle(A, B, Y, Z) do { exe_multi_add_handle((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="252" str="#define multi_add_handle(A, B) chk_multi_add_handle((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="257" str="#define exe_multi_remove_handle(A,B,Y,Z) do { CURLMcode ec; if((ec = curl_multi_remove_handle((A), (B))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_remove_handle() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="267" str="#define res_multi_remove_handle(A, B) exe_multi_remove_handle((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="270" str="#define chk_multi_remove_handle(A, B, Y, Z) do { exe_multi_remove_handle((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="277" str="#define multi_remove_handle(A, B) chk_multi_remove_handle((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="282" str="#define exe_multi_perform(A,B,Y,Z) do { CURLMcode ec; if((ec = curl_multi_perform((A), (B))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_perform() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } else if(*((B)) &lt; 0) { fprintf(stderr, &quot;%s:%d curl_multi_perform() succeeded, &quot; &quot;but returned invalid running_handles value (%d)\n&quot;, (Y), (Z), (int)*((B))); res = TEST_ERR_NUM_HANDLES; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="298" str="#define res_multi_perform(A, B) exe_multi_perform((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="301" str="#define chk_multi_perform(A, B, Y, Z) do { exe_multi_perform((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="307" str="#define multi_perform(A,B) chk_multi_perform((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="312" str="#define exe_multi_fdset(A, B, C, D, E, Y, Z) do { CURLMcode ec; if((ec = curl_multi_fdset((A), (B), (C), (D), (E))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_fdset() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } else if(*((E)) &lt; -1) { fprintf(stderr, &quot;%s:%d curl_multi_fdset() succeeded, &quot; &quot;but returned invalid max_fd value (%d)\n&quot;, (Y), (Z), (int)*((E))); res = TEST_ERR_NUM_HANDLES; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="328" str="#define res_multi_fdset(A, B, C, D, E) exe_multi_fdset((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="331" str="#define chk_multi_fdset(A, B, C, D, E, Y, Z) do { exe_multi_fdset((A), (B), (C), (D), (E), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="337" str="#define multi_fdset(A, B, C, D, E) chk_multi_fdset((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="342" str="#define exe_multi_timeout(A,B,Y,Z) do { CURLMcode ec; if((ec = curl_multi_timeout((A), (B))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_timeout() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_BAD_TIMEOUT; } else if(*((B)) &lt; -1L) { fprintf(stderr, &quot;%s:%d curl_multi_timeout() succeeded, &quot; &quot;but returned invalid timeout value (%ld)\n&quot;, (Y), (Z), (long)*((B))); res = TEST_ERR_BAD_TIMEOUT; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="358" str="#define res_multi_timeout(A, B) exe_multi_timeout((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="361" str="#define chk_multi_timeout(A, B, Y, Z) do { exe_multi_timeout((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="367" str="#define multi_timeout(A, B) chk_multi_timeout((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="372" str="#define exe_multi_poll(A,B,C,D,E,Y,Z) do { CURLMcode ec; if((ec = curl_multi_poll((A), (B), (C), (D), (E))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_poll() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } else if(*((E)) &lt; 0) { fprintf(stderr, &quot;%s:%d curl_multi_poll() succeeded, &quot; &quot;but returned invalid numfds value (%d)\n&quot;, (Y), (Z), (int)*((E))); res = TEST_ERR_NUM_HANDLES; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="388" str="#define res_multi_poll(A, B, C, D, E) exe_multi_poll((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="391" str="#define chk_multi_poll(A, B, C, D, E, Y, Z) do { exe_multi_poll((A), (B), (C), (D), (E), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="397" str="#define multi_poll(A, B, C, D, E) chk_multi_poll((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="402" str="#define exe_multi_wakeup(A,Y,Z) do { CURLMcode ec; if((ec = curl_multi_wakeup((A))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_wakeup() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="412" str="#define res_multi_wakeup(A) exe_multi_wakeup((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="415" str="#define chk_multi_wakeup(A, Y, Z) do { exe_multi_wakeup((A), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="421" str="#define multi_wakeup(A) chk_multi_wakeup((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="426" str="#define exe_select_test(A, B, C, D, E, Y, Z) do { int ec; if(select_wrapper((A), (B), (C), (D), (E)) == -1) { ec = SOCKERRNO; fprintf(stderr, &quot;%s:%d select() failed, with &quot; &quot;errno %d (%s)\n&quot;, (Y), (Z), ec, strerror(ec)); res = TEST_ERR_SELECT; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="437" str="#define res_select_test(A, B, C, D, E) exe_select_test((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="440" str="#define chk_select_test(A, B, C, D, E, Y, Z) do { exe_select_test((A), (B), (C), (D), (E), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="446" str="#define select_test(A, B, C, D, E) chk_select_test((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="451" str="#define start_test_timing() do { tv_test_start = tutil_tvnow(); } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="455" str="#define exe_test_timedout(Y,Z) do { long timediff = tutil_tvdiff(tutil_tvnow(), tv_test_start); if(timediff &gt; (TEST_HANG_TIMEOUT)) { fprintf(stderr, &quot;%s:%d ABORTING TEST, since it seems &quot; &quot;that it would have run forever (%ld ms &gt; %ld ms)\n&quot;, (Y), (Z), timediff, (long) (TEST_HANG_TIMEOUT)); res = TEST_ERR_RUNS_FOREVER; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="465" str="#define res_test_timedout() exe_test_timedout((__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="468" str="#define chk_test_timedout(Y, Z) do { exe_test_timedout(Y, Z); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="474" str="#define abort_on_test_timeout() chk_test_timedout((__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="479" str="#define exe_global_init(A,Y,Z) do { CURLcode ec; if((ec = curl_global_init((A))) != CURLE_OK) { fprintf(stderr, &quot;%s:%d curl_global_init() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_easy_strerror(ec)); res = ec; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="489" str="#define res_global_init(A) exe_global_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="492" str="#define chk_global_init(A, Y, Z) do { exe_global_init((A), (Y), (Z)); if(res) return res; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="501" str="#define global_init(A) chk_global_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="504" str="#ifndef CURLTESTS_BUNDLED_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="505" str="#define NO_SUPPORT_BUILT_IN CURLcode test(char *URL) { (void)URL; fprintf(stderr, &quot;Missing support\n&quot;); return CURLE_UNSUPPORTED_PROTOCOL; }"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="512" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="516" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="518" str="#ifdef CURLTESTS_BUNDLED_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="522" str="#undef NO_SUPPORT_BUILT_IN"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="523" str="#define NO_SUPPORT_BUILT_IN CURLcode test(char *URL) { (void)URL; fprintf(stderr, &quot;Missing support\n&quot;); return CURLE_UNSUPPORTED_PROTOCOL; }"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="530" str="#endif"/>
  </directivelist>
  <macro-usage>
    <macro name="FD_SETSIZE" file="" line="1" column="1" usefile="C:/test_workspace/curl-master/tests/libtest/lib518.c" useline="37" usecolumn="9" is-known-value="false"/>
    <macro name="HEADER_CURL_TEST_H" file="C:/test_workspace/curl-master/tests/libtest/test.h" line="2" column="9" usefile="C:/test_workspace/curl-master/tests/libtest/test.h" useline="1" usecolumn="9" is-known-value="true"/>
  </macro-usage>
  <simplecpp-if-cond>
    <if-cond file="C:/test_workspace/curl-master/tests/libtest/test.h" line="41" column="2" E="0" result="0"/>
    <if-cond file="C:/test_workspace/curl-master/tests/libtest/test.h" line="49" column="2" E="( 0 &amp;&amp; ( ( __GNUC__ &gt; 4 ) || ( ( __GNUC__ == 4 ) &amp;&amp; ( __GNUC_MINOR__ &gt;= 6 ) ) ) )" result="0"/>
    <if-cond file="C:/test_workspace/curl-master/tests/libtest/lib518.c" line="45" column="2" E="0 || 0" result="0"/>
    <if-cond file="C:/test_workspace/curl-master/tests/libtest/lib518.c" line="51" column="2" E="0 &amp;&amp; 0" result="0"/>
  </simplecpp-if-cond>
  <tokenlist>
    <token id="157797ed350" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="1" str="extern" scope="1575825a1c0" type="name"/>
    <token id="157797ee250" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="8" str="char" scope="1575825a1c0" type="name" astParent="157797ed590"/>
    <token id="157797ed590" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="13" str="*" scope="1575825a1c0" type="op" isArithmeticalOp="true" astOperand1="157797ee250" astOperand2="157797ed2f0"/>
    <token id="157797ed2f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="14" str="libtest_arg2" scope="1575825a1c0" type="name" varId="1" exprId="1" variable="15772b14df0" astParent="157797ed590" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797ed3b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="26" str=";" scope="1575825a1c0"/>
    <token id="157797ee070" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="1" str="extern" scope="1575825a1c0" type="name"/>
    <token id="157797ed5f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="8" str="char" scope="1575825a1c0" type="name" astParent="157797ee490"/>
    <token id="157797ee490" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="13" str="*" scope="1575825a1c0" type="op" isArithmeticalOp="true" astOperand1="157797ed5f0" astOperand2="157797ee3d0"/>
    <token id="157797ee3d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="14" str="libtest_arg3" scope="1575825a1c0" type="name" varId="2" exprId="2" variable="15772b15c60" astParent="157797ee490" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797ed7d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="26" str=";" scope="1575825a1c0"/>
    <token id="157797ed170" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="1" str="extern" scope="1575825a1c0" type="name"/>
    <token id="157797ee4f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="8" str="char" scope="1575825a1c0" type="name" astParent="157797ee850"/>
    <token id="157797ee850" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="13" str="*" scope="1575825a1c0" type="op" isArithmeticalOp="true" astOperand1="157797ee4f0" astOperand2="157797ed650"/>
    <token id="157797ed650" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="14" str="libtest_arg4" scope="1575825a1c0" type="name" varId="3" exprId="3" variable="15772b14ed0" astParent="157797ee850" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797ed9b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="26" str=";" scope="1575825a1c0"/>
    <token id="157797ee130" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="71" column="1" str="extern" scope="1575825a1c0" type="name"/>
    <token id="157797ee550" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="71" column="8" str="int" scope="1575825a1c0" type="name"/>
    <token id="157797edb90" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="71" column="12" str="test_argc" scope="1575825a1c0" type="name" varId="4" exprId="4" variable="15772b15020" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797ee5b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="71" column="21" str=";" scope="1575825a1c0"/>
    <token id="157797ee2b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="1" str="extern" scope="1575825a1c0" type="name"/>
    <token id="157797ee310" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="8" str="char" scope="1575825a1c0" type="name" astParent="157797ed1d0"/>
    <token id="157797ed1d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="13" str="*" scope="1575825a1c0" type="op" isArithmeticalOp="true" astOperand1="157797ee310" astOperand2="157797ee610"/>
    <token id="157797ee610" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="14" str="*" scope="1575825a1c0" type="op" isArithmeticalOp="true" astParent="157797ed1d0" astOperand1="157797ed890" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797ed890" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="15" str="test_argv" scope="1575825a1c0" type="name" varId="5" exprId="5" variable="15772b15170" astParent="157797ee610" valueType-type="char" valueType-pointer="2" valueType-reference="None"/>
    <token id="157797ee670" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="24" str=";" scope="1575825a1c0"/>
    <token id="157797eddd0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="1" str="extern" scope="1575825a1c0" type="name"/>
    <token id="157797eda70" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="8" str="struct" scope="1575825a1c0" type="name"/>
    <token id="157797ed410" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="15" str="timeval" scope="1575825a1c0" type="name"/>
    <token id="157797ed110" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="23" str="tv_test_start" scope="1575825a1c0" type="name" varId="6" exprId="6" variable="15772b14b50" valueType-type="record" valueType-reference="None"/>
    <token id="157797ed830" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="36" str=";" scope="1575825a1c0"/>
    <token id="157797ed770" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="1" str="extern" scope="1575825a1c0" type="name"/>
    <token id="157797ee190" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="8" str="int" scope="1575825a1c0" type="name"/>
    <token id="157797edad0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="12" str="select_wrapper" scope="1575825a1c0" type="name" function="15767ba9bb0"/>
    <token id="157797edc50" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="26" str="(" scope="1575825a1c0" link="157797efe10" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797edd70" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="27" str="int" scope="1575825a1c0" type="name"/>
    <token id="157797edb30" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="31" str="nfds" scope="1575825a1c0" type="name" varId="7" exprId="7" variable="15772b14370" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797ee6d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="35" str="," scope="1575825a1c0"/>
    <token id="157797ed8f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="37" str="fd_set" scope="1575825a1c0" type="name" astParent="157797ed470"/>
    <token id="157797ed470" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="44" str="*" scope="1575825a1c0" type="op" isArithmeticalOp="true" astParent="157797ed950" astOperand1="157797ed8f0" astOperand2="157797ee8b0"/>
    <token id="157797ee8b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="45" str="rd" scope="1575825a1c0" type="name" varId="8" exprId="8" variable="15772b14920" astParent="157797ed470"/>
    <token id="157797ed950" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="47" str="," scope="1575825a1c0" astParent="157797edd10" astOperand1="157797ed470" astOperand2="157797ee1f0"/>
    <token id="157797edbf0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="49" str="fd_set" scope="1575825a1c0" type="name" astParent="157797ee1f0"/>
    <token id="157797ee1f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="56" str="*" scope="1575825a1c0" type="op" isArithmeticalOp="true" astParent="157797ed950" astOperand1="157797edbf0" astOperand2="157797edcb0"/>
    <token id="157797edcb0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="57" str="wr" scope="1575825a1c0" type="name" varId="9" exprId="9" variable="15772b143e0" astParent="157797ee1f0"/>
    <token id="157797edd10" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="59" str="," scope="1575825a1c0" astParent="157797ef3f0" astOperand1="157797ed950" astOperand2="157797eef70"/>
    <token id="157797ef450" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="61" str="fd_set" scope="1575825a1c0" type="name" astParent="157797eef70"/>
    <token id="157797eef70" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="68" str="*" scope="1575825a1c0" type="op" isArithmeticalOp="true" astParent="157797edd10" astOperand1="157797ef450" astOperand2="157797eff30"/>
    <token id="157797eff30" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="69" str="exc" scope="1575825a1c0" type="name" varId="10" exprId="10" variable="15772b14450" astParent="157797eef70"/>
    <token id="157797ef3f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="72" str="," scope="1575825a1c0" astOperand1="157797edd10" astOperand2="157797ef930"/>
    <token id="157797ef5d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="27" str="struct" scope="1575825a1c0" type="name"/>
    <token id="157797ef6f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="34" str="timeval" scope="1575825a1c0" type="name" astParent="157797ef930"/>
    <token id="157797ef930" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="42" str="*" scope="1575825a1c0" type="op" isArithmeticalOp="true" astParent="157797ef3f0" astOperand1="157797ef6f0" astOperand2="157797efc90"/>
    <token id="157797efc90" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="43" str="tv" scope="1575825a1c0" type="name" varId="11" exprId="11" variable="15772b144c0" astParent="157797ef930" valueType-type="record" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797efe10" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="45" str=")" scope="1575825a1c0" link="157797edc50"/>
    <token id="157797f0050" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="46" str=";" scope="1575825a1c0"/>
    <token id="157797eff90" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="1" str="extern" scope="1575825a1c0" type="name"/>
    <token id="157797ef810" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="8" str="void" scope="1575825a1c0" type="name"/>
    <token id="157797eecd0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="13" str="wait_ms" scope="1575825a1c0" type="name" function="15767ba9890"/>
    <token id="157797ef270" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="20" str="(" scope="1575825a1c0" link="157797f00b0" valueType-type="void" valueType-reference="None"/>
    <token id="157797ef690" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="21" str="int" scope="1575825a1c0" type="name"/>
    <token id="157797efb70" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="25" str="ms" scope="1575825a1c0" type="name" varId="12" exprId="12" variable="15772b14530" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f00b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="27" str=")" scope="1575825a1c0" link="157797ef270"/>
    <token id="157797ef570" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="28" str=";" scope="1575825a1c0"/>
    <token id="157797ef990" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="1" str="extern" scope="1575825a1c0" type="name"/>
    <token id="157797ef510" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="8" str="CURLcode" scope="1575825a1c0" type="name"/>
    <token id="157797eef10" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="17" str="test" scope="1575825a1c0" type="name" function="15767ba7ef0"/>
    <token id="157797efcf0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="21" str="(" scope="1575825a1c0" link="157797ee970"/>
    <token id="157797eea30" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="22" str="char" scope="1575825a1c0" type="name" astParent="157797ee910"/>
    <token id="157797ee910" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="27" str="*" scope="1575825a1c0" type="op" isArithmeticalOp="true" astOperand1="157797eea30" astOperand2="157797efff0"/>
    <token id="157797efff0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="28" str="URL" scope="1575825a1c0" type="name" varId="13" exprId="13" astParent="157797ee910"/>
    <token id="157797ee970" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="31" str=")" scope="1575825a1c0" link="157797efcf0"/>
    <token id="157797efd50" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="32" str=";" scope="1575825a1c0"/>
    <token id="157797eefd0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="1" str="extern" scope="1575825a1c0" type="name"/>
    <token id="157797efbd0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="8" str="char" scope="1575825a1c0" type="name"/>
    <token id="157797eeeb0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="13" str="*" scope="1575825a1c0" type="op" isArithmeticalOp="true"/>
    <token id="157797efc30" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="14" str="hexdump" scope="1575825a1c0" type="name" function="15767ba7b30"/>
    <token id="157797ef2d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="21" str="(" scope="1575825a1c0" link="157797ef7b0" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797efdb0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="22" str="const" scope="1575825a1c0" type="name"/>
    <token id="157797ee9d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="37" str="char" scope="1575825a1c0" type="name" isUnsigned="true" astParent="157797eea90"/>
    <token id="157797eea90" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="42" str="*" scope="1575825a1c0" type="op" isArithmeticalOp="true" astParent="157797ef330" astOperand1="157797ee9d0" astOperand2="157797ef8d0"/>
    <token id="157797ef8d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="43" str="buffer" scope="1575825a1c0" type="name" varId="14" exprId="14" variable="15772b146f0" astParent="157797eea90" valueType-type="char" valueType-sign="unsigned" valueType-pointer="1" valueType-constness="1" valueType-reference="None"/>
    <token id="157797ef330" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="49" str="," scope="1575825a1c0" values="1574799d990" astOperand1="157797eea90" astOperand2="157797ef4b0"/>
    <token id="157797eeaf0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="51" str="long" scope="1575825a1c0" type="name" isUnsigned="true" originalName="size_t"/>
    <token id="157797ef4b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="58" str="len" scope="1575825a1c0" type="name" varId="15" exprId="15" variable="15772b16050" values="1574799dbf0" astParent="157797ef330" valueType-type="long long" valueType-sign="unsigned" valueType-reference="None" valueType-originalTypeName="size_t"/>
    <token id="157797ef7b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="61" str=")" scope="1575825a1c0" link="157797ef2d0"/>
    <token id="157797ef870" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="62" str=";" scope="1575825a1c0"/>
    <token id="157797ef090" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="88" column="1" str="extern" scope="1575825a1c0" type="name"/>
    <token id="157797eeb50" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="88" column="8" str="int" scope="1575825a1c0" type="name"/>
    <token id="157797ef630" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="88" column="12" str="unitfail" scope="1575825a1c0" type="name" varId="16" exprId="16" variable="15772b14290" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797efe70" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="88" column="20" str=";" scope="1575825a1c0"/>
    <token id="157797eec10" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="1" str="CURLcode" scope="1575825a1c0" type="name"/>
    <token id="157797eebb0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="10" str="test" scope="1575825a1c0" type="name" function="15767ba7ef0"/>
    <token id="157797eec70" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="14" str="(" scope="1575825a1c0" link="157797efed0"/>
    <token id="157797eed30" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="15" str="char" scope="1575825a1c0" type="name" astParent="157797ef9f0"/>
    <token id="157797ef9f0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="20" str="*" scope="1575825a1c0" type="op" isArithmeticalOp="true" astOperand1="157797eed30" astOperand2="157797eed90"/>
    <token id="157797eed90" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="21" str="URL" scope="1575825a1c0" type="name" varId="17" exprId="17" variable="15772b145a0" astParent="157797ef9f0" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797efed0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="24" str=")" scope="1575825a1c0" link="157797eec70"/>
    <token id="157797eedf0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="501" column="1" str="{" scope="1575825abc0" link="157797f1190"/>
    <token id="157797ef750" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="3" str="(" scope="1575825abc0" isCast="true" link="157797efa50" exprId="1073741842" astOperand1="157797efab0" valueType-type="void" valueType-reference="None"/>
    <token id="157797eee50" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="4" str="void" scope="1575825abc0" type="name"/>
    <token id="157797efa50" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="8" str=")" scope="1575825abc0" link="157797ef750"/>
    <token id="157797efab0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="9" str="URL" scope="1575825abc0" type="name" varId="17" exprId="17" variable="15772b145a0" astParent="157797ef750" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797efb10" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="12" str=";" scope="1575825abc0"/>
    <token id="157797ef030" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="3" str="printf" scope="1575825abc0" type="name" astParent="157797ef0f0"/>
    <token id="157797ef0f0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="9" str="(" scope="1575825abc0" link="157797ef1b0" exprId="1073741843" astOperand1="157797ef030" astOperand2="157797ef150" valueType-type="int" valueType-sign="signed" valueType-reference="None" valueType-originalTypeName="int"/>
    <token id="157797ef150" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="10" str="&quot;system lacks necessary system function(s)&quot;" scope="1575825abc0" type="string" strlen="41" values="1574799d170" astParent="157797ef0f0" valueType-type="char" valueType-pointer="1" valueType-constness="1" valueType-reference="None"/>
    <token id="157797ef1b0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="53" str=")" scope="1575825abc0" link="157797ef0f0"/>
    <token id="157797ef210" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="54" str=";" scope="1575825abc0"/>
    <token id="157797f08f0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="504" column="3" str="return" scope="1575825abc0" type="name" astOperand1="157797f0bf0"/>
    <token id="157797f0bf0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="504" column="10" str="1" scope="1575825abc0" type="number" isInt="true" values="1574799d430" astParent="157797f08f0" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f02f0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="504" column="11" str=";" scope="1575825abc0"/>
    <token id="157797f1190" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="505" column="1" str="}" scope="1575825abc0" link="157797eedf0"/>
  </tokenlist>
  <scopes>
    <scope id="1575825a1c0" type="Global">
      <functionList>
        <function id="15767ba9bb0" token="0" tokenDef="157797edad0" name="select_wrapper" type="Function" access="Public">
          <arg nr="1" variable="15772b14370"/>
          <arg nr="2" variable="15772b14920"/>
          <arg nr="3" variable="15772b143e0"/>
          <arg nr="4" variable="15772b14450"/>
          <arg nr="5" variable="15772b144c0"/>
        </function>
        <function id="15767ba9890" token="0" tokenDef="157797eecd0" name="wait_ms" type="Function" access="Public">
          <arg nr="1" variable="15772b14530"/>
        </function>
        <function id="15767ba7ef0" token="157797eebb0" tokenDef="157797eef10" name="test" type="Function" access="Public">
          <arg nr="1" variable="15772b145a0"/>
        </function>
        <function id="15767ba7b30" token="0" tokenDef="157797efc30" name="hexdump" type="Function" access="Public">
          <arg nr="1" variable="15772b146f0"/>
          <arg nr="2" variable="15772b16050"/>
        </function>
      </functionList>
      <varlist>
        <var id="15772b14df0"/>
        <var id="15772b15c60"/>
        <var id="15772b14ed0"/>
        <var id="15772b15020"/>
        <var id="15772b15170"/>
        <var id="15772b14b50"/>
        <var id="15772b14290"/>
      </varlist>
    </scope>
    <scope id="1575825abc0" type="Function" className="test" bodyStart="157797eedf0" bodyEnd="157797f1190" nestedIn="1575825a1c0" function="15767ba7ef0"/>
  </scopes>
  <variables>
    <var id="15772b14290" nameToken="157797ef630" typeStartToken="157797eeb50" typeEndToken="157797eeb50" access="Global" scope="1575825a1c0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14370" nameToken="157797edb30" typeStartToken="157797edd70" typeEndToken="157797edd70" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b143e0" nameToken="157797edcb0" typeStartToken="157797edbf0" typeEndToken="157797ee1f0" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14450" nameToken="157797eff30" typeStartToken="157797ef450" typeEndToken="157797eef70" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b144c0" nameToken="157797efc90" typeStartToken="157797ef6f0" typeEndToken="157797ef930" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14530" nameToken="157797efb70" typeStartToken="157797ef690" typeEndToken="157797ef690" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b145a0" nameToken="157797eed90" typeStartToken="157797eed30" typeEndToken="157797ef9f0" access="Argument" scope="1575825abc0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b146f0" nameToken="157797ef8d0" typeStartToken="157797ee9d0" typeEndToken="157797eea90" access="Argument" scope="0" constness="1" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14920" nameToken="157797ee8b0" typeStartToken="157797ed8f0" typeEndToken="157797ed470" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14b50" nameToken="157797ed110" typeStartToken="157797ed410" typeEndToken="157797ed410" access="Global" scope="1575825a1c0" constness="0" isArray="false" isClass="true" isConst="false" isExtern="true" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14df0" nameToken="157797ed2f0" typeStartToken="157797ee250" typeEndToken="157797ed590" access="Global" scope="1575825a1c0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14ed0" nameToken="157797ed650" typeStartToken="157797ee4f0" typeEndToken="157797ee850" access="Global" scope="1575825a1c0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b15020" nameToken="157797edb90" typeStartToken="157797ee550" typeEndToken="157797ee550" access="Global" scope="1575825a1c0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b15170" nameToken="157797ed890" typeStartToken="157797ee310" typeEndToken="157797ee610" access="Global" scope="1575825a1c0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b15c60" nameToken="157797ee3d0" typeStartToken="157797ed5f0" typeEndToken="157797ee490" access="Global" scope="1575825a1c0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b16050" nameToken="157797ef4b0" typeStartToken="157797eeaf0" typeEndToken="157797eeaf0" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
  </variables>
  <valueflow>
    <values id="1574799d990">
      <value intvalue="-1" bound="Upper" impossible="true" path="0"/>
    </values>
    <values id="1574799dbf0">
      <value intvalue="18446744073709551615" bound="Upper" impossible="true" path="0"/>
    </values>
    <values id="1574799d170">
      <value tokvalue="157797ef150" bound="Point" known="true" path="0"/>
    </values>
    <values id="1574799d430">
      <value intvalue="1" bound="Point" known="true" path="0"/>
    </values>
  </valueflow>
</dump>
<dump cfg="HAVE_FCNTL_H;FD_SETSIZE">
  <standards>
    <c version="c11"/>
    <cpp version="c++23"/>
  </standards>
  <directivelist>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="24" str="#include &quot;test.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="26" str="#ifdef HAVE_SYS_RESOURCE_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="27" str="#include &lt;sys/resource.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="28" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="29" str="#ifdef HAVE_FCNTL_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="30" str="#include &lt;fcntl.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="31" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="32" str="#include &lt;limits.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="34" str="#include &quot;warnless.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="35" str="#include &quot;memdebug.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="37" str="#ifndef FD_SETSIZE"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="38" str="#error &quot;this test requires FD_SETSIZE&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="39" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="41" str="#define SAFETY_MARGIN (16)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="42" str="#define NUM_OPEN (FD_SETSIZE + 10)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="43" str="#define NUM_NEEDED (NUM_OPEN + SAFETY_MARGIN)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="45" str="#if defined(_WIN32) || defined(MSDOS)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="46" str="#define DEV_NULL &quot;NUL&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="47" str="#else"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="48" str="#define DEV_NULL &quot;/dev/null&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="49" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="51" str="#if defined(HAVE_GETRLIMIT) &amp;&amp; defined(HAVE_SETRLIMIT)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="104" str="#ifdef RLIM_INFINITY"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="109" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="110" str="#ifdef HAVE_LONGLONG"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="114" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="165" str="#ifdef OPEN_MAX"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="177" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="224" str="#ifdef RLIM_INFINITY"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="226" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="371" str="#if !defined(HAVE_POLL) &amp;&amp; !defined(USE_WINSOCK)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="411" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="498" str="#else"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="507" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="1" str="#ifndef HEADER_CURL_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="2" str="#define HEADER_CURL_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="32" str="#define CURL_NO_OLDIES"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="34" str="#include &quot;curl_setup.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="36" str="#include &lt;curl/curl.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="38" str="#ifdef HAVE_SYS_SELECT_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="40" str="#include &lt;sys/select.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="41" str="#elif defined(HAVE_UNISTD_H)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="42" str="#include &lt;unistd.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="43" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="45" str="#include &quot;curl_printf.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="49" str="#if (defined(__GNUC__) &amp;&amp; ((__GNUC__ &gt; 4) || ((__GNUC__ == 4) &amp;&amp; (__GNUC_MINOR__ &gt;= 6))))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="51" str="#define CURL_GNUC_DIAG"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="52" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="54" str="#ifdef _WIN32"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="55" str="#define sleep(sec) Sleep((sec)*1000)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="56" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="58" str="#define test_setopt(A,B,C) if((res = curl_easy_setopt((A), (B), (C))) != CURLE_OK) goto test_cleanup"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="62" str="#define test_multi_setopt(A,B,C) if((res = curl_multi_setopt((A), (B), (C))) != CURLE_OK) goto test_cleanup"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="81" str="#ifndef CURLTESTS_BUNDLED_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="84" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="99" str="#define TEST_ERR_MAJOR_BAD CURLE_RESERVED126"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="100" str="#define TEST_ERR_RUNS_FOREVER CURLE_RESERVED125"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="101" str="#define TEST_ERR_EASY_INIT CURLE_RESERVED124"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="102" str="#define TEST_ERR_MULTI CURLE_RESERVED123"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="103" str="#define TEST_ERR_NUM_HANDLES CURLE_RESERVED122"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="104" str="#define TEST_ERR_SELECT CURLE_RESERVED121"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="105" str="#define TEST_ERR_SUCCESS CURLE_RESERVED120"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="106" str="#define TEST_ERR_FAILURE CURLE_RESERVED119"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="107" str="#define TEST_ERR_USAGE CURLE_RESERVED118"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="108" str="#define TEST_ERR_FOPEN CURLE_RESERVED117"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="109" str="#define TEST_ERR_FSTAT CURLE_RESERVED116"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="110" str="#define TEST_ERR_BAD_TIMEOUT CURLE_RESERVED115"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="143" str="#define exe_easy_init(A,Y,Z) do { if(((A) = curl_easy_init()) == NULL) { fprintf(stderr, &quot;%s:%d curl_easy_init() failed\n&quot;, (Y), (Z)); res = TEST_ERR_EASY_INIT; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="150" str="#define res_easy_init(A) exe_easy_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="153" str="#define chk_easy_init(A,Y,Z) do { exe_easy_init((A), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="159" str="#define easy_init(A) chk_easy_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="164" str="#define exe_multi_init(A,Y,Z) do { if(((A) = curl_multi_init()) == NULL) { fprintf(stderr, &quot;%s:%d curl_multi_init() failed\n&quot;, (Y), (Z)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="171" str="#define res_multi_init(A) exe_multi_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="174" str="#define chk_multi_init(A,Y,Z) do { exe_multi_init((A), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="180" str="#define multi_init(A) chk_multi_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="185" str="#define exe_easy_setopt(A,B,C,Y,Z) do { CURLcode ec; if((ec = curl_easy_setopt((A), (B), (C))) != CURLE_OK) { fprintf(stderr, &quot;%s:%d curl_easy_setopt() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_easy_strerror(ec)); res = ec; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="195" str="#define res_easy_setopt(A, B, C) exe_easy_setopt((A), (B), (C), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="198" str="#define chk_easy_setopt(A, B, C, Y, Z) do { exe_easy_setopt((A), (B), (C), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="204" str="#define easy_setopt(A, B, C) chk_easy_setopt((A), (B), (C), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="209" str="#define exe_multi_setopt(A, B, C, Y, Z) do { CURLMcode ec; if((ec = curl_multi_setopt((A), (B), (C))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_setopt() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="219" str="#define res_multi_setopt(A,B,C) exe_multi_setopt((A), (B), (C), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="222" str="#define chk_multi_setopt(A,B,C,Y,Z) do { exe_multi_setopt((A), (B), (C), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="228" str="#define multi_setopt(A,B,C) chk_multi_setopt((A), (B), (C), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="233" str="#define exe_multi_add_handle(A,B,Y,Z) do { CURLMcode ec; if((ec = curl_multi_add_handle((A), (B))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_add_handle() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="243" str="#define res_multi_add_handle(A, B) exe_multi_add_handle((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="246" str="#define chk_multi_add_handle(A, B, Y, Z) do { exe_multi_add_handle((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="252" str="#define multi_add_handle(A, B) chk_multi_add_handle((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="257" str="#define exe_multi_remove_handle(A,B,Y,Z) do { CURLMcode ec; if((ec = curl_multi_remove_handle((A), (B))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_remove_handle() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="267" str="#define res_multi_remove_handle(A, B) exe_multi_remove_handle((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="270" str="#define chk_multi_remove_handle(A, B, Y, Z) do { exe_multi_remove_handle((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="277" str="#define multi_remove_handle(A, B) chk_multi_remove_handle((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="282" str="#define exe_multi_perform(A,B,Y,Z) do { CURLMcode ec; if((ec = curl_multi_perform((A), (B))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_perform() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } else if(*((B)) &lt; 0) { fprintf(stderr, &quot;%s:%d curl_multi_perform() succeeded, &quot; &quot;but returned invalid running_handles value (%d)\n&quot;, (Y), (Z), (int)*((B))); res = TEST_ERR_NUM_HANDLES; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="298" str="#define res_multi_perform(A, B) exe_multi_perform((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="301" str="#define chk_multi_perform(A, B, Y, Z) do { exe_multi_perform((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="307" str="#define multi_perform(A,B) chk_multi_perform((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="312" str="#define exe_multi_fdset(A, B, C, D, E, Y, Z) do { CURLMcode ec; if((ec = curl_multi_fdset((A), (B), (C), (D), (E))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_fdset() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } else if(*((E)) &lt; -1) { fprintf(stderr, &quot;%s:%d curl_multi_fdset() succeeded, &quot; &quot;but returned invalid max_fd value (%d)\n&quot;, (Y), (Z), (int)*((E))); res = TEST_ERR_NUM_HANDLES; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="328" str="#define res_multi_fdset(A, B, C, D, E) exe_multi_fdset((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="331" str="#define chk_multi_fdset(A, B, C, D, E, Y, Z) do { exe_multi_fdset((A), (B), (C), (D), (E), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="337" str="#define multi_fdset(A, B, C, D, E) chk_multi_fdset((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="342" str="#define exe_multi_timeout(A,B,Y,Z) do { CURLMcode ec; if((ec = curl_multi_timeout((A), (B))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_timeout() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_BAD_TIMEOUT; } else if(*((B)) &lt; -1L) { fprintf(stderr, &quot;%s:%d curl_multi_timeout() succeeded, &quot; &quot;but returned invalid timeout value (%ld)\n&quot;, (Y), (Z), (long)*((B))); res = TEST_ERR_BAD_TIMEOUT; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="358" str="#define res_multi_timeout(A, B) exe_multi_timeout((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="361" str="#define chk_multi_timeout(A, B, Y, Z) do { exe_multi_timeout((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="367" str="#define multi_timeout(A, B) chk_multi_timeout((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="372" str="#define exe_multi_poll(A,B,C,D,E,Y,Z) do { CURLMcode ec; if((ec = curl_multi_poll((A), (B), (C), (D), (E))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_poll() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } else if(*((E)) &lt; 0) { fprintf(stderr, &quot;%s:%d curl_multi_poll() succeeded, &quot; &quot;but returned invalid numfds value (%d)\n&quot;, (Y), (Z), (int)*((E))); res = TEST_ERR_NUM_HANDLES; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="388" str="#define res_multi_poll(A, B, C, D, E) exe_multi_poll((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="391" str="#define chk_multi_poll(A, B, C, D, E, Y, Z) do { exe_multi_poll((A), (B), (C), (D), (E), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="397" str="#define multi_poll(A, B, C, D, E) chk_multi_poll((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="402" str="#define exe_multi_wakeup(A,Y,Z) do { CURLMcode ec; if((ec = curl_multi_wakeup((A))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_wakeup() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="412" str="#define res_multi_wakeup(A) exe_multi_wakeup((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="415" str="#define chk_multi_wakeup(A, Y, Z) do { exe_multi_wakeup((A), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="421" str="#define multi_wakeup(A) chk_multi_wakeup((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="426" str="#define exe_select_test(A, B, C, D, E, Y, Z) do { int ec; if(select_wrapper((A), (B), (C), (D), (E)) == -1) { ec = SOCKERRNO; fprintf(stderr, &quot;%s:%d select() failed, with &quot; &quot;errno %d (%s)\n&quot;, (Y), (Z), ec, strerror(ec)); res = TEST_ERR_SELECT; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="437" str="#define res_select_test(A, B, C, D, E) exe_select_test((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="440" str="#define chk_select_test(A, B, C, D, E, Y, Z) do { exe_select_test((A), (B), (C), (D), (E), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="446" str="#define select_test(A, B, C, D, E) chk_select_test((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="451" str="#define start_test_timing() do { tv_test_start = tutil_tvnow(); } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="455" str="#define exe_test_timedout(Y,Z) do { long timediff = tutil_tvdiff(tutil_tvnow(), tv_test_start); if(timediff &gt; (TEST_HANG_TIMEOUT)) { fprintf(stderr, &quot;%s:%d ABORTING TEST, since it seems &quot; &quot;that it would have run forever (%ld ms &gt; %ld ms)\n&quot;, (Y), (Z), timediff, (long) (TEST_HANG_TIMEOUT)); res = TEST_ERR_RUNS_FOREVER; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="465" str="#define res_test_timedout() exe_test_timedout((__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="468" str="#define chk_test_timedout(Y, Z) do { exe_test_timedout(Y, Z); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="474" str="#define abort_on_test_timeout() chk_test_timedout((__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="479" str="#define exe_global_init(A,Y,Z) do { CURLcode ec; if((ec = curl_global_init((A))) != CURLE_OK) { fprintf(stderr, &quot;%s:%d curl_global_init() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_easy_strerror(ec)); res = ec; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="489" str="#define res_global_init(A) exe_global_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="492" str="#define chk_global_init(A, Y, Z) do { exe_global_init((A), (Y), (Z)); if(res) return res; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="501" str="#define global_init(A) chk_global_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="504" str="#ifndef CURLTESTS_BUNDLED_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="505" str="#define NO_SUPPORT_BUILT_IN CURLcode test(char *URL) { (void)URL; fprintf(stderr, &quot;Missing support\n&quot;); return CURLE_UNSUPPORTED_PROTOCOL; }"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="512" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="516" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="518" str="#ifdef CURLTESTS_BUNDLED_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="522" str="#undef NO_SUPPORT_BUILT_IN"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="523" str="#define NO_SUPPORT_BUILT_IN CURLcode test(char *URL) { (void)URL; fprintf(stderr, &quot;Missing support\n&quot;); return CURLE_UNSUPPORTED_PROTOCOL; }"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="530" str="#endif"/>
  </directivelist>
  <macro-usage>
    <macro name="HAVE_FCNTL_H" file="" line="1" column="1" usefile="C:/test_workspace/curl-master/tests/libtest/lib518.c" useline="29" usecolumn="8" is-known-value="false"/>
    <macro name="FD_SETSIZE" file="" line="1" column="1" usefile="C:/test_workspace/curl-master/tests/libtest/lib518.c" useline="37" usecolumn="9" is-known-value="false"/>
    <macro name="HEADER_CURL_TEST_H" file="C:/test_workspace/curl-master/tests/libtest/test.h" line="2" column="9" usefile="C:/test_workspace/curl-master/tests/libtest/test.h" useline="1" usecolumn="9" is-known-value="true"/>
  </macro-usage>
  <simplecpp-if-cond>
    <if-cond file="C:/test_workspace/curl-master/tests/libtest/test.h" line="41" column="2" E="0" result="0"/>
    <if-cond file="C:/test_workspace/curl-master/tests/libtest/test.h" line="49" column="2" E="( 0 &amp;&amp; ( ( __GNUC__ &gt; 4 ) || ( ( __GNUC__ == 4 ) &amp;&amp; ( __GNUC_MINOR__ &gt;= 6 ) ) ) )" result="0"/>
    <if-cond file="C:/test_workspace/curl-master/tests/libtest/lib518.c" line="45" column="2" E="0 || 0" result="0"/>
    <if-cond file="C:/test_workspace/curl-master/tests/libtest/lib518.c" line="51" column="2" E="0 &amp;&amp; 0" result="0"/>
  </simplecpp-if-cond>
  <tokenlist>
    <token id="157797f08f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f0bf0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="8" str="char" scope="1575825dc80" type="name" astParent="157797f1190"/>
    <token id="157797f1190" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="13" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astOperand1="157797f0bf0" astOperand2="157797f3cb0"/>
    <token id="157797f3cb0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="14" str="libtest_arg2" scope="1575825dc80" type="name" varId="1" exprId="1" variable="15772b14840" astParent="157797f1190" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f4310" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="26" str=";" scope="1575825dc80"/>
    <token id="157797f3e90" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f3ef0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="8" str="char" scope="1575825dc80" type="name" astParent="157797f4070"/>
    <token id="157797f4070" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="13" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astOperand1="157797f3ef0" astOperand2="157797f4250"/>
    <token id="157797f4250" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="14" str="libtest_arg3" scope="1575825dc80" type="name" varId="2" exprId="2" variable="15772b15640" astParent="157797f4070" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f4370" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="26" str=";" scope="1575825dc80"/>
    <token id="157797f43d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f45b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="8" str="char" scope="1575825dc80" type="name" astParent="157797f4790"/>
    <token id="157797f4790" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="13" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astOperand1="157797f45b0" astOperand2="157797f47f0"/>
    <token id="157797f47f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="14" str="libtest_arg4" scope="1575825dc80" type="name" varId="3" exprId="3" variable="15772b15800" astParent="157797f4790" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f50f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="26" str=";" scope="1575825dc80"/>
    <token id="157797f51b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="71" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f4910" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="71" column="8" str="int" scope="1575825dc80" type="name"/>
    <token id="157797f4a90" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="71" column="12" str="test_argc" scope="1575825dc80" type="name" varId="4" exprId="4" variable="15772b14a70" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f60b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="71" column="21" str=";" scope="1575825dc80"/>
    <token id="157797f5ab0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f54b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="8" str="char" scope="1575825dc80" type="name" astParent="157797f5630"/>
    <token id="157797f5630" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="13" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astOperand1="157797f54b0" astOperand2="157797f4970"/>
    <token id="157797f4970" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="14" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astParent="157797f5630" astOperand1="157797f4f10" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f4f10" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="15" str="test_argv" scope="1575825dc80" type="name" varId="5" exprId="5" variable="15772b14290" astParent="157797f4970" valueType-type="char" valueType-pointer="2" valueType-reference="None"/>
    <token id="157797f5810" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="24" str=";" scope="1575825dc80"/>
    <token id="157797f59f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f4af0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="8" str="struct" scope="1575825dc80" type="name"/>
    <token id="157797f49d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="15" str="timeval" scope="1575825dc80" type="name"/>
    <token id="157797f5cf0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="23" str="tv_test_start" scope="1575825dc80" type="name" varId="6" exprId="6" variable="15772b14450" valueType-type="record" valueType-reference="None"/>
    <token id="157797f5090" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="36" str=";" scope="1575825dc80"/>
    <token id="157797f5c90" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f5bd0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="8" str="int" scope="1575825dc80" type="name"/>
    <token id="157797f5750" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="12" str="select_wrapper" scope="1575825dc80" type="name" function="15767ba9e30"/>
    <token id="157797f5d50" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="26" str="(" scope="1575825dc80" link="157797f4df0" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f6050" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="27" str="int" scope="1575825dc80" type="name"/>
    <token id="157797f5e10" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="31" str="nfds" scope="1575825dc80" type="name" varId="7" exprId="7" variable="15772b14530" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f4a30" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="35" str="," scope="1575825dc80"/>
    <token id="157797f53f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="37" str="fd_set" scope="1575825dc80" type="name" astParent="157797f4cd0"/>
    <token id="157797f4cd0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="44" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astParent="157797f52d0" astOperand1="157797f53f0" astOperand2="157797f56f0"/>
    <token id="157797f56f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="45" str="rd" scope="1575825dc80" type="name" varId="8" exprId="8" variable="15772b14b50" astParent="157797f4cd0"/>
    <token id="157797f52d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="47" str="," scope="1575825dc80" astParent="157797f4b50" astOperand1="157797f4cd0" astOperand2="157797f4eb0"/>
    <token id="157797f4f70" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="49" str="fd_set" scope="1575825dc80" type="name" astParent="157797f4eb0"/>
    <token id="157797f4eb0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="56" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astParent="157797f52d0" astOperand1="157797f4f70" astOperand2="157797f5690"/>
    <token id="157797f5690" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="57" str="wr" scope="1575825dc80" type="name" varId="9" exprId="9" variable="15772b14df0" astParent="157797f4eb0"/>
    <token id="157797f4b50" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="59" str="," scope="1575825dc80" astParent="157797f5930" astOperand1="157797f52d0" astOperand2="157797f5570"/>
    <token id="157797f4bb0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="61" str="fd_set" scope="1575825dc80" type="name" astParent="157797f5570"/>
    <token id="157797f5570" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="68" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astParent="157797f4b50" astOperand1="157797f4bb0" astOperand2="157797f5c30"/>
    <token id="157797f5c30" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="69" str="exc" scope="1575825dc80" type="name" varId="10" exprId="10" variable="15772b14ed0" astParent="157797f5570"/>
    <token id="157797f5930" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="72" str="," scope="1575825dc80" astOperand1="157797f4b50" astOperand2="157797f4c10"/>
    <token id="157797f5150" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="27" str="struct" scope="1575825dc80" type="name"/>
    <token id="157797f4d30" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="34" str="timeval" scope="1575825dc80" type="name" astParent="157797f4c10"/>
    <token id="157797f4c10" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="42" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astParent="157797f5930" astOperand1="157797f4d30" astOperand2="157797f5f30"/>
    <token id="157797f5f30" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="43" str="tv" scope="1575825dc80" type="name" varId="11" exprId="11" variable="15772b145a0" astParent="157797f4c10" valueType-type="record" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f4df0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="45" str=")" scope="1575825dc80" link="157797f5d50"/>
    <token id="157797f55d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="46" str=";" scope="1575825dc80"/>
    <token id="157797f4d90" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f5ff0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="8" str="void" scope="1575825dc80" type="name"/>
    <token id="157797f5210" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="13" str="wait_ms" scope="1575825dc80" type="name" function="15767ba88f0"/>
    <token id="157797f5b10" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="20" str="(" scope="1575825dc80" link="157797f5f90" valueType-type="void" valueType-reference="None"/>
    <token id="157797f5e70" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="21" str="int" scope="1575825dc80" type="name"/>
    <token id="157797f4c70" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="25" str="ms" scope="1575825dc80" type="name" varId="12" exprId="12" variable="15772b146f0" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f5f90" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="27" str=")" scope="1575825dc80" link="157797f5b10"/>
    <token id="157797f5870" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="28" str=";" scope="1575825dc80"/>
    <token id="157797f4e50" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f5030" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="8" str="CURLcode" scope="1575825dc80" type="name"/>
    <token id="157797f5990" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="17" str="test" scope="1575825dc80" type="name" function="15767ba9bb0"/>
    <token id="157797f4fd0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="21" str="(" scope="1575825dc80" link="157797f5b70"/>
    <token id="157797f5270" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="22" str="char" scope="1575825dc80" type="name" astParent="157797f5330"/>
    <token id="157797f5330" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="27" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astOperand1="157797f5270" astOperand2="157797f5390"/>
    <token id="157797f5390" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="28" str="URL" scope="1575825dc80" type="name" varId="13" exprId="13" astParent="157797f5330"/>
    <token id="157797f5b70" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="31" str=")" scope="1575825dc80" link="157797f4fd0"/>
    <token id="157797f5db0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="32" str=";" scope="1575825dc80"/>
    <token id="157797f5450" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f5ed0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="8" str="char" scope="1575825dc80" type="name"/>
    <token id="157797f5510" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="13" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true"/>
    <token id="157797f57b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="14" str="hexdump" scope="1575825dc80" type="name" function="15767ba8210"/>
    <token id="157797f58d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="21" str="(" scope="1575825dc80" link="157797f69b0" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f5a50" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="22" str="const" scope="1575825dc80" type="name"/>
    <token id="157797f77f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="37" str="char" scope="1575825dc80" type="name" isUnsigned="true" astParent="157797f6530"/>
    <token id="157797f6530" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="42" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astParent="157797f6ad0" astOperand1="157797f77f0" astOperand2="157797f7310"/>
    <token id="157797f7310" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="43" str="buffer" scope="1575825dc80" type="name" varId="14" exprId="14" variable="15772b16050" astParent="157797f6530" valueType-type="char" valueType-sign="unsigned" valueType-pointer="1" valueType-constness="1" valueType-reference="None"/>
    <token id="157797f6ad0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="49" str="," scope="1575825dc80" values="1574799da50" astOperand1="157797f6530" astOperand2="157797f74f0"/>
    <token id="157797f6e90" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="51" str="long" scope="1575825dc80" type="name" isUnsigned="true" originalName="size_t"/>
    <token id="157797f74f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="58" str="len" scope="1575825dc80" type="name" varId="15" exprId="15" variable="15772b184a0" values="1574799ddd0" astParent="157797f6ad0" valueType-type="long long" valueType-sign="unsigned" valueType-reference="None" valueType-originalTypeName="size_t"/>
    <token id="157797f69b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="61" str=")" scope="1575825dc80" link="157797f58d0"/>
    <token id="157797f7070" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="62" str=";" scope="1575825dc80"/>
    <token id="157797f7850" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="88" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f6f50" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="88" column="8" str="int" scope="1575825dc80" type="name"/>
    <token id="157797f62f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="88" column="12" str="unitfail" scope="1575825dc80" type="name" varId="16" exprId="16" variable="15772b144c0" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f71f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="88" column="20" str=";" scope="1575825dc80"/>
    <token id="157797f7490" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="1" str="CURLcode" scope="1575825dc80" type="name"/>
    <token id="157797f6a10" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="10" str="test" scope="1575825dc80" type="name" function="15767ba9bb0"/>
    <token id="157797f6dd0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="14" str="(" scope="1575825dc80" link="157797f64d0"/>
    <token id="157797f6890" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="15" str="char" scope="1575825dc80" type="name" astParent="157797f7550"/>
    <token id="157797f7550" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="20" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astOperand1="157797f6890" astOperand2="157797f61d0"/>
    <token id="157797f61d0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="21" str="URL" scope="1575825dc80" type="name" varId="17" exprId="17" variable="15772b15020" astParent="157797f7550" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f64d0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="24" str=")" scope="1575825dc80" link="157797f6dd0"/>
    <token id="157797f6590" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="501" column="1" str="{" scope="1575825a1c0" link="157797f6770"/>
    <token id="157797f67d0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="3" str="(" scope="1575825a1c0" isCast="true" link="157797f7010" exprId="1073741842" astOperand1="157797f6350" valueType-type="void" valueType-reference="None"/>
    <token id="157797f65f0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="4" str="void" scope="1575825a1c0" type="name"/>
    <token id="157797f7010" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="8" str=")" scope="1575825a1c0" link="157797f67d0"/>
    <token id="157797f6350" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="9" str="URL" scope="1575825a1c0" type="name" varId="17" exprId="17" variable="15772b15020" astParent="157797f67d0" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f6a70" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="12" str=";" scope="1575825a1c0"/>
    <token id="157797f6650" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="3" str="printf" scope="1575825a1c0" type="name" astParent="157797f7370"/>
    <token id="157797f7370" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="9" str="(" scope="1575825a1c0" link="157797f73d0" exprId="1073741843" astOperand1="157797f6650" astOperand2="157797f70d0" valueType-type="int" valueType-sign="signed" valueType-reference="None" valueType-originalTypeName="int"/>
    <token id="157797f70d0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="10" str="&quot;system lacks necessary system function(s)&quot;" scope="1575825a1c0" type="string" strlen="41" values="1574799d530" astParent="157797f7370" valueType-type="char" valueType-pointer="1" valueType-constness="1" valueType-reference="None"/>
    <token id="157797f73d0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="53" str=")" scope="1575825a1c0" link="157797f7370"/>
    <token id="157797f75b0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="54" str=";" scope="1575825a1c0"/>
    <token id="157797f6b30" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="504" column="3" str="return" scope="1575825a1c0" type="name" astOperand1="157797f7430"/>
    <token id="157797f7430" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="504" column="10" str="1" scope="1575825a1c0" type="number" isInt="true" values="1574799d670" astParent="157797f6b30" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f6830" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="504" column="11" str=";" scope="1575825a1c0"/>
    <token id="157797f6770" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="505" column="1" str="}" scope="1575825a1c0" link="157797f6590"/>
  </tokenlist>
  <scopes>
    <scope id="1575825dc80" type="Global">
      <functionList>
        <function id="15767ba9e30" token="0" tokenDef="157797f5750" name="select_wrapper" type="Function" access="Public">
          <arg nr="1" variable="15772b14530"/>
          <arg nr="2" variable="15772b14b50"/>
          <arg nr="3" variable="15772b14df0"/>
          <arg nr="4" variable="15772b14ed0"/>
          <arg nr="5" variable="15772b145a0"/>
        </function>
        <function id="15767ba88f0" token="0" tokenDef="157797f5210" name="wait_ms" type="Function" access="Public">
          <arg nr="1" variable="15772b146f0"/>
        </function>
        <function id="15767ba9bb0" token="157797f6a10" tokenDef="157797f5990" name="test" type="Function" access="Public">
          <arg nr="1" variable="15772b15020"/>
        </function>
        <function id="15767ba8210" token="0" tokenDef="157797f57b0" name="hexdump" type="Function" access="Public">
          <arg nr="1" variable="15772b16050"/>
          <arg nr="2" variable="15772b184a0"/>
        </function>
      </functionList>
      <varlist>
        <var id="15772b14840"/>
        <var id="15772b15640"/>
        <var id="15772b15800"/>
        <var id="15772b14a70"/>
        <var id="15772b14290"/>
        <var id="15772b14450"/>
        <var id="15772b144c0"/>
      </varlist>
    </scope>
    <scope id="1575825a1c0" type="Function" className="test" bodyStart="157797f6590" bodyEnd="157797f6770" nestedIn="1575825dc80" function="15767ba9bb0"/>
  </scopes>
  <variables>
    <var id="15772b14290" nameToken="157797f4f10" typeStartToken="157797f54b0" typeEndToken="157797f4970" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14450" nameToken="157797f5cf0" typeStartToken="157797f49d0" typeEndToken="157797f49d0" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="true" isConst="false" isExtern="true" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b144c0" nameToken="157797f62f0" typeStartToken="157797f6f50" typeEndToken="157797f6f50" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14530" nameToken="157797f5e10" typeStartToken="157797f6050" typeEndToken="157797f6050" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b145a0" nameToken="157797f5f30" typeStartToken="157797f4d30" typeEndToken="157797f4c10" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b146f0" nameToken="157797f4c70" typeStartToken="157797f5e70" typeEndToken="157797f5e70" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14840" nameToken="157797f3cb0" typeStartToken="157797f0bf0" typeEndToken="157797f1190" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14a70" nameToken="157797f4a90" typeStartToken="157797f4910" typeEndToken="157797f4910" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14b50" nameToken="157797f56f0" typeStartToken="157797f53f0" typeEndToken="157797f4cd0" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14df0" nameToken="157797f5690" typeStartToken="157797f4f70" typeEndToken="157797f4eb0" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14ed0" nameToken="157797f5c30" typeStartToken="157797f4bb0" typeEndToken="157797f5570" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b15020" nameToken="157797f61d0" typeStartToken="157797f6890" typeEndToken="157797f7550" access="Argument" scope="1575825a1c0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b15640" nameToken="157797f4250" typeStartToken="157797f3ef0" typeEndToken="157797f4070" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b15800" nameToken="157797f47f0" typeStartToken="157797f45b0" typeEndToken="157797f4790" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b16050" nameToken="157797f7310" typeStartToken="157797f77f0" typeEndToken="157797f6530" access="Argument" scope="0" constness="1" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b184a0" nameToken="157797f74f0" typeStartToken="157797f6e90" typeEndToken="157797f6e90" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
  </variables>
  <valueflow>
    <values id="1574799da50">
      <value intvalue="-1" bound="Upper" impossible="true" path="0"/>
    </values>
    <values id="1574799ddd0">
      <value intvalue="18446744073709551615" bound="Upper" impossible="true" path="0"/>
    </values>
    <values id="1574799d530">
      <value tokvalue="157797f70d0" bound="Point" known="true" path="0"/>
    </values>
    <values id="1574799d670">
      <value intvalue="1" bound="Point" known="true" path="0"/>
    </values>
  </valueflow>
</dump>
<dump cfg="HAVE_SYS_RESOURCE_H;FD_SETSIZE">
  <standards>
    <c version="c11"/>
    <cpp version="c++23"/>
  </standards>
  <directivelist>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="24" str="#include &quot;test.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="26" str="#ifdef HAVE_SYS_RESOURCE_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="27" str="#include &lt;sys/resource.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="28" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="29" str="#ifdef HAVE_FCNTL_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="30" str="#include &lt;fcntl.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="31" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="32" str="#include &lt;limits.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="34" str="#include &quot;warnless.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="35" str="#include &quot;memdebug.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="37" str="#ifndef FD_SETSIZE"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="38" str="#error &quot;this test requires FD_SETSIZE&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="39" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="41" str="#define SAFETY_MARGIN (16)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="42" str="#define NUM_OPEN (FD_SETSIZE + 10)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="43" str="#define NUM_NEEDED (NUM_OPEN + SAFETY_MARGIN)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="45" str="#if defined(_WIN32) || defined(MSDOS)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="46" str="#define DEV_NULL &quot;NUL&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="47" str="#else"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="48" str="#define DEV_NULL &quot;/dev/null&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="49" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="51" str="#if defined(HAVE_GETRLIMIT) &amp;&amp; defined(HAVE_SETRLIMIT)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="104" str="#ifdef RLIM_INFINITY"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="109" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="110" str="#ifdef HAVE_LONGLONG"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="114" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="165" str="#ifdef OPEN_MAX"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="177" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="224" str="#ifdef RLIM_INFINITY"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="226" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="371" str="#if !defined(HAVE_POLL) &amp;&amp; !defined(USE_WINSOCK)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="411" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="498" str="#else"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="507" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="1" str="#ifndef HEADER_CURL_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="2" str="#define HEADER_CURL_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="32" str="#define CURL_NO_OLDIES"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="34" str="#include &quot;curl_setup.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="36" str="#include &lt;curl/curl.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="38" str="#ifdef HAVE_SYS_SELECT_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="40" str="#include &lt;sys/select.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="41" str="#elif defined(HAVE_UNISTD_H)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="42" str="#include &lt;unistd.h&gt;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="43" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="45" str="#include &quot;curl_printf.h&quot;"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="49" str="#if (defined(__GNUC__) &amp;&amp; ((__GNUC__ &gt; 4) || ((__GNUC__ == 4) &amp;&amp; (__GNUC_MINOR__ &gt;= 6))))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="51" str="#define CURL_GNUC_DIAG"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="52" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="54" str="#ifdef _WIN32"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="55" str="#define sleep(sec) Sleep((sec)*1000)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="56" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="58" str="#define test_setopt(A,B,C) if((res = curl_easy_setopt((A), (B), (C))) != CURLE_OK) goto test_cleanup"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="62" str="#define test_multi_setopt(A,B,C) if((res = curl_multi_setopt((A), (B), (C))) != CURLE_OK) goto test_cleanup"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="81" str="#ifndef CURLTESTS_BUNDLED_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="84" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="99" str="#define TEST_ERR_MAJOR_BAD CURLE_RESERVED126"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="100" str="#define TEST_ERR_RUNS_FOREVER CURLE_RESERVED125"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="101" str="#define TEST_ERR_EASY_INIT CURLE_RESERVED124"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="102" str="#define TEST_ERR_MULTI CURLE_RESERVED123"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="103" str="#define TEST_ERR_NUM_HANDLES CURLE_RESERVED122"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="104" str="#define TEST_ERR_SELECT CURLE_RESERVED121"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="105" str="#define TEST_ERR_SUCCESS CURLE_RESERVED120"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="106" str="#define TEST_ERR_FAILURE CURLE_RESERVED119"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="107" str="#define TEST_ERR_USAGE CURLE_RESERVED118"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="108" str="#define TEST_ERR_FOPEN CURLE_RESERVED117"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="109" str="#define TEST_ERR_FSTAT CURLE_RESERVED116"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="110" str="#define TEST_ERR_BAD_TIMEOUT CURLE_RESERVED115"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="143" str="#define exe_easy_init(A,Y,Z) do { if(((A) = curl_easy_init()) == NULL) { fprintf(stderr, &quot;%s:%d curl_easy_init() failed\n&quot;, (Y), (Z)); res = TEST_ERR_EASY_INIT; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="150" str="#define res_easy_init(A) exe_easy_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="153" str="#define chk_easy_init(A,Y,Z) do { exe_easy_init((A), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="159" str="#define easy_init(A) chk_easy_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="164" str="#define exe_multi_init(A,Y,Z) do { if(((A) = curl_multi_init()) == NULL) { fprintf(stderr, &quot;%s:%d curl_multi_init() failed\n&quot;, (Y), (Z)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="171" str="#define res_multi_init(A) exe_multi_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="174" str="#define chk_multi_init(A,Y,Z) do { exe_multi_init((A), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="180" str="#define multi_init(A) chk_multi_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="185" str="#define exe_easy_setopt(A,B,C,Y,Z) do { CURLcode ec; if((ec = curl_easy_setopt((A), (B), (C))) != CURLE_OK) { fprintf(stderr, &quot;%s:%d curl_easy_setopt() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_easy_strerror(ec)); res = ec; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="195" str="#define res_easy_setopt(A, B, C) exe_easy_setopt((A), (B), (C), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="198" str="#define chk_easy_setopt(A, B, C, Y, Z) do { exe_easy_setopt((A), (B), (C), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="204" str="#define easy_setopt(A, B, C) chk_easy_setopt((A), (B), (C), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="209" str="#define exe_multi_setopt(A, B, C, Y, Z) do { CURLMcode ec; if((ec = curl_multi_setopt((A), (B), (C))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_setopt() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="219" str="#define res_multi_setopt(A,B,C) exe_multi_setopt((A), (B), (C), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="222" str="#define chk_multi_setopt(A,B,C,Y,Z) do { exe_multi_setopt((A), (B), (C), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="228" str="#define multi_setopt(A,B,C) chk_multi_setopt((A), (B), (C), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="233" str="#define exe_multi_add_handle(A,B,Y,Z) do { CURLMcode ec; if((ec = curl_multi_add_handle((A), (B))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_add_handle() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="243" str="#define res_multi_add_handle(A, B) exe_multi_add_handle((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="246" str="#define chk_multi_add_handle(A, B, Y, Z) do { exe_multi_add_handle((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="252" str="#define multi_add_handle(A, B) chk_multi_add_handle((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="257" str="#define exe_multi_remove_handle(A,B,Y,Z) do { CURLMcode ec; if((ec = curl_multi_remove_handle((A), (B))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_remove_handle() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="267" str="#define res_multi_remove_handle(A, B) exe_multi_remove_handle((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="270" str="#define chk_multi_remove_handle(A, B, Y, Z) do { exe_multi_remove_handle((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="277" str="#define multi_remove_handle(A, B) chk_multi_remove_handle((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="282" str="#define exe_multi_perform(A,B,Y,Z) do { CURLMcode ec; if((ec = curl_multi_perform((A), (B))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_perform() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } else if(*((B)) &lt; 0) { fprintf(stderr, &quot;%s:%d curl_multi_perform() succeeded, &quot; &quot;but returned invalid running_handles value (%d)\n&quot;, (Y), (Z), (int)*((B))); res = TEST_ERR_NUM_HANDLES; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="298" str="#define res_multi_perform(A, B) exe_multi_perform((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="301" str="#define chk_multi_perform(A, B, Y, Z) do { exe_multi_perform((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="307" str="#define multi_perform(A,B) chk_multi_perform((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="312" str="#define exe_multi_fdset(A, B, C, D, E, Y, Z) do { CURLMcode ec; if((ec = curl_multi_fdset((A), (B), (C), (D), (E))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_fdset() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } else if(*((E)) &lt; -1) { fprintf(stderr, &quot;%s:%d curl_multi_fdset() succeeded, &quot; &quot;but returned invalid max_fd value (%d)\n&quot;, (Y), (Z), (int)*((E))); res = TEST_ERR_NUM_HANDLES; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="328" str="#define res_multi_fdset(A, B, C, D, E) exe_multi_fdset((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="331" str="#define chk_multi_fdset(A, B, C, D, E, Y, Z) do { exe_multi_fdset((A), (B), (C), (D), (E), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="337" str="#define multi_fdset(A, B, C, D, E) chk_multi_fdset((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="342" str="#define exe_multi_timeout(A,B,Y,Z) do { CURLMcode ec; if((ec = curl_multi_timeout((A), (B))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_timeout() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_BAD_TIMEOUT; } else if(*((B)) &lt; -1L) { fprintf(stderr, &quot;%s:%d curl_multi_timeout() succeeded, &quot; &quot;but returned invalid timeout value (%ld)\n&quot;, (Y), (Z), (long)*((B))); res = TEST_ERR_BAD_TIMEOUT; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="358" str="#define res_multi_timeout(A, B) exe_multi_timeout((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="361" str="#define chk_multi_timeout(A, B, Y, Z) do { exe_multi_timeout((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="367" str="#define multi_timeout(A, B) chk_multi_timeout((A), (B), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="372" str="#define exe_multi_poll(A,B,C,D,E,Y,Z) do { CURLMcode ec; if((ec = curl_multi_poll((A), (B), (C), (D), (E))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_poll() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } else if(*((E)) &lt; 0) { fprintf(stderr, &quot;%s:%d curl_multi_poll() succeeded, &quot; &quot;but returned invalid numfds value (%d)\n&quot;, (Y), (Z), (int)*((E))); res = TEST_ERR_NUM_HANDLES; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="388" str="#define res_multi_poll(A, B, C, D, E) exe_multi_poll((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="391" str="#define chk_multi_poll(A, B, C, D, E, Y, Z) do { exe_multi_poll((A), (B), (C), (D), (E), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="397" str="#define multi_poll(A, B, C, D, E) chk_multi_poll((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="402" str="#define exe_multi_wakeup(A,Y,Z) do { CURLMcode ec; if((ec = curl_multi_wakeup((A))) != CURLM_OK) { fprintf(stderr, &quot;%s:%d curl_multi_wakeup() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = TEST_ERR_MULTI; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="412" str="#define res_multi_wakeup(A) exe_multi_wakeup((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="415" str="#define chk_multi_wakeup(A, Y, Z) do { exe_multi_wakeup((A), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="421" str="#define multi_wakeup(A) chk_multi_wakeup((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="426" str="#define exe_select_test(A, B, C, D, E, Y, Z) do { int ec; if(select_wrapper((A), (B), (C), (D), (E)) == -1) { ec = SOCKERRNO; fprintf(stderr, &quot;%s:%d select() failed, with &quot; &quot;errno %d (%s)\n&quot;, (Y), (Z), ec, strerror(ec)); res = TEST_ERR_SELECT; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="437" str="#define res_select_test(A, B, C, D, E) exe_select_test((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="440" str="#define chk_select_test(A, B, C, D, E, Y, Z) do { exe_select_test((A), (B), (C), (D), (E), (Y), (Z)); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="446" str="#define select_test(A, B, C, D, E) chk_select_test((A), (B), (C), (D), (E), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="451" str="#define start_test_timing() do { tv_test_start = tutil_tvnow(); } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="455" str="#define exe_test_timedout(Y,Z) do { long timediff = tutil_tvdiff(tutil_tvnow(), tv_test_start); if(timediff &gt; (TEST_HANG_TIMEOUT)) { fprintf(stderr, &quot;%s:%d ABORTING TEST, since it seems &quot; &quot;that it would have run forever (%ld ms &gt; %ld ms)\n&quot;, (Y), (Z), timediff, (long) (TEST_HANG_TIMEOUT)); res = TEST_ERR_RUNS_FOREVER; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="465" str="#define res_test_timedout() exe_test_timedout((__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="468" str="#define chk_test_timedout(Y, Z) do { exe_test_timedout(Y, Z); if(res) goto test_cleanup; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="474" str="#define abort_on_test_timeout() chk_test_timedout((__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="479" str="#define exe_global_init(A,Y,Z) do { CURLcode ec; if((ec = curl_global_init((A))) != CURLE_OK) { fprintf(stderr, &quot;%s:%d curl_global_init() failed, &quot; &quot;with code %d (%s)\n&quot;, (Y), (Z), (int)ec, curl_easy_strerror(ec)); res = ec; } } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="489" str="#define res_global_init(A) exe_global_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="492" str="#define chk_global_init(A, Y, Z) do { exe_global_init((A), (Y), (Z)); if(res) return res; } while(0)"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="501" str="#define global_init(A) chk_global_init((A), (__FILE__), (__LINE__))"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="504" str="#ifndef CURLTESTS_BUNDLED_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="505" str="#define NO_SUPPORT_BUILT_IN CURLcode test(char *URL) { (void)URL; fprintf(stderr, &quot;Missing support\n&quot;); return CURLE_UNSUPPORTED_PROTOCOL; }"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="512" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="516" str="#endif"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="518" str="#ifdef CURLTESTS_BUNDLED_TEST_H"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="522" str="#undef NO_SUPPORT_BUILT_IN"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="523" str="#define NO_SUPPORT_BUILT_IN CURLcode test(char *URL) { (void)URL; fprintf(stderr, &quot;Missing support\n&quot;); return CURLE_UNSUPPORTED_PROTOCOL; }"/>
    <directive file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="530" str="#endif"/>
  </directivelist>
  <macro-usage>
    <macro name="FD_SETSIZE" file="" line="1" column="1" usefile="C:/test_workspace/curl-master/tests/libtest/lib518.c" useline="37" usecolumn="9" is-known-value="false"/>
    <macro name="HAVE_SYS_RESOURCE_H" file="" line="1" column="1" usefile="C:/test_workspace/curl-master/tests/libtest/lib518.c" useline="26" usecolumn="8" is-known-value="false"/>
    <macro name="HEADER_CURL_TEST_H" file="C:/test_workspace/curl-master/tests/libtest/test.h" line="2" column="9" usefile="C:/test_workspace/curl-master/tests/libtest/test.h" useline="1" usecolumn="9" is-known-value="true"/>
  </macro-usage>
  <simplecpp-if-cond>
    <if-cond file="C:/test_workspace/curl-master/tests/libtest/test.h" line="41" column="2" E="0" result="0"/>
    <if-cond file="C:/test_workspace/curl-master/tests/libtest/test.h" line="49" column="2" E="( 0 &amp;&amp; ( ( __GNUC__ &gt; 4 ) || ( ( __GNUC__ == 4 ) &amp;&amp; ( __GNUC_MINOR__ &gt;= 6 ) ) ) )" result="0"/>
    <if-cond file="C:/test_workspace/curl-master/tests/libtest/lib518.c" line="45" column="2" E="0 || 0" result="0"/>
    <if-cond file="C:/test_workspace/curl-master/tests/libtest/lib518.c" line="51" column="2" E="0 &amp;&amp; 0" result="0"/>
  </simplecpp-if-cond>
  <tokenlist>
    <token id="157797f64d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f6110" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="8" str="char" scope="1575825dc80" type="name" astParent="157797f7430"/>
    <token id="157797f7430" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="13" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astOperand1="157797f6110" astOperand2="157797f67d0"/>
    <token id="157797f67d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="14" str="libtest_arg2" scope="1575825dc80" type="name" varId="1" exprId="1" variable="15772b14d10" astParent="157797f7430" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f6830" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="66" column="26" str=";" scope="1575825dc80"/>
    <token id="157797f63b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f62f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="8" str="char" scope="1575825dc80" type="name" astParent="157797f78b0"/>
    <token id="157797f78b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="13" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astOperand1="157797f62f0" astOperand2="157797f6470"/>
    <token id="157797f6470" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="14" str="libtest_arg3" scope="1575825dc80" type="name" varId="2" exprId="2" variable="15772b14840" astParent="157797f78b0" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f72b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="67" column="26" str=";" scope="1575825dc80"/>
    <token id="157797f74f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f7310" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="8" str="char" scope="1575825dc80" type="name" astParent="157797f6230"/>
    <token id="157797f6230" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="13" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astOperand1="157797f7310" astOperand2="157797f6890"/>
    <token id="157797f6890" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="14" str="libtest_arg4" scope="1575825dc80" type="name" varId="3" exprId="3" variable="15772b143e0" astParent="157797f6230" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f6590" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="68" column="26" str=";" scope="1575825dc80"/>
    <token id="157797f61d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="71" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f6290" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="71" column="8" str="int" scope="1575825dc80" type="name"/>
    <token id="157797f7670" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="71" column="12" str="test_argc" scope="1575825dc80" type="name" varId="4" exprId="4" variable="15772b14450" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f6ef0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="71" column="21" str=";" scope="1575825dc80"/>
    <token id="157797f68f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f7790" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="8" str="char" scope="1575825dc80" type="name" astParent="157797f6530"/>
    <token id="157797f6530" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="13" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astOperand1="157797f7790" astOperand2="157797f6a70"/>
    <token id="157797f6a70" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="14" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astParent="157797f6530" astOperand1="157797f76d0" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f76d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="15" str="test_argv" scope="1575825dc80" type="name" varId="5" exprId="5" variable="15772b14920" astParent="157797f6a70" valueType-type="char" valueType-pointer="2" valueType-reference="None"/>
    <token id="157797f6e30" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="72" column="24" str=";" scope="1575825dc80"/>
    <token id="157797f6bf0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f6350" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="8" str="struct" scope="1575825dc80" type="name"/>
    <token id="157797f7850" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="15" str="timeval" scope="1575825dc80" type="name"/>
    <token id="157797f69b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="23" str="tv_test_start" scope="1575825dc80" type="name" varId="6" exprId="6" variable="15772b144c0" valueType-type="record" valueType-reference="None"/>
    <token id="157797f75b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="74" column="36" str=";" scope="1575825dc80"/>
    <token id="157797f6a10" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f7730" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="8" str="int" scope="1575825dc80" type="name"/>
    <token id="157797f7490" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="12" str="select_wrapper" scope="1575825dc80" type="name" function="15767ba8350"/>
    <token id="157797f6950" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="26" str="(" scope="1575825dc80" link="157797f6d10" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f77f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="27" str="int" scope="1575825dc80" type="name"/>
    <token id="157797f6410" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="31" str="nfds" scope="1575825dc80" type="name" varId="7" exprId="7" variable="15772b14ed0" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f6b30" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="35" str="," scope="1575825dc80"/>
    <token id="157797f7370" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="37" str="fd_set" scope="1575825dc80" type="name" astParent="157797f7610"/>
    <token id="157797f7610" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="44" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astParent="157797f73d0" astOperand1="157797f7370" astOperand2="157797f6170"/>
    <token id="157797f6170" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="45" str="rd" scope="1575825dc80" type="name" varId="8" exprId="8" variable="15772b155d0" astParent="157797f7610"/>
    <token id="157797f73d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="47" str="," scope="1575825dc80" astParent="157797f6650" astOperand1="157797f7610" astOperand2="157797f6ad0"/>
    <token id="157797f6710" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="49" str="fd_set" scope="1575825dc80" type="name" astParent="157797f6ad0"/>
    <token id="157797f6ad0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="56" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astParent="157797f73d0" astOperand1="157797f6710" astOperand2="157797f7010"/>
    <token id="157797f7010" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="57" str="wr" scope="1575825dc80" type="name" varId="9" exprId="9" variable="15772b15020" astParent="157797f6ad0"/>
    <token id="157797f6650" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="59" str="," scope="1575825dc80" astParent="157797f70d0" astOperand1="157797f73d0" astOperand2="157797f7070"/>
    <token id="157797f6f50" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="61" str="fd_set" scope="1575825dc80" type="name" astParent="157797f7070"/>
    <token id="157797f7070" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="68" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astParent="157797f6650" astOperand1="157797f6f50" astOperand2="157797f66b0"/>
    <token id="157797f66b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="69" str="exc" scope="1575825dc80" type="name" varId="10" exprId="10" variable="15772b145a0" astParent="157797f7070"/>
    <token id="157797f70d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="76" column="72" str="," scope="1575825dc80" astOperand1="157797f6650" astOperand2="157797f6c50"/>
    <token id="157797f7550" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="27" str="struct" scope="1575825dc80" type="name"/>
    <token id="157797f65f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="34" str="timeval" scope="1575825dc80" type="name" astParent="157797f6c50"/>
    <token id="157797f6c50" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="42" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astParent="157797f70d0" astOperand1="157797f65f0" astOperand2="157797f6cb0"/>
    <token id="157797f6cb0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="43" str="tv" scope="1575825dc80" type="name" varId="11" exprId="11" variable="15772b15170" astParent="157797f6c50" valueType-type="record" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f6d10" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="45" str=")" scope="1575825dc80" link="157797f6950"/>
    <token id="157797f7250" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="77" column="46" str=";" scope="1575825dc80"/>
    <token id="157797f6d70" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f6dd0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="8" str="void" scope="1575825dc80" type="name"/>
    <token id="157797f6e90" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="13" str="wait_ms" scope="1575825dc80" type="name" function="15767ba9e30"/>
    <token id="157797f7130" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="20" str="(" scope="1575825dc80" link="157797f8150" valueType-type="void" valueType-reference="None"/>
    <token id="157797f7190" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="21" str="int" scope="1575825dc80" type="name"/>
    <token id="157797f71f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="25" str="ms" scope="1575825dc80" type="name" varId="12" exprId="12" variable="15772b15640" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f8150" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="27" str=")" scope="1575825dc80" link="157797f7130"/>
    <token id="157797f8690" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="79" column="28" str=";" scope="1575825dc80"/>
    <token id="157797f86f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f8270" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="8" str="CURLcode" scope="1575825dc80" type="name"/>
    <token id="157797f7e50" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="17" str="test" scope="1575825dc80" type="name" function="15767ba8030"/>
    <token id="157797f88d0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="21" str="(" scope="1575825dc80" link="157797f8db0"/>
    <token id="157797f8330" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="22" str="char" scope="1575825dc80" type="name" astParent="157797f7eb0"/>
    <token id="157797f7eb0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="27" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astOperand1="157797f8330" astOperand2="157797f80f0"/>
    <token id="157797f80f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="28" str="URL" scope="1575825dc80" type="name" varId="13" exprId="13" astParent="157797f7eb0"/>
    <token id="157797f8db0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="31" str=")" scope="1575825dc80" link="157797f88d0"/>
    <token id="157797f7a90" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="82" column="32" str=";" scope="1575825dc80"/>
    <token id="157797f7af0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f8e10" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="8" str="char" scope="1575825dc80" type="name"/>
    <token id="157797f81b0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="13" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true"/>
    <token id="157797f83f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="14" str="hexdump" scope="1575825dc80" type="name" function="15767ba7bd0"/>
    <token id="157797f89f0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="21" str="(" scope="1575825dc80" link="157797f7f70" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f8e70" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="22" str="const" scope="1575825dc80" type="name"/>
    <token id="157797f7b50" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="37" str="char" scope="1575825dc80" type="name" isUnsigned="true" astParent="157797f7910"/>
    <token id="157797f7910" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="42" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astParent="157797f7cd0" astOperand1="157797f7b50" astOperand2="157797f8810"/>
    <token id="157797f8810" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="43" str="buffer" scope="1575825dc80" type="name" varId="14" exprId="14" variable="15772b16050" astParent="157797f7910" valueType-type="char" valueType-sign="unsigned" valueType-pointer="1" valueType-constness="1" valueType-reference="None"/>
    <token id="157797f7cd0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="49" str="," scope="1575825dc80" values="1574799f610" astOperand1="157797f7910" astOperand2="157797f7df0"/>
    <token id="157797f8390" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="51" str="long" scope="1575825dc80" type="name" isUnsigned="true" originalName="size_t"/>
    <token id="157797f7df0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="58" str="len" scope="1575825dc80" type="name" varId="15" exprId="15" variable="15772b18740" values="1574799f690" astParent="157797f7cd0" valueType-type="long long" valueType-sign="unsigned" valueType-reference="None" valueType-originalTypeName="size_t"/>
    <token id="157797f7f70" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="61" str=")" scope="1575825dc80" link="157797f89f0"/>
    <token id="157797f8ed0" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="86" column="62" str=";" scope="1575825dc80"/>
    <token id="157797f8c90" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="88" column="1" str="extern" scope="1575825dc80" type="name"/>
    <token id="157797f7f10" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="88" column="8" str="int" scope="1575825dc80" type="name"/>
    <token id="157797f7c10" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="88" column="12" str="unitfail" scope="1575825dc80" type="name" varId="16" exprId="16" variable="15772b14530" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f8f30" file="C:/test_workspace/curl-master/tests/libtest/test.h" linenr="88" column="20" str=";" scope="1575825dc80"/>
    <token id="157797f7fd0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="1" str="CURLcode" scope="1575825dc80" type="name"/>
    <token id="157797f8510" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="10" str="test" scope="1575825dc80" type="name" function="15767ba8030"/>
    <token id="157797f8cf0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="14" str="(" scope="1575825dc80" link="157797f8210"/>
    <token id="157797f8990" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="15" str="char" scope="1575825dc80" type="name" astParent="157797f7c70"/>
    <token id="157797f7c70" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="20" str="*" scope="1575825dc80" type="op" isArithmeticalOp="true" astOperand1="157797f8990" astOperand2="157797f8a50"/>
    <token id="157797f8a50" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="21" str="URL" scope="1575825dc80" type="name" varId="17" exprId="17" variable="15772b15800" astParent="157797f7c70" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f8210" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="500" column="24" str=")" scope="1575825dc80" link="157797f8cf0"/>
    <token id="157797f8ab0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="501" column="1" str="{" scope="1575825c9c0" link="157797f87b0"/>
    <token id="157797f8450" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="3" str="(" scope="1575825c9c0" isCast="true" link="157797f84b0" exprId="1073741842" astOperand1="157797f8570" valueType-type="void" valueType-reference="None"/>
    <token id="157797f7d30" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="4" str="void" scope="1575825c9c0" type="name"/>
    <token id="157797f84b0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="8" str=")" scope="1575825c9c0" link="157797f8450"/>
    <token id="157797f8570" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="9" str="URL" scope="1575825c9c0" type="name" varId="17" exprId="17" variable="15772b15800" astParent="157797f8450" valueType-type="char" valueType-pointer="1" valueType-reference="None"/>
    <token id="157797f82d0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="502" column="12" str=";" scope="1575825c9c0"/>
    <token id="157797f8d50" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="3" str="printf" scope="1575825c9c0" type="name" astParent="157797f85d0"/>
    <token id="157797f85d0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="9" str="(" scope="1575825c9c0" link="157797f8b10" exprId="1073741843" astOperand1="157797f8d50" astOperand2="157797f8630" valueType-type="int" valueType-sign="signed" valueType-reference="None" valueType-originalTypeName="int"/>
    <token id="157797f8630" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="10" str="&quot;system lacks necessary system function(s)&quot;" scope="1575825c9c0" type="string" strlen="41" values="1574799f030" astParent="157797f85d0" valueType-type="char" valueType-pointer="1" valueType-constness="1" valueType-reference="None"/>
    <token id="157797f8b10" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="53" str=")" scope="1575825c9c0" link="157797f85d0"/>
    <token id="157797f7d90" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="503" column="54" str=";" scope="1575825c9c0"/>
    <token id="157797f8f90" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="504" column="3" str="return" scope="1575825c9c0" type="name" astOperand1="157797f7970"/>
    <token id="157797f7970" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="504" column="10" str="1" scope="1575825c9c0" type="number" isInt="true" values="1574799f010" astParent="157797f8f90" valueType-type="int" valueType-sign="signed" valueType-reference="None"/>
    <token id="157797f8750" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="504" column="11" str=";" scope="1575825c9c0"/>
    <token id="157797f87b0" file="C:/test_workspace/curl-master/tests/libtest/lib518.c" linenr="505" column="1" str="}" scope="1575825c9c0" link="157797f8ab0"/>
  </tokenlist>
  <scopes>
    <scope id="1575825dc80" type="Global">
      <functionList>
        <function id="15767ba8350" token="0" tokenDef="157797f7490" name="select_wrapper" type="Function" access="Public">
          <arg nr="1" variable="15772b14ed0"/>
          <arg nr="2" variable="15772b155d0"/>
          <arg nr="3" variable="15772b15020"/>
          <arg nr="4" variable="15772b145a0"/>
          <arg nr="5" variable="15772b15170"/>
        </function>
        <function id="15767ba9e30" token="0" tokenDef="157797f6e90" name="wait_ms" type="Function" access="Public">
          <arg nr="1" variable="15772b15640"/>
        </function>
        <function id="15767ba8030" token="157797f8510" tokenDef="157797f7e50" name="test" type="Function" access="Public">
          <arg nr="1" variable="15772b15800"/>
        </function>
        <function id="15767ba7bd0" token="0" tokenDef="157797f83f0" name="hexdump" type="Function" access="Public">
          <arg nr="1" variable="15772b16050"/>
          <arg nr="2" variable="15772b18740"/>
        </function>
      </functionList>
      <varlist>
        <var id="15772b14d10"/>
        <var id="15772b14840"/>
        <var id="15772b143e0"/>
        <var id="15772b14450"/>
        <var id="15772b14920"/>
        <var id="15772b144c0"/>
        <var id="15772b14530"/>
      </varlist>
    </scope>
    <scope id="1575825c9c0" type="Function" className="test" bodyStart="157797f8ab0" bodyEnd="157797f87b0" nestedIn="1575825dc80" function="15767ba8030"/>
  </scopes>
  <variables>
    <var id="15772b143e0" nameToken="157797f6890" typeStartToken="157797f7310" typeEndToken="157797f6230" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14450" nameToken="157797f7670" typeStartToken="157797f6290" typeEndToken="157797f6290" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b144c0" nameToken="157797f69b0" typeStartToken="157797f7850" typeEndToken="157797f7850" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="true" isConst="false" isExtern="true" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14530" nameToken="157797f7c10" typeStartToken="157797f7f10" typeEndToken="157797f7f10" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b145a0" nameToken="157797f66b0" typeStartToken="157797f6f50" typeEndToken="157797f7070" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14840" nameToken="157797f6470" typeStartToken="157797f62f0" typeEndToken="157797f78b0" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14920" nameToken="157797f76d0" typeStartToken="157797f7790" typeEndToken="157797f6a70" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14d10" nameToken="157797f67d0" typeStartToken="157797f6110" typeEndToken="157797f7430" access="Global" scope="1575825dc80" constness="0" isArray="false" isClass="false" isConst="false" isExtern="true" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b14ed0" nameToken="157797f6410" typeStartToken="157797f77f0" typeEndToken="157797f77f0" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b15020" nameToken="157797f7010" typeStartToken="157797f6710" typeEndToken="157797f6ad0" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b15170" nameToken="157797f6cb0" typeStartToken="157797f65f0" typeEndToken="157797f6c50" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b155d0" nameToken="157797f6170" typeStartToken="157797f7370" typeEndToken="157797f7610" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b15640" nameToken="157797f71f0" typeStartToken="157797f7190" typeEndToken="157797f7190" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b15800" nameToken="157797f8a50" typeStartToken="157797f8990" typeEndToken="157797f7c70" access="Argument" scope="1575825c9c0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b16050" nameToken="157797f8810" typeStartToken="157797f7b50" typeEndToken="157797f7910" access="Argument" scope="0" constness="1" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="true" isReference="false" isStatic="false" isVolatile="false"/>
    <var id="15772b18740" nameToken="157797f7df0" typeStartToken="157797f8390" typeEndToken="157797f8390" access="Argument" scope="0" constness="0" isArray="false" isClass="false" isConst="false" isExtern="false" isPointer="false" isReference="false" isStatic="false" isVolatile="false"/>
  </variables>
  <valueflow>
    <values id="1574799f610">
      <value intvalue="-1" bound="Upper" impossible="true" path="0"/>
    </values>
    <values id="1574799f690">
      <value intvalue="18446744073709551615" bound="Upper" impossible="true" path="0"/>
    </values>
    <values id="1574799f030">
      <value tokvalue="157797f8630" bound="Point" known="true" path="0"/>
    </values>
    <values id="1574799f010">
      <value intvalue="1" bound="Point" known="true" path="0"/>
    </values>
  </valueflow>
</dump>
</dumps>
